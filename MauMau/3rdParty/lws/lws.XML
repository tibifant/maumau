<?xml version="1.0"?>
<doc>
    <assembly>
        <name>lws</name>
    </assembly>
    <members>
        <member name="T:LamestWebserver.Caching.ECachingType">
            <summary>
            Specifies whether an element or a page should be cached.
            </summary>
        </member>
        <member name="F:LamestWebserver.Caching.ECachingType.Cacheable">
            <summary>
            The element or page can be cached (does not include dynamic content).
            </summary>
        </member>
        <member name="F:LamestWebserver.Caching.ECachingType.NotCacheable">
            <summary>
            The element or page can not be cached (does include dynamic content).
            </summary>
        </member>
        <member name="F:LamestWebserver.Caching.ECachingType.Default">
            <summary>
            The element or page will take the default value for Cachable or NotCacheable from it's ancestor or the global Default.
            </summary>
        </member>
        <member name="T:LamestWebserver.Caching.ResponseCache">
            <summary>
            A general purpose key-value string cache.
            </summary>
        </member>
        <member name="F:LamestWebserver.Caching.ResponseCache.CurrentCacheInstance">
            <summary>
            The main ResponseCache instance for LamestWebserver.
            </summary>
        </member>
        <member name="F:LamestWebserver.Caching.ResponseCache.StringResponseCacheHashmapSize">
            <summary>
            The size of the underlying hashmap for the cached items.
            </summary>
        </member>
        <member name="P:LamestWebserver.Caching.ResponseCache.CurrentStringResponseCacheSize">
            <summary>
            The current size of the cache.
            </summary>
        </member>
        <member name="F:LamestWebserver.Caching.ResponseCache.MaximumStringResponseCacheSize">
            <summary>
            The Maximum Response cache size. if null: unlimited.
            <para/>
            Defaults to 1024 * 1024 * 256 = 512 MBytes (because of two byte characters).
            </summary>
        </member>
        <member name="M:LamestWebserver.Caching.ResponseCache.#ctor">
            <summary>
            Creates a new ResponseCache.
            </summary>
        </member>
        <member name="M:LamestWebserver.Caching.ResponseCache.GetCachedStringResponse(System.String,System.String@)">
            <summary>
            Retrieves a cached string response if it is cached.
            </summary>
            <param name="key">The key of the cached response</param>
            <param name="response">The cached response.</param>
            <returns>Returns true if the response could be retrieved.</returns>
        </member>
        <member name="M:LamestWebserver.Caching.ResponseCache.SetCachedStringResponse(System.String,System.String,System.Nullable{System.TimeSpan})">
            <summary>
            Sets a response to the cache.
            </summary>
            <param name="key">The key of the response.</param>
            <param name="response">The response.</param>
            <param name="refreshTime">The lifetime of this entry. If null this entry doesn't have to be refreshed.</param>
        </member>
        <member name="M:LamestWebserver.Caching.ResponseCache.GetCachedString(System.String,System.Func{System.String},System.Nullable{System.TimeSpan})">
            <summary>
            Retrueves a cached string or caches it using the source function.
            </summary>
            <param name="key">The key of the response.</param>
            <param name="sourceIfNotCached">A function that retrieves the source if it's not cached yet.</param>
            <param name="refreshTime">The lifetime of this entry. If null this entry doesn't have to be refreshed. This lifetime will not override the original lifetime of this entry.</param>
            <returns>The cached response.</returns>
        </member>
        <member name="M:LamestWebserver.Caching.ResponseCache.RemoveCachedString(System.String)">
            <summary>
            Removes a cached string from the cache.
            </summary>
            <param name="key">the key of the cached entry.</param>
        </member>
        <member name="M:LamestWebserver.Caching.ResponseCache.Clear">
            <summary>
            Clears the cache entirely.
            </summary>
        </member>
        <member name="F:LamestWebserver.Caching.ResponseCache.CacheMakeRoom_AdditionalFreeSpacePercentage">
            <summary>
            The additional free space to make - relative to the maximum cache size, when the cache is overflowing. (between 0 and 1)
            </summary>
        </member>
        <member name="F:LamestWebserver.Caching.ResponseCache.CacheMakeRoom_UpperPercentile_Date">
            <summary>
            The upper percentile for the date based cache cleaning. (between 0 and 1)
            </summary>
        </member>
        <member name="F:LamestWebserver.Caching.ResponseCache.CacheMakeRoom_UpperPercentile_Count">
            <summary>
            The upper percentile for the access count based cache cleaning. (between 0 and 1)
            </summary>
        </member>
        <member name="F:LamestWebserver.Caching.ResponseCache.CacheMakeRoom_RemoveBySizePercentage">
            <summary>
            The maximum percentage of entries to remove by size. (between 0 and 1)
            </summary>
        </member>
        <member name="F:LamestWebserver.Caching.ResponseCache.CacheMakeRoom_RemoveByTimePercentage">
            <summary>
            The maximum percentage of entries to remove by lifetime left. (between 0 and 1)
            </summary>
        </member>
        <member name="M:LamestWebserver.Caching.ResponseCache.MakeRoom(System.UInt64)">
            <summary>
            Makes room when the cache is overflowing.
            </summary>
            <param name="requestedSpace">The requested amount of free space. (Not including CacheMakeRoom_AdditionalFreeSpace)</param>
        </member>
        <member name="M:LamestWebserver.Caching.ResponseCache.RemoveCachedPrefixes(System.String)">
            <summary>
            Removes all Cached Entries that begin with a specific string prefix.
            </summary>
            <param name="prefix">The prefix.</param>
        </member>
        <member name="M:LamestWebserver.Caching.ResponseCache.RemoveStringResponseEntry(System.String,LamestWebserver.Caching.ResponseCache.ResponseCacheEntry{System.String})">
            <summary>
            Removes an entry from the cache.
            <para/> 
            This method can handle non-existent items.
            </summary>
            <param name="key">The key of the entry.</param>
            <param name="value">The response if already retrieved. If null, the response will be retrieved automatically.</param>
        </member>
        <member name="M:LamestWebserver.Caching.ResponseCache.RemoveStringResponseEntries(System.Collections.Generic.ICollection{System.String})">
            <summary>
            Removes a collection of entries from the cache.
            <para/> 
            This method can handle non-existent items.
            </summary>
            <param name="keys">The keys of the entries.</param>
        </member>
        <member name="M:LamestWebserver.Caching.ResponseCache.AddStringResponseEntry(System.String,LamestWebserver.Caching.ResponseCache.ResponseCacheEntry{System.String})">
            <summary>
            Adds an Entry to the cache.
            <para/> 
            This method can handle already existent items.
            </summary>
            <param name="key">The key of the response.</param>
            <param name="value">The response.</param>
        </member>
        <member name="M:LamestWebserver.Caching.ResponseCache.GetDebugResponseNode">
            <inheritdoc />
        </member>
        <member name="T:LamestWebserver.Caching.ResponseCache.ResponseCacheEntry`1">
            <summary>
            A cached response.
            </summary>
            <typeparam name="T">The type of the cached element.</typeparam>
        </member>
        <member name="F:LamestWebserver.Caching.ResponseCache.ResponseCacheEntry`1.LastUpdatedDateTime">
            <summary>
            The time when this entry was created or updated.
            </summary>
        </member>
        <member name="F:LamestWebserver.Caching.ResponseCache.ResponseCacheEntry`1.RefreshTime">
            <summary>
            The lifetime of this entry. If null it doesn't have to be refreshed.
            </summary>
        </member>
        <member name="F:LamestWebserver.Caching.ResponseCache.ResponseCacheEntry`1.Response">
            <summary>
            The Response to retrieve from this entry.
            </summary>
        </member>
        <member name="F:LamestWebserver.Caching.ResponseCache.ResponseCacheEntry`1.Count">
            <summary>
            The amount of times this entry has been requested.
            </summary>
        </member>
        <member name="F:LamestWebserver.Caching.ResponseCache.ResponseCacheEntry`1.LastRequestedDateTime">
            <summary>
            The time when this entry was accessed for the last time.
            </summary>
        </member>
        <member name="M:LamestWebserver.Caching.ResponseCache.ResponseCacheEntry`1.#ctor">
            <summary>
            Creates a new ResponseCacheEntry instance.
            </summary>
        </member>
        <member name="M:LamestWebserver.Caching.ResponseCache.ResponseCacheEntry`1.#ctor(`0,System.Nullable{System.TimeSpan})">
            <summary>
            Creates a new ResponseCacheEntry instance.
            </summary>
            <param name="respose">The response.</param>
            <param name="refreshTime">The lifetime of the cached entry. If null this entry doesn't have to be refreshed.</param>
        </member>
        <member name="M:LamestWebserver.Caching.ResponseCache.ResponseCacheEntry`1.Increment">
            <summary>
            Increments the Count and Updates the LastRequestedDateTime.
            </summary>
        </member>
        <member name="T:LamestWebserver.Collections.FixedSizeQueue`1">
            <summary>
            A Queue of fixed size that just wraps around and overrides the oldest elements if full.
            </summary>
            <typeparam name="T">The type of the queue elements.</typeparam>
        </member>
        <member name="P:LamestWebserver.Collections.FixedSizeQueue`1.MaximumCapacity">
            <summary>
            Gets or sets the maximum capacity of this FixedSizeQueue.
            </summary>
        </member>
        <member name="P:LamestWebserver.Collections.FixedSizeQueue`1.Count">
            <summary>
            The number of elements in this queue (capped by MaximumCapacity).
            </summary>
        </member>
        <member name="M:LamestWebserver.Collections.FixedSizeQueue`1.#ctor(System.Int32)">
            <summary>
            Constructs a new FixedSizeQueue.
            </summary>
            <param name="maximumCapacity">The maximum capacity of this Queue.</param>
        </member>
        <member name="M:LamestWebserver.Collections.FixedSizeQueue`1.Push(`0)">
            <summary>
            Adds an element to the queue.
            </summary>
            <param name="element">The element to add.</param>
        </member>
        <member name="P:LamestWebserver.Collections.FixedSizeQueue`1.Item(System.Int32)">
            <summary>
            Gets an element from this queue at the given index. The last added entry will be index 0 and all others can be accessed in order by the index counting upwards.
            </summary>
            <param name="index">The index of the element to get.</param>
            <returns>The element at the given index.</returns>
        </member>
        <member name="M:LamestWebserver.Collections.FixedSizeQueue`1.Clear">
            <summary>
            Clears the FixesSizeQueue.
            </summary>
        </member>
        <member name="M:LamestWebserver.Collections.FixedSizeQueue`1.Contains(`0)">
            <summary>
            Returns true if this FixedSizeQueue contains a given element.
            </summary>
            <param name="item">The element to look for.</param>
            <returns>Returns true if the element was found and false if not.</returns>
        </member>
        <member name="M:LamestWebserver.Collections.FixedSizeQueue`1.CopyTo(`0[],System.Int32)">
            <summary>
            Copies the contents of this FixedSizeQueue into an array.
            </summary>
            <param name="array">The array to copy to.</param>
            <param name="arrayIndex">The index to start with in the given array.</param>
        </member>
        <member name="M:LamestWebserver.Collections.FixedSizeQueue`1.GetEnumerator">
            <inheritdoc />
        </member>
        <member name="M:LamestWebserver.Collections.FixedSizeQueue`1.System#Collections#IEnumerable#GetEnumerator">
            <inheritdoc />
        </member>
        <member name="T:LamestWebserver.Collections.WalkableQueue`1">
            <summary>
            A Queue just moves the Position in an internal List forward so it's always possible to access every possible index at any given time even after moving through the Queue.
            </summary>
            <typeparam name="T">The type of </typeparam>
        </member>
        <member name="F:LamestWebserver.Collections.WalkableQueue`1._internalList">
            <summary>
            The internal list storing the queue entries.
            </summary>
        </member>
        <member name="P:LamestWebserver.Collections.WalkableQueue`1.Position">
            <summary>
            The current position in the Queue.
            </summary>
        </member>
        <member name="P:LamestWebserver.Collections.WalkableQueue`1.Count">
            <inheritdoc />
        </member>
        <member name="P:LamestWebserver.Collections.WalkableQueue`1.Current">
            <summary>
            Retrieves the current Element of the Queue.
            </summary>
        </member>
        <member name="M:LamestWebserver.Collections.WalkableQueue`1.#ctor(`0[])">
            <summary>
            Constructs a new WalkableQueue.
            </summary>
            <param name="objs">The entries to add to the queue.</param>
        </member>
        <member name="M:LamestWebserver.Collections.WalkableQueue`1.#ctor(System.Collections.Generic.List{`0})">
            <summary>
            Constructs a new WalkableQueue from a List;
            </summary>
            <param name="objs">The entries to add to the queue.</param>
        </member>
        <member name="P:LamestWebserver.Collections.WalkableQueue`1.Item(System.Int32)">
            <summary>
            Gets or Sets the element at a given index from this queue.
            </summary>
            <param name="index">The index of the element.</param>
            <returns>The element at a given index.</returns>
        </member>
        <member name="M:LamestWebserver.Collections.WalkableQueue`1.Push(`0)">
            <summary>
            Adds the given element to the queue.
            </summary>
            <param name="obj">The element to add to the queue.</param>
        </member>
        <member name="M:LamestWebserver.Collections.WalkableQueue`1.Peek">
            <summary>
            Retrieves the next element in the queue without moving the Position forward.
            </summary>
            <returns>Returns the next element in the queue or default(T)</returns>
        </member>
        <member name="M:LamestWebserver.Collections.WalkableQueue`1.Pop">
            <summary>
            Retrieves the next element in the queue by moving the Position forward.
            </summary>
            <returns>Returns the next element in the queue or default(T)</returns>
        </member>
        <member name="M:LamestWebserver.Collections.WalkableQueue`1.Clear">
            <summary>
            Clears the queue of all elements.
            </summary>
        </member>
        <member name="M:LamestWebserver.Collections.WalkableQueue`1.GetPassed">
            <summary>
            Retrieves all elements of the queue that we've already consumed.
            </summary>
            <returns>The elements as list.</returns>
        </member>
        <member name="M:LamestWebserver.Collections.WalkableQueue`1.GetConsumable">
            <summary>
            Retrieves all elements of the queue that we've not consumed yet.
            </summary>
            <returns>The elements as list.</returns>
        </member>
        <member name="M:LamestWebserver.Collections.WalkableQueue`1.GetAll">
            <summary>
            Retrieves all elements of the queue.
            </summary>
            <returns>The elements as list.</returns>
        </member>
        <member name="M:LamestWebserver.Collections.WalkableQueue`1.GetRange(System.Int32,System.Int32)">
            <summary>
            Retrieves all elements of the queue from a given index with a given length.
            </summary>
            <param name="startIndex">The index to begin at.</param>
            <param name="count">The amount of elements to get.</param>
            <returns>The elements as list.</returns>
        </member>
        <member name="M:LamestWebserver.Collections.WalkableQueue`1.ResetPosition">
            <summary>
            Resets the position of the queue to zero.
            </summary>
        </member>
        <member name="M:LamestWebserver.Collections.WalkableQueue`1.AtEnd">
            <summary>
            Retrieves true if the queue is already at it's end or false if not.
            </summary>
            <returns>Returns true if at end and false if not.</returns>
        </member>
        <member name="M:LamestWebserver.Collections.WalkableQueue`1.GetEnumerator">
            <inheritdoc />
        </member>
        <member name="M:LamestWebserver.Collections.WalkableQueue`1.System#Collections#IEnumerable#GetEnumerator">
            <inheritdoc />
        </member>
        <member name="T:LamestWebserver.Collections.URL`1">
            <summary>
            A fixed collection of elements.
            </summary>
            <typeparam name="T">The type of the elements.</typeparam>
        </member>
        <member name="P:LamestWebserver.Collections.URL`1.Count">
            <summary>
            Retrieves the amount of elements in this URL.
            </summary>
        </member>
        <member name="P:LamestWebserver.Collections.URL`1.Item(System.Int32)">
            <summary>
            Gets an element inside the URL.
            </summary>
            <param name="index">The index to get the element at.</param>
            <returns>Returns the element at this index.</returns>
        </member>
        <member name="M:LamestWebserver.Collections.URL`1.#ctor(System.Collections.Generic.IEnumerable{`0},System.String)">
            <summary>
            Creates a new URL out of the given folders.
            </summary>
            <param name="folders">The folders of this URL.</param>
            <param name="delimiter">The delimiter to display the URL with.</param>
        </member>
        <member name="M:LamestWebserver.Collections.URL`1.Append(`0)">
            <summary>
            Adds and item to the URL.
            </summary>
            <param name="item">The item to add.</param>
            <returns>A new URL with this element appended to.</returns>
        </member>
        <member name="M:LamestWebserver.Collections.URL`1.ToString">
            <inheritdoc />
        </member>
        <member name="M:LamestWebserver.Collections.URL`1.GetEnumerator">
            <inheritdoc />
        </member>
        <member name="M:LamestWebserver.Collections.URL`1.System#Collections#IEnumerable#GetEnumerator">
            <inheritdoc />
        </member>
        <member name="T:LamestWebserver.Collections.AVLHashMap`2">
            <summary>
            A HashMap which uses AVLTrees inside to access Values very fast.
            Returns default(T) / null if element not found.
            implements ISerializable, IXmlSerializable
            </summary>
            <typeparam name="TKey">The Type of the Keys (implement IComparable, IEquatable&lt;TKey&gt;)</typeparam>
            <typeparam name="TValue">The Type of the Values</typeparam>
        </member>
        <member name="M:LamestWebserver.Collections.AVLHashMap`2.#ctor(System.Int32)">
            <summary>
            Constructs a new AVLHashmap of the specified size
            </summary>
            <param name="size">the size of the hashmap</param>
        </member>
        <member name="M:LamestWebserver.Collections.AVLHashMap`2.#ctor">
            <summary>
            Constructs a new AVLHashmep with a size of 1024
            </summary>
        </member>
        <member name="P:LamestWebserver.Collections.AVLHashMap`2.Keys">
            <inheritdoc />
        </member>
        <member name="P:LamestWebserver.Collections.AVLHashMap`2.Values">
            <inheritdoc />
        </member>
        <member name="P:LamestWebserver.Collections.AVLHashMap`2.Count">
            <inheritdoc />
        </member>
        <member name="M:LamestWebserver.Collections.AVLHashMap`2.Validate">
            <summary>
            Used for UnitTests.
            </summary>
        </member>
        <member name="P:LamestWebserver.Collections.AVLHashMap`2.IsReadOnly">
            <inheritdoc />
        </member>
        <member name="P:LamestWebserver.Collections.AVLHashMap`2.Item(`0)">
            <inheritdoc />
        </member>
        <member name="M:LamestWebserver.Collections.AVLHashMap`2.ContainsKey(`0)">
            <inheritdoc />
        </member>
        <member name="M:LamestWebserver.Collections.AVLHashMap`2.Add(`0,`1)">
            <inheritdoc />
        </member>
        <member name="M:LamestWebserver.Collections.AVLHashMap`2.Remove(System.Collections.Generic.KeyValuePair{`0,`1})">
            <inheritdoc />
        </member>
        <member name="M:LamestWebserver.Collections.AVLHashMap`2.TryGetValue(`0,`1@)">
            <inheritdoc />
        </member>
        <member name="M:LamestWebserver.Collections.AVLHashMap`2.Add(System.Collections.Generic.KeyValuePair{`0,`1})">
            <inheritdoc />
        </member>
        <member name="M:LamestWebserver.Collections.AVLHashMap`2.Clear">
            <inheritdoc />
        </member>
        <member name="M:LamestWebserver.Collections.AVLHashMap`2.Contains(System.Collections.Generic.KeyValuePair{`0,`1})">
            <inheritdoc />
        </member>
        <member name="M:LamestWebserver.Collections.AVLHashMap`2.CopyTo(System.Collections.Generic.KeyValuePair{`0,`1}[],System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:LamestWebserver.Collections.AVLHashMap`2.Remove(`0)">
            <inheritdoc />
        </member>
        <member name="M:LamestWebserver.Collections.AVLHashMap`2.GetEnumerator">
            <inheritdoc />
        </member>
        <member name="M:LamestWebserver.Collections.AVLHashMap`2.System#Collections#IEnumerable#GetEnumerator">
            <inheritdoc />
        </member>
        <member name="M:LamestWebserver.Collections.AVLHashMap`2.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <inheritdoc />
        </member>
        <member name="M:LamestWebserver.Collections.AVLHashMap`2.GetSchema">
            <inheritdoc />
        </member>
        <member name="M:LamestWebserver.Collections.AVLHashMap`2.ReadXml(System.Xml.XmlReader)">
            <inheritdoc />
        </member>
        <member name="M:LamestWebserver.Collections.AVLHashMap`2.WriteXml(System.Xml.XmlWriter)">
            <inheritdoc />
        </member>
        <member name="T:LamestWebserver.Collections.AVLHashMap`2.Entry">
            <summary>
            Only used for Serializing
            </summary>
        </member>
        <member name="P:LamestWebserver.Collections.AVLHashMap`2.Entry.Key">
            <summary>
            The Key
            </summary>
        </member>
        <member name="P:LamestWebserver.Collections.AVLHashMap`2.Entry.Value">
            <summary>
            The Value
            </summary>
        </member>
        <member name="M:LamestWebserver.Collections.AVLHashMap`2.Entry.#ctor(`0,`1)">
            <summary>
            Constructs a new Entry
            </summary>
            <param name="key">the Key</param>
            <param name="value">the Value</param>
        </member>
        <member name="M:LamestWebserver.Collections.AVLHashMap`2.Entry.op_Implicit(System.Collections.Generic.KeyValuePair{`0,`1})~LamestWebserver.Collections.AVLHashMap{`0,`1}.Entry">
            <summary>
            Casts a KeyValuePair to an Entry
            </summary>
            <param name="input">the KeyValuePair</param>
            <returns>the Entry</returns>
        </member>
        <member name="M:LamestWebserver.Collections.AVLHashMap`2.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Deserializes an AVLHashmap
            </summary>
            <param name="info">SerializationInfo</param>
            <param name="context">StreamingContext</param>
        </member>
        <member name="M:LamestWebserver.Collections.AVLHashMap`2.AVLNode.#ctor">
            <summary>
            Empty constructor for Deserialisation
            </summary>
        </member>
        <member name="M:LamestWebserver.Collections.AVLHashMap`2.AVLNode.BalanceBubbleUp(LamestWebserver.Collections.AVLHashMap{`0,`1}.AVLNode,System.Object[],System.Int32)">
            <summary>
            Called after adding a node
            </summary>
        </member>
        <member name="M:LamestWebserver.Collections.AVLHashMap`2.AVLNode.BalanceSelfBubbleUp(LamestWebserver.Collections.AVLHashMap{`0,`1}.AVLNode,System.Object[],System.Int32)">
            <summary>
            Called after removing a node - can handle more than 2 or -2 balances on self
            </summary>
        </member>
        <member name="T:LamestWebserver.Collections.AVLTree`2">
            <summary>
            A automatically balancing BinaryTree to keep logarithmic search behaviour.
            Returns default(T) / null if element not found.
            implements ISerializable, IXmlSerializable
            </summary>
            <typeparam name="TKey">The Type of the Keys (implement IComparable, IEquatable&lt;TKey&gt;)</typeparam>
            <typeparam name="TValue">The Type of the Values</typeparam>
        </member>
        <member name="P:LamestWebserver.Collections.AVLTree`2.Item(`0)">
            <inheritdoc />
        </member>
        <member name="P:LamestWebserver.Collections.AVLTree`2.Count">
            <inheritdoc />
        </member>
        <member name="P:LamestWebserver.Collections.AVLTree`2.IsReadOnly">
            <inheritdoc />
        </member>
        <member name="P:LamestWebserver.Collections.AVLTree`2.Keys">
            <inheritdoc />
        </member>
        <member name="P:LamestWebserver.Collections.AVLTree`2.Values">
            <inheritdoc />
        </member>
        <member name="M:LamestWebserver.Collections.AVLTree`2.Add(System.Collections.Generic.KeyValuePair{`0,`1})">
            <inheritdoc />
        </member>
        <member name="M:LamestWebserver.Collections.AVLTree`2.Add(`0,`1)">
            <inheritdoc />
        </member>
        <member name="M:LamestWebserver.Collections.AVLTree`2.Clear">
            <inheritdoc />
        </member>
        <member name="M:LamestWebserver.Collections.AVLTree`2.Contains(System.Collections.Generic.KeyValuePair{`0,`1})">
            <inheritdoc />
        </member>
        <member name="M:LamestWebserver.Collections.AVLTree`2.ContainsKey(`0)">
            <inheritdoc />
        </member>
        <member name="M:LamestWebserver.Collections.AVLTree`2.CopyTo(System.Collections.Generic.KeyValuePair{`0,`1}[],System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:LamestWebserver.Collections.AVLTree`2.GetEnumerator">
            <inheritdoc />
        </member>
        <member name="M:LamestWebserver.Collections.AVLTree`2.Remove(System.Collections.Generic.KeyValuePair{`0,`1})">
            <inheritdoc />
        </member>
        <member name="M:LamestWebserver.Collections.AVLTree`2.Remove(`0)">
            <inheritdoc />
        </member>
        <member name="M:LamestWebserver.Collections.AVLTree`2.TryGetValue(`0,`1@)">
            <inheritdoc />
        </member>
        <member name="M:LamestWebserver.Collections.AVLTree`2.System#Collections#IEnumerable#GetEnumerator">
            <inheritdoc />
        </member>
        <member name="M:LamestWebserver.Collections.AVLTree`2.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <inheritdoc />
        </member>
        <member name="M:LamestWebserver.Collections.AVLTree`2.#ctor">
            <summary>
            Deserialization Constructor for XML
            </summary>
        </member>
        <member name="M:LamestWebserver.Collections.AVLTree`2.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Deserializes an AVLTree.
            </summary>
            <param name="info">SerializationInfo</param>
            <param name="context">StreamingContext</param>
        </member>
        <member name="M:LamestWebserver.Collections.AVLTree`2.Validate">
            <summary>
            Only used for the UnitTests.
            </summary>
        </member>
        <member name="M:LamestWebserver.Collections.AVLTree`2.GetSchema">
            <inheritdoc />
        </member>
        <member name="M:LamestWebserver.Collections.AVLTree`2.ReadXml(System.Xml.XmlReader)">
            <inheritdoc />
        </member>
        <member name="M:LamestWebserver.Collections.AVLTree`2.WriteXml(System.Xml.XmlWriter)">
            <inheritdoc />
        </member>
        <member name="T:LamestWebserver.Collections.AVLTree`2.Entry">
            <summary>
            Only used for Serializing AVLTrees
            </summary>
        </member>
        <member name="P:LamestWebserver.Collections.AVLTree`2.Entry.Key">
            <summary>
            The key.
            </summary>
        </member>
        <member name="P:LamestWebserver.Collections.AVLTree`2.Entry.Value">
            <summary>
            The value.
            </summary>
        </member>
        <member name="M:LamestWebserver.Collections.AVLTree`2.Entry.#ctor(`0,`1)">
            <summary>
            Constructs a new Entry.
            </summary>
            <param name="key">the key</param>
            <param name="value">the value</param>
        </member>
        <member name="M:LamestWebserver.Collections.AVLTree`2.Entry.op_Implicit(System.Collections.Generic.KeyValuePair{`0,`1})~LamestWebserver.Collections.AVLTree{`0,`1}.Entry">
            <summary>
            Casts a (not xml serializable) KeyValuePair to an Entry
            </summary>
            <param name="input">the KeyValuePair</param>
            <returns>The entry</returns>
        </member>
        <member name="M:LamestWebserver.Collections.AVLTree`2.AVLNode.#ctor">
            <summary>
            Empty constructor for Deserialisation
            </summary>
        </member>
        <member name="M:LamestWebserver.Collections.AVLTree`2.AVLNode.BalanceBubbleUp(LamestWebserver.Collections.AVLTree{`0,`1}.AVLNode,LamestWebserver.Collections.AVLTree{`0,`1})">
            <summary>
            Called after adding a node
            </summary>
        </member>
        <member name="M:LamestWebserver.Collections.AVLTree`2.AVLNode.BalanceSelfBubbleUp(LamestWebserver.Collections.AVLTree{`0,`1}.AVLNode,LamestWebserver.Collections.AVLTree{`0,`1})">
            <summary>
            Called after removing a node - can handle more than 2 or -2 balances on self
            </summary>
        </member>
        <member name="T:LamestWebserver.Collections.QueuedAVLTree`2">
            <summary>
            A automatically balancing BinaryTree to keep logarithmic search behaviour combined with a Queue. Search, Add, Remove: O(log(n)); RemoveFirst: O(1);
            If the ItemCount exceeds the specified limit, the oldest entry is removed.
            Returns default(T) / null if element not found.
            </summary>
            <typeparam name="TKey">The Type of the Keys (implement IComparable, IEquatable&lt;TKey&gt;)</typeparam>
            <typeparam name="TValue">The Type of the Values</typeparam>
        </member>
        <member name="M:LamestWebserver.Collections.QueuedAVLTree`2.#ctor">
            <summary>
            Constructs a new QueuedAVLTree with a size of 4096.
            </summary>
        </member>
        <member name="M:LamestWebserver.Collections.QueuedAVLTree`2.#ctor(System.Int32)">
            <summary>
            Constructs a new QueuedAVLTree with a specified maximum size
            </summary>
            <param name="maxSize">the maximum size</param>
        </member>
        <member name="P:LamestWebserver.Collections.QueuedAVLTree`2.Item(`0)">
            <inheritdoc />
        </member>
        <member name="P:LamestWebserver.Collections.QueuedAVLTree`2.Count">
            <inheritdoc />
        </member>
        <member name="P:LamestWebserver.Collections.QueuedAVLTree`2.IsReadOnly">
            <inheritdoc />
        </member>
        <member name="P:LamestWebserver.Collections.QueuedAVLTree`2.Keys">
            <inheritdoc />
        </member>
        <member name="P:LamestWebserver.Collections.QueuedAVLTree`2.Values">
            <inheritdoc />
        </member>
        <member name="M:LamestWebserver.Collections.QueuedAVLTree`2.Add(System.Collections.Generic.KeyValuePair{`0,`1})">
            <inheritdoc />
        </member>
        <member name="M:LamestWebserver.Collections.QueuedAVLTree`2.Add(`0,`1)">
            <inheritdoc />
        </member>
        <member name="M:LamestWebserver.Collections.QueuedAVLTree`2.Clear">
            <inheritdoc />
        </member>
        <member name="M:LamestWebserver.Collections.QueuedAVLTree`2.Contains(System.Collections.Generic.KeyValuePair{`0,`1})">
            <inheritdoc />
        </member>
        <member name="M:LamestWebserver.Collections.QueuedAVLTree`2.ContainsKey(`0)">
            <inheritdoc />
        </member>
        <member name="M:LamestWebserver.Collections.QueuedAVLTree`2.CopyTo(System.Collections.Generic.KeyValuePair{`0,`1}[],System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:LamestWebserver.Collections.QueuedAVLTree`2.GetEnumerator">
            <inheritdoc />
        </member>
        <member name="M:LamestWebserver.Collections.QueuedAVLTree`2.Remove(System.Collections.Generic.KeyValuePair{`0,`1})">
            <inheritdoc />
        </member>
        <member name="M:LamestWebserver.Collections.QueuedAVLTree`2.Remove(`0)">
            <inheritdoc />
        </member>
        <member name="M:LamestWebserver.Collections.QueuedAVLTree`2.TryGetValue(`0,`1@)">
            <inheritdoc />
        </member>
        <member name="M:LamestWebserver.Collections.QueuedAVLTree`2.System#Collections#IEnumerable#GetEnumerator">
            <inheritdoc />
        </member>
        <member name="M:LamestWebserver.Collections.QueuedAVLTree`2.Validate">
            <summary>
            Used for UnitTests.
            </summary>
        </member>
        <member name="M:LamestWebserver.Collections.QueuedAVLTree`2.AVLNode.BalanceBubbleUp(LamestWebserver.Collections.QueuedAVLTree{`0,`1}.AVLNode,LamestWebserver.Collections.QueuedAVLTree{`0,`1})">
            <summary>
            Called after adding a node
            </summary>
        </member>
        <member name="M:LamestWebserver.Collections.QueuedAVLTree`2.AVLNode.BalanceSelfBubbleUp(LamestWebserver.Collections.QueuedAVLTree{`0,`1}.AVLNode,LamestWebserver.Collections.QueuedAVLTree{`0,`1})">
            <summary>
            Called after removing a node - can handle more than 2 or -2 balances on self
            </summary>
        </member>
        <member name="T:LamestWebserver.Collections.BitList">
            <summary>
            A special - very storage effective - List for Bits.
            </summary>
        </member>
        <member name="P:LamestWebserver.Collections.BitList.Item(System.Int32)">
            <inheritdoc />
        </member>
        <member name="P:LamestWebserver.Collections.BitList.Count">
            <inheritdoc />
        </member>
        <member name="P:LamestWebserver.Collections.BitList.IsReadOnly">
            <inheritdoc />
        </member>
        <member name="M:LamestWebserver.Collections.BitList.Add(System.Boolean)">
            <inheritdoc />
        </member>
        <member name="M:LamestWebserver.Collections.BitList.Clear">
            <inheritdoc />
        </member>
        <member name="M:LamestWebserver.Collections.BitList.Contains(System.Boolean)">
            <inheritdoc />
        </member>
        <member name="M:LamestWebserver.Collections.BitList.CopyTo(System.Boolean[],System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:LamestWebserver.Collections.BitList.GetEnumerator">
            <inheritdoc />
        </member>
        <member name="M:LamestWebserver.Collections.BitList.IndexOf(System.Boolean)">
            <inheritdoc />
        </member>
        <member name="M:LamestWebserver.Collections.BitList.Insert(System.Int32,System.Boolean)">
            <inheritdoc />
        </member>
        <member name="M:LamestWebserver.Collections.BitList.Remove(System.Boolean)">
            <inheritdoc />
        </member>
        <member name="M:LamestWebserver.Collections.BitList.RemoveAt(System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:LamestWebserver.Collections.BitList.System#Collections#IEnumerable#GetEnumerator">
            <inheritdoc />
        </member>
        <member name="T:LamestWebserver.Collections.ActionList`1">
            <summary>
            List with the ability to do a action every time it's been change.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="F:LamestWebserver.Collections.ActionList`1.ActionToExecute">
            <summary>
            Action that get executed after each manipulation.
            </summary>
        </member>
        <member name="M:LamestWebserver.Collections.ActionList`1.#ctor">
            <summary>
            Constructs an empty ActionList.
            </summary>
        </member>
        <member name="M:LamestWebserver.Collections.ActionList`1.#ctor(System.Action)">
            <summary>
            Constructs an empty ActionList.
            </summary>
            <param name="action">The action to execute on change.</param>
        </member>
        <member name="M:LamestWebserver.Collections.ActionList`1.#ctor(System.Collections.Generic.IEnumerable{`0},System.Action)">
            <summary>
            Constructs an empty ActionList.
            </summary>
            <param name="collection">The collection to use as internal list.</param>
            <param name="action">The action to execute on change.</param>
        </member>
        <member name="P:LamestWebserver.Collections.ActionList`1.Item(System.Int32)">
            <inheritdoc />
        </member>
        <member name="P:LamestWebserver.Collections.ActionList`1.Count">
            <inheritdoc />
        </member>
        <member name="P:LamestWebserver.Collections.ActionList`1.IsReadOnly">
            <inheritdoc />
        </member>
        <member name="M:LamestWebserver.Collections.ActionList`1.Add(`0)">
            <inheritdoc />
        </member>
        <member name="M:LamestWebserver.Collections.ActionList`1.Clear">
            <inheritdoc />
        </member>
        <member name="M:LamestWebserver.Collections.ActionList`1.Contains(`0)">
            <inheritdoc />
        </member>
        <member name="M:LamestWebserver.Collections.ActionList`1.CopyTo(`0[],System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:LamestWebserver.Collections.ActionList`1.GetEnumerator">
            <inheritdoc />
        </member>
        <member name="M:LamestWebserver.Collections.ActionList`1.IndexOf(`0)">
            <inheritdoc />
        </member>
        <member name="M:LamestWebserver.Collections.ActionList`1.Insert(System.Int32,`0)">
            <inheritdoc />
        </member>
        <member name="M:LamestWebserver.Collections.ActionList`1.Remove(`0)">
            <inheritdoc />
        </member>
        <member name="M:LamestWebserver.Collections.ActionList`1.RemoveAt(System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:LamestWebserver.Collections.ActionList`1.RemoveAll(System.Predicate{`0})">
            <inheritdoc />
        </member>
        <member name="M:LamestWebserver.Collections.ActionList`1.System#Collections#IEnumerable#GetEnumerator">
            <inheritdoc />
        </member>
        <!-- Badly formed XML comment ignored for member "M:LamestWebserver.Core.AsyncHelper.RunSync(System.Func{System.Threading.Tasks.Task})" -->
        <!-- Badly formed XML comment ignored for member "M:LamestWebserver.Core.AsyncHelper.RunSync``1(System.Func{System.Threading.Tasks.Task{``0}})" -->
        <member name="T:LamestWebserver.Core.ClampedValue`1">
            <summary>
            A container type for IComparable&lt;T&gt; that always clamps the value at the given maximum and minimum value.
            </summary>
            <typeparam name="T">The Type of the clamped value. Must inherit from IComparable&lt;T&gt;.</typeparam>
        </member>
        <member name="P:LamestWebserver.Core.ClampedValue`1.Minimum">
            <summary>
            The minimum Value.
            </summary>
        </member>
        <member name="P:LamestWebserver.Core.ClampedValue`1.Maximum">
            <summary>
            The maximum Value.
            </summary>
        </member>
        <member name="P:LamestWebserver.Core.ClampedValue`1.Value">
            <summary>
            The clamped Value.
            </summary>
        </member>
        <member name="M:LamestWebserver.Core.ClampedValue`1.#ctor(`0,`0,`0)">
            <summary>
            Initializes a ClampedValue object.
            </summary>
            <param name="value">The value.</param>
            <param name="minimum">The minimum Value.</param>
            <param name="maximum">The maximum Value.</param>
        </member>
        <member name="M:LamestWebserver.Core.ClampedValue`1.#ctor(`0,`0)">
            <summary>
            Initializes a ClampedValue object without a value.
            </summary>
            <param name="minimum">The minimum Value.</param>
            <param name="maximum">The maximum Value.</param>
        </member>
        <member name="M:LamestWebserver.Core.ClampedValue`1.#ctor">
            <summary>
            Deserialzation Constructor or non-initializing Constructor.
            </summary>
        </member>
        <member name="M:LamestWebserver.Core.ClampedValue`1.op_Implicit(LamestWebserver.Core.ClampedValue{`0})~`0">
            <summary>
            Retrieves the Value from a ClampedValue&lt;T&gt;.
            </summary>
            <param name="clampedValue">The ClampedValue to retrieve from.</param>
        </member>
        <member name="M:LamestWebserver.Core.ClampedValue`1.Equals(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:LamestWebserver.Core.ClampedValue`1.ToString">
            <inheritdoc />
        </member>
        <member name="T:LamestWebserver.Core.ExtentionMethods">
            <summary>
            Contains General Purpose Extention Methods.
            </summary>
        </member>
        <member name="M:LamestWebserver.Core.ExtentionMethods.DecodeHtml(System.String)">
            <summary>
            Decodes the characters of a HTML string.
            </summary>
            <param name="text">the string to decode</param>
            <returns>the decoded string</returns>
        </member>
        <member name="M:LamestWebserver.Core.ExtentionMethods.DecodeUrl(System.String)">
            <summary>
            Decodes the characters of a Url string.
            </summary>
            <param name="text">the string to decode</param>
            <returns>the decoded string</returns>
        </member>
        <member name="M:LamestWebserver.Core.ExtentionMethods.EncodeUrl(System.String)">
            <summary>
            HTTP URL encodes a given input
            </summary>
            <param name="text">the input</param>
            <returns>the input encoded as HTTP URL</returns>
        </member>
        <member name="M:LamestWebserver.Core.ExtentionMethods.EncodeHtml(System.String)">
            <summary>
            HTML encodes a given input
            </summary>
            <param name="text">the input</param>
            <returns>the input encoded as HTML</returns>
        </member>
        <member name="M:LamestWebserver.Core.ExtentionMethods.ToSeparatedValueString(System.Collections.Generic.IEnumerable{System.Object},System.String)">
            <summary>
            Appends all contained values separated by a given string.
            </summary>
            <param name="obj">The IEnumerable to extract the values from.</param>
            <param name="separator">The string to separate with.</param>
            <returns>The appended values separated by the separator string.</returns>
        </member>
        <member name="M:LamestWebserver.Core.ExtentionMethods.GetIndex``1(System.Collections.Generic.List{``0},``0)">
            <summary>
            Gets the index of an Element from a List.
            </summary>
            <typeparam name="T">The Type of the List-Elements</typeparam>
            <param name="list">The List</param>
            <param name="value">The Value</param>
            <returns>Index or null if not contained or value is null</returns>
        </member>
        <member name="M:LamestWebserver.Core.ExtentionMethods.GetIndex``1(``0[],``0)">
            <summary>
            Gets the index of an Element from an Array.
            </summary>
            <typeparam name="T">The Type of the Array-Elements</typeparam>
            <param name="list">The Array</param>
            <param name="value">The Value</param>
            <returns>Index or null if not contained or value is null</returns>
        </member>
        <member name="M:LamestWebserver.Core.ExtentionMethods.ToHexString(System.Byte[])">
            <summary>
            Converts a byte[] to a hex string.
            </summary>
            <param name="bytes">The byte[].</param>
            <returns>the byte[] as hex string</returns>
        </member>
        <member name="M:LamestWebserver.Core.ExtentionMethods.ToHexString(System.UInt64)">
            <summary>
            Converts a number to a hex string.
            </summary>
            <param name="value">The number.</param>
            <returns>The number as hex string.</returns>
        </member>
        <member name="M:LamestWebserver.Core.ExtentionMethods.ToHexString(System.UInt32)">
            <summary>
            Converts a number to a hex string.
            </summary>
            <param name="value">The number.</param>
            <returns>The number as hex string.</returns>
        </member>
        <member name="M:LamestWebserver.Core.ExtentionMethods.ToHexString(System.UInt16)">
            <summary>
            Converts a number to a hex string.
            </summary>
            <param name="value">The number.</param>
            <returns>The number as hex string.</returns>
        </member>
        <member name="M:LamestWebserver.Core.ExtentionMethods.ToHexString(System.Byte)">
            <summary>
            Converts a number to a hex string.
            </summary>
            <param name="value">The number.</param>
            <returns>The number as hex string.</returns>
        </member>
        <member name="M:LamestWebserver.Core.ExtentionMethods.ToHexString(System.Int64)">
            <summary>
            Converts a number to a hex string.
            </summary>
            <param name="value">The number.</param>
            <returns>The number as hex string.</returns>
        </member>
        <member name="M:LamestWebserver.Core.ExtentionMethods.ToHexString(System.Int32)">
            <summary>
            Converts a number to a hex string.
            </summary>
            <param name="value">The number.</param>
            <returns>The number as hex string.</returns>
        </member>
        <member name="M:LamestWebserver.Core.ExtentionMethods.ToHexString(System.Int16)">
            <summary>
            Converts a number to a hex string.
            </summary>
            <param name="value">The number.</param>
            <returns>The number as hex string.</returns>
        </member>
        <member name="M:LamestWebserver.Core.ExtentionMethods.ToHexString(System.SByte)">
            <summary>
            Converts a number to a hex string.
            </summary>
            <param name="value">The number.</param>
            <returns>The number as hex string.</returns>
        </member>
        <member name="M:LamestWebserver.Core.ExtentionMethods.ToBitString(System.UInt64)">
            <summary>
            Retrieves the bits of a given integer.
            </summary>
            <param name="value">The integer.</param>
            <returns>The Bits as '1' and '0'.</returns>
        </member>
        <member name="M:LamestWebserver.Core.ExtentionMethods.ToBitString(System.UInt32)">
            <summary>
            Retrieves the bits of a given integer.
            </summary>
            <param name="value">The integer.</param>
            <returns>The Bits as '1' and '0'.</returns>
        </member>
        <member name="M:LamestWebserver.Core.ExtentionMethods.ToBitString(System.UInt16)">
            <summary>
            Retrieves the bits of a given integer.
            </summary>
            <param name="value">The integer.</param>
            <returns>The Bits as '1' and '0'.</returns>
        </member>
        <member name="M:LamestWebserver.Core.ExtentionMethods.ToBitString(System.Byte)">
            <summary>
            Retrieves the bits of a given integer.
            </summary>
            <param name="value">The integer.</param>
            <returns>The Bits as '1' and '0'.</returns>
        </member>
        <member name="M:LamestWebserver.Core.ExtentionMethods.ToBitString(System.Int64)">
            <summary>
            Retrieves the bits of a given integer.
            </summary>
            <param name="value">The integer.</param>
            <returns>The Bits as '1' and '0'.</returns>
        </member>
        <member name="M:LamestWebserver.Core.ExtentionMethods.ToBitString(System.Int32)">
            <summary>
            Retrieves the bits of a given integer.
            </summary>
            <param name="value">The integer.</param>
            <returns>The Bits as '1' and '0'.</returns>
        </member>
        <member name="M:LamestWebserver.Core.ExtentionMethods.ToBitString(System.Int16)">
            <summary>
            Retrieves the bits of a given integer.
            </summary>
            <param name="value">The integer.</param>
            <returns>The Bits as '1' and '0'.</returns>
        </member>
        <member name="M:LamestWebserver.Core.ExtentionMethods.ToBitString(System.SByte)">
            <summary>
            Retrieves the bits of a given integer.
            </summary>
            <param name="value">The integer.</param>
            <returns>The Bits as '1' and '0'.</returns>
        </member>
        <member name="M:LamestWebserver.Core.ExtentionMethods.ToEnumerable``1(System.Tuple{``0})">
            <summary>
            Casts a Tuple to an IEnumerable.
            </summary>
            <param name="tuple">The tuple to cast to IEnumerable.</param>
            <returns>The elements in order as IEnumerable (object[]).</returns>
        </member>
        <member name="M:LamestWebserver.Core.ExtentionMethods.ToEnumerable``2(System.Tuple{``0,``1})">
            <summary>
            Casts a Tuple to an IEnumerable.
            </summary>
            <param name="tuple">The tuple to cast to IEnumerable.</param>
            <returns>The elements in order as IEnumerable (object[]).</returns>
        </member>
        <member name="M:LamestWebserver.Core.ExtentionMethods.ToEnumerable``3(System.Tuple{``0,``1,``2})">
            <summary>
            Casts a Tuple to an IEnumerable.
            </summary>
            <param name="tuple">The tuple to cast to IEnumerable.</param>
            <returns>The elements in order as IEnumerable (object[]).</returns>
        </member>
        <member name="M:LamestWebserver.Core.ExtentionMethods.ToEnumerable``4(System.Tuple{``0,``1,``2,``3})">
            <summary>
            Casts a Tuple to an IEnumerable.
            </summary>
            <param name="tuple">The tuple to cast to IEnumerable.</param>
            <returns>The elements in order as IEnumerable (object[]).</returns>
        </member>
        <member name="M:LamestWebserver.Core.ExtentionMethods.ToEnumerable``5(System.Tuple{``0,``1,``2,``3,``4})">
            <summary>
            Casts a Tuple to an IEnumerable.
            </summary>
            <param name="tuple">The tuple to cast to IEnumerable.</param>
            <returns>The elements in order as IEnumerable (object[]).</returns>
        </member>
        <member name="M:LamestWebserver.Core.ExtentionMethods.ToEnumerable``6(System.Tuple{``0,``1,``2,``3,``4,``5})">
            <summary>
            Casts a Tuple to an IEnumerable.
            </summary>
            <param name="tuple">The tuple to cast to IEnumerable.</param>
            <returns>The elements in order as IEnumerable (object[]).</returns>
        </member>
        <member name="M:LamestWebserver.Core.ExtentionMethods.ToEnumerable``7(System.Tuple{``0,``1,``2,``3,``4,``5,``6})">
            <summary>
            Casts a Tuple to an IEnumerable.
            </summary>
            <param name="tuple">The tuple to cast to IEnumerable.</param>
            <returns>The elements in order as IEnumerable (object[]).</returns>
        </member>
        <member name="M:LamestWebserver.Core.ExtentionMethods.ToEnumerable``8(System.Tuple{``0,``1,``2,``3,``4,``5,``6,``7})">
            <summary>
            Casts a Tuple to an IEnumerable.
            </summary>
            <param name="tuple">The tuple to cast to IEnumerable.</param>
            <returns>The elements in order as IEnumerable (object[]).</returns>
        </member>
        <member name="M:LamestWebserver.Core.ExtentionMethods.ToEnumerable``1(System.ValueTuple{``0})">
            <summary>
            Casts a ValueTuple to an IEnumerable.
            </summary>
            <param name="tuple">The valueTuple to cast to IEnumerable.</param>
            <returns>The elements in order as IEnumerable (object[]).</returns>
        </member>
        <member name="M:LamestWebserver.Core.ExtentionMethods.ToEnumerable``2(System.ValueTuple{``0,``1})">
            <summary>
            Casts a ValueTuple to an IEnumerable.
            </summary>
            <param name="tuple">The valueTuple to cast to IEnumerable.</param>
            <returns>The elements in order as IEnumerable (object[]).</returns>
        </member>
        <member name="M:LamestWebserver.Core.ExtentionMethods.ToEnumerable``3(System.ValueTuple{``0,``1,``2})">
            <summary>
            Casts a ValueTuple to an IEnumerable.
            </summary>
            <param name="tuple">The valueTuple to cast to IEnumerable.</param>
            <returns>The elements in order as IEnumerable (object[]).</returns>
        </member>
        <member name="M:LamestWebserver.Core.ExtentionMethods.ToEnumerable``4(System.ValueTuple{``0,``1,``2,``3})">
            <summary>
            Casts a ValueTuple to an IEnumerable.
            </summary>
            <param name="tuple">The valueTuple to cast to IEnumerable.</param>
            <returns>The elements in order as IEnumerable (object[]).</returns>
        </member>
        <member name="M:LamestWebserver.Core.ExtentionMethods.ToEnumerable``5(System.ValueTuple{``0,``1,``2,``3,``4})">
            <summary>
            Casts a ValueTuple to an IEnumerable.
            </summary>
            <param name="tuple">The valueTuple to cast to IEnumerable.</param>
            <returns>The elements in order as IEnumerable (object[]).</returns>
        </member>
        <member name="M:LamestWebserver.Core.ExtentionMethods.ToEnumerable``6(System.ValueTuple{``0,``1,``2,``3,``4,``5})">
            <summary>
            Casts a ValueTuple to an IEnumerable.
            </summary>
            <param name="tuple">The valueTuple to cast to IEnumerable.</param>
            <returns>The elements in order as IEnumerable (object[]).</returns>
        </member>
        <member name="M:LamestWebserver.Core.ExtentionMethods.ToEnumerable``7(System.ValueTuple{``0,``1,``2,``3,``4,``5,``6})">
            <summary>
            Casts a ValueTuple to an IEnumerable.
            </summary>
            <param name="tuple">The valueTuple to cast to IEnumerable.</param>
            <returns>The elements in order as IEnumerable (object[]).</returns>
        </member>
        <member name="M:LamestWebserver.Core.ExtentionMethods.ToEnumerable``8(System.ValueTuple{``0,``1,``2,``3,``4,``5,``6,``7})">
            <summary>
            Casts a ValueTuple to an IEnumerable.
            </summary>
            <param name="tuple">The valueTuple to cast to IEnumerable.</param>
            <returns>The elements in order as IEnumerable (object[]).</returns>
        </member>
        <member name="M:LamestWebserver.Core.ExtentionMethods.StartsWith``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Checks whether a list starts with a certain sequence.
            </summary>
            <typeparam name="T">The type of the elements of the list.</typeparam>
            <param name="list">The list to check.</param>
            <param name="startsWith">The sequence the list has to start with.</param>
            <returns>Returns true if the list starts with the given sequence. False if not.</returns>
        </member>
        <member name="M:LamestWebserver.Core.ExtentionMethods.ContainsEqualSequence``1(System.Collections.Generic.IEnumerable{System.Collections.Generic.IEnumerable{``0}},System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Checks whether a list of lists contains a given list, that is equal to the provided sequence.
            </summary>
            <typeparam name="T">Type contained in the lists inside the list.</typeparam>
            <param name="listOfLists">This list of lists.</param>
            <param name="sequence">The sequence to look for.</param>
            <returns>True if contained, False if not contained.</returns>
        </member>
        <member name="M:LamestWebserver.Core.ExtentionMethods.Contains``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})">
            <summary>
            A generic Contains function for IEnumerables.
            </summary>
            <typeparam name="T">The type of the elements to compare.</typeparam>
            <param name="list">The list to search through.</param>
            <param name="containedList">The potentially contained list.</param>
            <returns>Returns true if contained, false if not contained.</returns>
        </member>
        <member name="M:LamestWebserver.Core.ExtentionMethods.SubsequenceContains``1(System.Collections.Generic.IEnumerable{System.Collections.Generic.IEnumerable{``0}},System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Checks whether a list of lists contains a given list, that contains the provided sequence.
            </summary>
            <typeparam name="T">Subsequence type.</typeparam>
            <param name="listOfLists">This list of lists.</param>
            <param name="sequence">The sequence to look for.</param>
            <returns>True if contained, False if not contained.</returns>
        </member>
        <member name="M:LamestWebserver.Core.ExtentionMethods.SubsequenceContainsString(System.Collections.Generic.IEnumerable{System.String},System.String)">
            <summary>
            Checks whether a list of strings contains an entry, that contains the provided string.
            </summary>
            <param name="listOfStrings">This list of strings.</param>
            <param name="search">The string to look for.</param>
            <returns>True if contained, False if not contained.</returns>
        </member>
        <member name="M:LamestWebserver.Core.ExtentionMethods.SafeToString(System.Exception)">
            <summary>
            Gets an Exception Description (ToString) without risking running into exceptions on the way.
            </summary>
            <param name="e">the current Exception</param>
            <returns>The exception ToString, message or type depending on what is available.</returns>
        </member>
        <member name="M:LamestWebserver.Core.ExtentionMethods.SafeMessage(System.Exception)">
            <summary>
            Gets an Exception Message without risking running into exceptions on the way.
            </summary>
            <param name="e">the current Exception</param>
            <returns>The exception message or type depending on what is available.</returns>
        </member>
        <member name="M:LamestWebserver.Core.ExtentionMethods.GetRelativeLink(System.String,System.String)">
            <summary>
            Returns the full URL of a Relative URL and Original URL.
            </summary>
            <param name="relativeUrl">this relative URL.</param>
            <param name="url">The current original page URL.</param>
            <returns>Returns the full URL of the relative Page.</returns>
        </member>
        <member name="T:LamestWebserver.Core.Graphics.Thumbnail">
            <summary>
            A Thumbnail image.
            </summary>
        </member>
        <member name="F:LamestWebserver.Core.Graphics.Thumbnail.Image">
            <summary>
            The Thumbnail image as Bitmap.
            </summary>
        </member>
        <member name="M:LamestWebserver.Core.Graphics.Thumbnail.#ctor(System.Drawing.Image,System.Int32,System.Int32)">
            <summary>
            Creates a new Thumbnail from an Image.
            </summary>
            <param name="image">The image to create a thumbnail of.</param>
            <param name="maxWidth">The maximum width in pixels of the thumbnail.</param>
            <param name="maxHeight">The maximum height in pixels of the thumbnail.</param>
        </member>
        <member name="M:LamestWebserver.Core.Graphics.Thumbnail.#ctor(System.String,System.Int32,System.Int32)">
            <summary>
            Creates a new Thumbnail from a File.
            </summary>
            <param name="path">The Path of the File.</param>
            <param name="maxWidth">The maximum width in pixels of the thumbnail.</param>
            <param name="maxHeight">The maximum height in pixels of the thumbnail.</param>
        </member>
        <member name="M:LamestWebserver.Core.Graphics.Thumbnail.#ctor(System.IO.Stream,System.Int32,System.Int32)">
            <summary>
            Creates a new Thumbnail from a Stream.
            </summary>
            <param name="stream">The stream to load the file from.</param>
            <param name="maxWidth">The maximum width in pixels of the thumbnail.</param>
            <param name="maxHeight">The maximum height in pixels of the thumbnail.</param>
        </member>
        <member name="M:LamestWebserver.Core.Graphics.Thumbnail.Save(System.String)">
            <summary>
            Saves the Thumbnail image to a File.
            </summary>
            <param name="path">The path of the file.</param>
        </member>
        <member name="M:LamestWebserver.Core.Graphics.Thumbnail.Save(System.IO.Stream)">
            <summary>
            Writes the Thumbnail to a Stream.
            </summary>
            <param name="stream">The stream to write to.</param>
        </member>
        <member name="T:LamestWebserver.Core.Hash">
            <summary>
            Provides functionality to generate random hashes and IDs.
            </summary>
        </member>
        <member name="M:LamestWebserver.Core.Hash.GetHash">
            <summary>
            Generates and retrieves a 128 bit AES hash as Hex-String.
            </summary>
            <returns>The hash.</returns>
        </member>
        <member name="M:LamestWebserver.Core.Hash.GetHashBytes">
            <summary>
            Generates and retrieves a 128 bit AES hash.
            </summary>
            <returns>The hash.</returns>
        </member>
        <member name="M:LamestWebserver.Core.Hash.GetComplexHash(System.String)">
            <summary>
            Generates a SHA3 512 bit Hash of the given input as Hex-String
            </summary>
            <param name="input">the text to hash</param>
            <returns>the hash as base64 string</returns>
        </member>
        <member name="M:LamestWebserver.Core.Hash.GetComplexHash(System.Byte[])">
            <summary>
            Generates a SHA3 512 bit Hash of the given input
            </summary>
            <param name="input">the byte[] to hash</param>
            <returns>the hash as byte[]</returns>
        </member>
        <member name="M:LamestWebserver.Core.Hash.GetComplexHash">
            <summary>
            Generates a SHA3 512bit hash of random data.
            </summary>
            <returns>the hash as base64 string</returns>
        </member>
        <member name="M:LamestWebserver.Core.Hash.GetComplexHashBytes">
            <summary>
            Generates a SHA3 512bit hash of random data.
            </summary>
            <returns>the hash as byte[]</returns>
        </member>
        <member name="T:LamestWebserver.Core.ID">
            <summary>
            Provides functionailty for identifying objects.
            </summary>
        </member>
        <member name="F:LamestWebserver.Core.ID._id">
            <summary>
            The internal ID.
            </summary>
        </member>
        <member name="F:LamestWebserver.Core.ID._string_id">
            <summary>
            The precalculated ID as string.
            </summary>
        </member>
        <member name="M:LamestWebserver.Core.ID.#ctor">
            <summary>
            Constructs a new ID with random value.
            </summary>
        </member>
        <member name="M:LamestWebserver.Core.ID.#ctor(System.String)">
            <summary>
            Constructs a new ID with the given value.
            </summary>
            <param name="id">the internal ID to use.</param>
        </member>
        <member name="M:LamestWebserver.Core.ID.#ctor(System.Byte[])">
            <summary>
            Constructs a new ID with the given value.
            </summary>
            <param name="id">the internal ID to use.</param>
        </member>
        <member name="M:LamestWebserver.Core.ID.#ctor(System.UInt64[])">
            <summary>
            Constructs a new ID with the given value.
            </summary>
            <param name="id">the internal ID to use.</param>
        </member>
        <member name="P:LamestWebserver.Core.ID.Value">
            <summary>
            The inner Value of the ID as string.
            </summary>
        </member>
        <member name="M:LamestWebserver.Core.ID.RegenerateHash">
            <summary>
            Regenerates the internal value to a random new value.
            </summary>
        </member>
        <member name="M:LamestWebserver.Core.ID.GetByteArray">
            <summary>
            Retrieves the internal Value as byte[].
            </summary>
            <returns>Returns the internal Value as byte[].</returns>
        </member>
        <member name="M:LamestWebserver.Core.ID.GetUlongArray">
            <summary>
            Retrieves the internal Value as ulong[].
            </summary>
            <returns>Returns the internal Value as ulong[].</returns>
        </member>
        <member name="M:LamestWebserver.Core.ID.ConvertFromString(System.String)">
            <summary>
            Converts a given ID from string to ulong[].
            </summary>
            <param name="id">the ID as string.</param>
            <returns>the ID as ulong[].</returns>
        </member>
        <member name="M:LamestWebserver.Core.ID.ConvertFromByteArray(System.Byte[])">
            <summary>
            Converts a given ID from byte[] to ulong[].
            </summary>
            <param name="id">the ID as byte[].</param>
            <returns>the ID as ulong[].</returns>
        </member>
        <member name="M:LamestWebserver.Core.ID.ConvertFromUlongArray(System.UInt64[])">
            <summary>
            Converts a given ID from ulong[] to string.
            </summary>
            <param name="id">the ID as ulong[].</param>
            <returns>the ID as string.</returns>
        </member>
        <member name="M:LamestWebserver.Core.ID.ToHexString">
            <summary>
            Returns the inner Value as Hexadecimal String.
            <para />
            .ToString() might return Base64 strings - this method will always return in hexadecimal format because it is not virtual.
            </summary>
            <returns>The inner Value as Hexadecimal String.</returns>
        </member>
        <member name="M:LamestWebserver.Core.ID.CompareTo(LamestWebserver.Core.ID)">
            <inheritdoc />
        </member>
        <member name="M:LamestWebserver.Core.ID.Equals(LamestWebserver.Core.ID)">
            <inheritdoc />
        </member>
        <member name="M:LamestWebserver.Core.ID.Equals(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:LamestWebserver.Core.ID.GetHashCode">
            <inheritdoc />
        </member>
        <member name="M:LamestWebserver.Core.ID.ToString">
            <inheritdoc />
        </member>
        <member name="M:LamestWebserver.Core.ID.CompareTo(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:LamestWebserver.Core.ID.op_LessThan(LamestWebserver.Core.ID,LamestWebserver.Core.ID)">
            <summary>
            Compares two IDs.
            </summary>
            <param name="a">the first ID.</param>
            <param name="b">the second ID.</param>
            <returns>true if the comparison retrieves true.</returns>
        </member>
        <member name="M:LamestWebserver.Core.ID.op_GreaterThan(LamestWebserver.Core.ID,LamestWebserver.Core.ID)">
            <summary>
            Compares two IDs.
            </summary>
            <param name="a">the first ID.</param>
            <param name="b">the second ID.</param>
            <returns>true if the comparison retrieves true.</returns>
        </member>
        <member name="M:LamestWebserver.Core.ID.op_Equality(LamestWebserver.Core.ID,LamestWebserver.Core.ID)">
            <summary>
            Compares two IDs.
            </summary>
            <param name="a">the first ID.</param>
            <param name="b">the second ID.</param>
            <returns>true if the comparison retrieves true.</returns>
        </member>
        <member name="M:LamestWebserver.Core.ID.op_Inequality(LamestWebserver.Core.ID,LamestWebserver.Core.ID)">
            <summary>
            Compares two IDs.
            </summary>
            <param name="a">the first ID.</param>
            <param name="b">the second ID.</param>
            <returns>true if the comparison retrieves true.</returns>
        </member>
        <member name="T:LamestWebserver.Core.LongID">
            <summary>
            A derivate of ID using a longer SHA3 hash by default.
            </summary>
        </member>
        <member name="M:LamestWebserver.Core.LongID.#ctor">
            <summary>
            Initializes a new LongID with a random SHA3 hash.
            </summary>
        </member>
        <member name="M:LamestWebserver.Core.LongID.#ctor(System.String)">
            <summary>
            
            </summary>
            <param name="id"></param>
        </member>
        <member name="M:LamestWebserver.Core.LongID.#ctor(System.Byte[])">
            <inheritdoc />
        </member>
        <member name="M:LamestWebserver.Core.LongID.#ctor(System.UInt64[])">
            <inheritdoc />
        </member>
        <member name="P:LamestWebserver.Core.LongID.Value">
            <inheritdoc />
        </member>
        <member name="M:LamestWebserver.Core.LongID.RegenerateHash">
            <inheritdoc />
        </member>
        <member name="M:LamestWebserver.Core.LongID.ConvertFromString(System.String)">
            <inheritdoc />
        </member>
        <member name="M:LamestWebserver.Core.LongID.ConvertFromUlongArray(System.UInt64[])">
            <inheritdoc />
        </member>
        <member name="T:LamestWebserver.Core.Logger">
            <summary>
            A simple Logger for LamestWebserver.
            </summary>
        </member>
        <member name="F:LamestWebserver.Core.Logger.CurrentLogger">
            <summary>
            The Main Logger for LamestWebserver.
            </summary>
        </member>
        <member name="F:LamestWebserver.Core.Logger.LoggerDebugMode">
            <summary>
            Is LamestWebserverRunning in Debug Mode.
            </summary>
        </member>
        <member name="F:LamestWebserver.Core.Logger.DefaultMinimumLoggingLevel">
            <summary>
            The default minimum logging level. (should probably be ELoggingLevel.Warning by default)
            </summary>
        </member>
        <member name="F:LamestWebserver.Core.Logger.MinimumLoggingLevel">
            <summary>
            The minimum logging level for this logger.
            </summary>
        </member>
        <member name="F:LamestWebserver.Core.Logger._currentOutputSource">
            <summary>
            Currently used output source
            </summary>
        </member>
        <member name="P:LamestWebserver.Core.Logger.OutputSourceFlags">
            <summary>
            The Flags representing the Output Source(s) to write to.
            </summary>
        </member>
        <member name="P:LamestWebserver.Core.Logger.OutputSource">
            <summary>
            The Output Source(s) the main Logger instance writes to.
            </summary>
        </member>
        <member name="F:LamestWebserver.Core.Logger._multiStreamWriter">
            <summary>
            Stream Writer to handle the writing from multiple streams
            </summary>
        </member>
        <member name="F:LamestWebserver.Core.Logger._currentFilePath">
            <summary>
            The currently used File Path that the logger writes to.
            </summary>
        </member>
        <member name="P:LamestWebserver.Core.Logger.FilePath">
            <summary>
            Path for the File the logger writes to (if OutputSourceFlags contains EOutputSource.File)
            </summary>
        </member>
        <member name="P:LamestWebserver.Core.Logger.IsOpen">
            <summary>
            If manually closed or opened check this value
            </summary>
        </member>
        <member name="M:LamestWebserver.Core.Logger.LogTrace(System.String,System.Diagnostics.Stopwatch)">
            <summary>
            Logging a message on logging level 'Trace'.
            </summary>
            <param name="msg">The message to log.</param>
            <param name="stopwatch">A stopwatch carrying the elapsed time.</param>
        </member>
        <member name="M:LamestWebserver.Core.Logger.Trace(System.String,System.Diagnostics.Stopwatch)">
            <summary>
            Logging a message on logging level 'Trace'.
            </summary>
            <param name="msg">The message to log.</param>
            <param name="stopwatch">A stopwatch carrying the elapsed time.</param>
        </member>
        <member name="M:LamestWebserver.Core.Logger.LogInformation(System.String,System.Diagnostics.Stopwatch)">
            <summary>
            Logging a message on logging level 'Information'.
            </summary>
            <param name="msg">The message to log.</param>
            <param name="stopwatch">A stopwatch carrying the elapsed time.</param>
        </member>
        <member name="M:LamestWebserver.Core.Logger.Information(System.String,System.Diagnostics.Stopwatch)">
            <summary>
            Logging a message on logging level 'Information'.
            </summary>
            <param name="msg">The message to log.</param>
            <param name="stopwatch">A stopwatch carrying the elapsed time.</param>
        </member>
        <member name="M:LamestWebserver.Core.Logger.LogWarning(System.String,System.Diagnostics.Stopwatch)">
            <summary>
            Logging a message on logging level 'Warning'.
            </summary>
            <param name="msg">The message to log.</param>
            <param name="stopwatch">A stopwatch carrying the elapsed time.</param>
        </member>
        <member name="M:LamestWebserver.Core.Logger.Warning(System.String,System.Diagnostics.Stopwatch)">
            <summary>
            Logging a message on logging level 'Warning'.
            </summary>
            <param name="msg">The message to log.</param>
            <param name="stopwatch">A stopwatch carrying the elapsed time.</param>
        </member>
        <member name="M:LamestWebserver.Core.Logger.LogError(System.String,System.Diagnostics.Stopwatch)">
            <summary>
            Logging a message on logging level 'Error'.
            </summary>
            <param name="msg">The message to log.</param>
            <param name="stopwatch">A stopwatch carrying the elapsed time.</param>
        </member>
        <member name="M:LamestWebserver.Core.Logger.Error(System.String,System.Diagnostics.Stopwatch)">
            <summary>
            Logging a message on logging level 'Error'.
            </summary>
            <param name="msg">The message to log.</param>
            <param name="stopwatch">A stopwatch carrying the elapsed time.</param>
        </member>
        <member name="M:LamestWebserver.Core.Logger.LogDebugExcept(System.Exception,System.Diagnostics.Stopwatch)">
            <summary>
            Logging a message on logging level 'DebugExcept'. The Exception will be thrown if Logger.LoggerDebugMode is true.
            </summary>
            <param name="exception">The exception, of which the message will be logged.</param>
            <param name="stopwatch">A stopwatch carrying the elapsed time.</param>
        </member>
        <member name="M:LamestWebserver.Core.Logger.DebugExcept(System.Exception,System.Diagnostics.Stopwatch)">
            <summary>
            Logging a message on logging level 'DebugExcept'. The Exception will be thrown if Logger.LoggerDebugMode is true.
            </summary>
            <param name="exception">The exception, of which the message will be logged.</param>
            <param name="stopwatch">A stopwatch carrying the elapsed time.</param>
        </member>
        <member name="M:LamestWebserver.Core.Logger.LogDebugExcept(System.String,System.Exception,System.Diagnostics.Stopwatch)">
            <summary>
            Logging a message on logging level 'DebugExcept'. The Exception will be thrown if Logger.LoggerDebugMode is true.
            </summary>
            <param name="message">The message to log.</param>
            <param name="exception">The exception to throw.</param>
            <param name="stopwatch">A stopwatch carrying the elapsed time.</param>
        </member>
        <member name="M:LamestWebserver.Core.Logger.DebugExcept(System.String,System.Exception,System.Diagnostics.Stopwatch)">
            <summary>
            Logging a message on logging level 'DebugExcept'. The Exception will be thrown if Logger.LoggerDebugMode is true.
            </summary>
            <param name="message">The message to log.</param>
            <param name="exception">The exception to throw.</param>
            <param name="stopwatch">A stopwatch carrying the elapsed time.</param>
        </member>
        <member name="M:LamestWebserver.Core.Logger.LogDebugExcept(System.String,System.Diagnostics.Stopwatch)">
            <summary>
            Logging a message on logging level 'DebugExcept'. An Exception will be thrown if Logger.LoggerDebugMode is true.
            </summary>
            <param name="msg">The message to log.</param>
            <param name="stopwatch">A stopwatch carrying the elapsed time.</param>
        </member>
        <member name="M:LamestWebserver.Core.Logger.DebugExcept(System.String,System.Diagnostics.Stopwatch)">
            <summary>
            Logging a message on logging level 'DebugExcept'. The Exception will be thrown if Logger.LoggerDebugMode is true.
            </summary>
            <param name="msg">The message to log.</param>
            <param name="stopwatch">A stopwatch carrying the elapsed time.</param>
        </member>
        <member name="M:LamestWebserver.Core.Logger.LogExcept(System.Exception,System.Diagnostics.Stopwatch)">
            <summary>
            Logging a message on logging level 'Except'. The Exception will be thrown.
            </summary>
            <param name="exception">The exception, of which the message will be logged.</param>
            <param name="stopwatch">A stopwatch carrying the elapsed time.</param>
        </member>
        <member name="M:LamestWebserver.Core.Logger.Except(System.Exception,System.Diagnostics.Stopwatch)">
            <summary>
            Logging a message on logging level 'Except'. The Exception will be thrown.
            </summary>
            <param name="exception">The exception, of which the message will be logged.</param>
            <param name="stopwatch">A stopwatch carrying the elapsed time.</param>
        </member>
        <member name="M:LamestWebserver.Core.Logger.LogExcept(System.String,System.Exception,System.Diagnostics.Stopwatch)">
            <summary>
            Logging a message on logging level 'Except'. The Exception will be thrown.
            </summary>
            <param name="message">The message to log.</param>
            <param name="exception">The exception to throw.</param>
            <param name="stopwatch">A stopwatch carrying the elapsed time.</param>
        </member>
        <member name="M:LamestWebserver.Core.Logger.Except(System.String,System.Exception,System.Diagnostics.Stopwatch)">
            <summary>
            Logging a message on logging level 'Except'. The Exception will be thrown.
            </summary>
            <param name="message">The message to log.</param>
            <param name="exception">The exception to throw.</param>
            <param name="stopwatch">A stopwatch carrying the elapsed time.</param>
        </member>
        <member name="M:LamestWebserver.Core.Logger.LogExcept(System.String,System.Diagnostics.Stopwatch)">
            <summary>
            Logging a message on logging level 'Except'.  An exception will be thrown.
            </summary>
            <param name="msg">The message to log.</param>
            <param name="stopwatch">A stopwatch carrying the elapsed time.</param>
        </member>
        <member name="M:LamestWebserver.Core.Logger.Except(System.String,System.Diagnostics.Stopwatch)">
            <summary>
            Logging a message on logging level 'Except'. The Exception will be thrown.
            </summary>
            <param name="msg">The message to log.</param>
            <param name="stopwatch">A stopwatch carrying the elapsed time.</param>
        </member>
        <member name="M:LamestWebserver.Core.Logger.LogCrashAndBurn(System.String,System.Diagnostics.Stopwatch)">
            <summary>
            Logging a message on logging level 'CrashAndBurn'. The logger will be closed, a dump file will be written and the application will be exited with error code -1.
            </summary>
            <param name="msg">The message to log.</param>
            <param name="stopwatch">A stopwatch carrying the elapsed time.</param>
        </member>
        <member name="M:LamestWebserver.Core.Logger.CrashAndBurn(System.String,System.Diagnostics.Stopwatch)">
            <summary>
            Logging a message on logging level 'CrashAndBurn'. The logger will be closed, a dump file will be written and the application will be exited with error code -1.
            </summary>
            <param name="msg">The message to log.</param>
            <param name="stopwatch">A stopwatch carrying the elapsed time.</param>
        </member>
        <member name="M:LamestWebserver.Core.Logger.AddCustomStream(System.IO.Stream)">
            <summary>
            Add some Custom Streams.
            Call RestartStream to let the changes take action.
            </summary>
            <param name="stream"></param>
        </member>
        <member name="M:LamestWebserver.Core.Logger.RemoveCustomStream(System.IO.Stream)">
            <summary>
            Remove some Custom Streams.
            Call RestartStream to let the changes take action.
            </summary>
            <param name="stream"></param>
            <returns></returns>
        </member>
        <member name="M:LamestWebserver.Core.Logger.ClearCustomStreams">
            <summary>
            Clear all Custom Streams.
            Call RestartStream to let the changes take action.
            </summary>
        </member>
        <member name="M:LamestWebserver.Core.Logger.Close">
            <summary>
            Closes and Flushes the Logger stream.
            If you want to restart the stream manually use 'Restart'.
            </summary>
        </member>
        <member name="M:LamestWebserver.Core.Logger.Open">
            <summary>
            Opens and initializes the steam to write to.
            If you want to restart the stream manually use 'Restart'.
            </summary>
        </member>
        <member name="M:LamestWebserver.Core.Logger.Flush">
            <summary>
            Flushes all available Streams.
            </summary>
        </member>
        <member name="M:LamestWebserver.Core.Logger.RestartStream">
            <summary>
            Atomic operation to close and open the Logger save by a mutex.
            </summary>
        </member>
        <member name="M:LamestWebserver.Core.Logger.GetDebugResponseNode">
            <inheritdoc />
        </member>
        <member name="M:LamestWebserver.Core.Logger.#ctor">
            <summary>
            Creates a new Logger instance.
            </summary>
        </member>
        <member name="M:LamestWebserver.Core.Logger.Finalize">
            <summary>
            Destructor for the logger closes the stream.
            </summary>
        </member>
        <member name="T:LamestWebserver.Core.Logger.ELoggingLevel">
            <summary>
            Represents the different LoggingLevels.
            </summary>
        </member>
        <member name="F:LamestWebserver.Core.Logger.ELoggingLevel.CrashAndBurn">
            <summary>
            Quits the Application writing a CrashDump.
            </summary>
        </member>
        <member name="F:LamestWebserver.Core.Logger.ELoggingLevel.Except">
            <summary>
            Throws an Exception.
            </summary>
        </member>
        <member name="F:LamestWebserver.Core.Logger.ELoggingLevel.DebugExcept">
            <summary>
            Throws an Exception if Logger.LoggerDebugMode is true.
            </summary>
        </member>
        <member name="F:LamestWebserver.Core.Logger.ELoggingLevel.Error">
            <summary>
            A major Error.
            </summary>
        </member>
        <member name="F:LamestWebserver.Core.Logger.ELoggingLevel.Warning">
            <summary>
            A warning message.
            </summary>
        </member>
        <member name="F:LamestWebserver.Core.Logger.ELoggingLevel.Information">
            <summary>
            General Information.
            </summary>
        </member>
        <member name="F:LamestWebserver.Core.Logger.ELoggingLevel.Trace">
            <summary>
            Debugging Information.
            </summary>
        </member>
        <member name="T:LamestWebserver.Core.Logger.EOutputSource">
            <summary>
            Flags for output Sources
            </summary>
        </member>
        <member name="F:LamestWebserver.Core.Logger.EOutputSource.None">
            <summary>
            No Logging output at all.
            </summary>
        </member>
        <member name="F:LamestWebserver.Core.Logger.EOutputSource.Console">
            <summary>
            Write To Console.
            </summary>
        </member>
        <member name="F:LamestWebserver.Core.Logger.EOutputSource.File">
            <summary>
            Write into File.
            </summary>
        </member>
        <member name="T:LamestWebserver.Core.Math">
            <summary>
            Contains essential mathematic extention methods.
            </summary>
        </member>
        <member name="M:LamestWebserver.Core.Math.Clamp``1(``0,``0,``0)">
            <summary>
            Clamps a variable or an object between min and max.
            </summary>
            <typeparam name="T">The type of the object.</typeparam>
            <param name="val">The value to clamp.</param>
            <param name="min">The minimum value.</param>
            <param name="max">The maximum value.</param>
            <returns>The clamped value.</returns>
        </member>
        <member name="T:LamestWebserver.Core.Memory.FlushableMemoryPool">
            <summary>
            Provides very fast Allocation for a flushable volatile memory pool.
            </summary>
        </member>
        <member name="F:LamestWebserver.Core.Memory.FlushableMemoryPool.MaximumThreads">
            <summary>
            When this amount of concurrent FlushableMemoryPools is exceeded raise an exception. (If it is negative or zero: never raise an exception)
            </summary>
        </member>
        <member name="F:LamestWebserver.Core.Memory.FlushableMemoryPool.ThreadID">
            <summary>
            Retrieves the ThreadID of this FlushableMemoryPool.
            </summary>
        </member>
        <member name="P:LamestWebserver.Core.Memory.FlushableMemoryPool.Size">
            <summary>
            Retrieves the allocated size of this FlushableMemoryPool.
            </summary>
        </member>
        <member name="P:LamestWebserver.Core.Memory.FlushableMemoryPool.AllocatedSize">
            <summary>
            Retrieves the allocated size of the FlushableMemoryPool of the current thread.
            </summary>
        </member>
        <member name="M:LamestWebserver.Core.Memory.FlushableMemoryPool.AquireOrFlush">
            <summary>
            Creates or Flushes the FlushableMemoryPool of the current thread.
            </summary>
        </member>
        <member name="M:LamestWebserver.Core.Memory.FlushableMemoryPool.Allocate``1(System.Int32)">
            <summary>
            Allocates a block of memory.
            </summary>
            <typeparam name="T">The type of the object(s) to allocate memory for.</typeparam>
            <param name="count">The number of object(s) to allocate memory for.</param>
            <returns>The address as IntPtr.</returns>
        </member>
        <member name="M:LamestWebserver.Core.Memory.FlushableMemoryPool.Destroy">
            <summary>
            Destroys the FlushableMemoryPool of the current thread.
            </summary>
        </member>
        <member name="M:LamestWebserver.Core.Memory.FlushableMemoryPool.#ctor(System.Int32)">
            <summary>
            Constructs a new FlushableMemoryPool.
            </summary>
        </member>
        <member name="M:LamestWebserver.Core.Memory.FlushableMemoryPool.Finalize">
            <summary>
            Destructs the current Flushable Memory Pool by calling Dispose();
            </summary>
        </member>
        <member name="M:LamestWebserver.Core.Memory.FlushableMemoryPool.AllocateMemory``1(System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:LamestWebserver.Core.Memory.FlushableMemoryPool.Free(System.IntPtr)">
            <inheritdoc />
        </member>
        <member name="M:LamestWebserver.Core.Memory.FlushableMemoryPool.Flush">
            <summary>
            Flushes the Memory and resets the position.
            </summary>
        </member>
        <member name="M:LamestWebserver.Core.Memory.FlushableMemoryPool.Dispose">
            <inheritdoc />
        </member>
        <member name="T:LamestWebserver.Core.Memory.IAllocator">
            <summary>
            A memory allocation and freeing interface.
            </summary>
        </member>
        <member name="M:LamestWebserver.Core.Memory.IAllocator.AllocateMemory``1(System.Int32)">
            <summary>
            Allocates a block of memory.
            </summary>
            <typeparam name="T">The type of the object(s) to allocate memory for.</typeparam>
            <param name="count">The number of object(s) to allocate memory for.</param>
            <returns>The address as IntPtr.</returns>
        </member>
        <member name="M:LamestWebserver.Core.Memory.IAllocator.Free(System.IntPtr)">
            <summary>
            Frees a given IntPtr allocated with this Allocator.
            </summary>
            <param name="pointer">The IntPtr to free.</param>
        </member>
        <member name="T:LamestWebserver.Core.MiniDump">
            <summary>
            Contains functionality to write Windows Mini DumpFiles from the current process.
            
            Source: https://blogs.msdn.microsoft.com/dondu/2010/10/24/writing-minidumps-in-c/ , http://blog.kalmbach-software.de/2008/12/13/writing-minidumps-in-c/
            </summary>
        </member>
        <member name="T:LamestWebserver.Core.MiniDump.Option">
            <summary>
            Options for MiniDumps.
            From dbghelp.h
            </summary>
        </member>
        <member name="T:LamestWebserver.Core.MiniDump.ExceptionInfo">
            <summary>
            Exception Information for MiniDumps.
            </summary>
        </member>
        <member name="T:LamestWebserver.Core.MiniDump.MiniDumpExceptionInformation">
            <summary>
            MiniDump File Exception Information.
            <code>
            typedef struct _MINIDUMP_EXCEPTION_INFORMATION {
                DWORD ThreadId;
                PEXCEPTION_POINTERS ExceptionPointers;
                BOOL ClientPointers;
            } MINIDUMP_EXCEPTION_INFORMATION, *PMINIDUMP_EXCEPTION_INFORMATION;</code>
            </summary>
        </member>
        <member name="M:LamestWebserver.Core.MiniDump.MiniDumpWriteDump(System.IntPtr,System.UInt32,System.Runtime.InteropServices.SafeHandle,System.UInt32,LamestWebserver.Core.MiniDump.MiniDumpExceptionInformation@,System.IntPtr,System.IntPtr)">
            <summary>
            Overload requiring MiniDumpExceptionInformation
            <code>
            BOOL
            WINAPI
            MiniDumpWriteDump(
                __in HANDLE hProcess,
                __in DWORD ProcessId,
                __in HANDLE hFile,
                __in MINIDUMP_TYPE DumpType,
                __in_opt PMINIDUMP_EXCEPTION_INFORMATION ExceptionParam,
                __in_opt PMINIDUMP_USER_STREAM_INFORMATION UserStreamParam,
                __in_opt PMINIDUMP_CALLBACK_INFORMATION CallbackParam
                );
            </code>
            </summary>
        </member>
        <member name="M:LamestWebserver.Core.MiniDump.MiniDumpWriteDump(System.IntPtr,System.UInt32,System.Runtime.InteropServices.SafeHandle,System.UInt32,System.IntPtr,System.IntPtr,System.IntPtr)">
            <summary>
            Overload supporting MiniDumpExceptionInformation == NULL
            </summary>
        </member>
        <member name="M:LamestWebserver.Core.MiniDump.GetCurrentThreadId">
            <summary>
            Retrieves the current ThreadID.
            </summary>
            <returns>Returns the current ThreadID.</returns>
        </member>
        <member name="M:LamestWebserver.Core.MiniDump.Write(System.Runtime.InteropServices.SafeHandle,LamestWebserver.Core.MiniDump.Option,LamestWebserver.Core.MiniDump.ExceptionInfo)">
            <summary>
            Writes current state to MiniDump.
            </summary>
            <param name="fileHandle">The file handle of the dump file to write.</param>
            <param name="dumpType">MiniDump type.</param>
            <param name="exceptionInfo">Exception info options.</param>
            <returns>returns true if successfull.</returns>
        </member>
        <member name="M:LamestWebserver.Core.MiniDump.Write(System.Runtime.InteropServices.SafeHandle,LamestWebserver.Core.MiniDump.Option)">
            <summary>
            Writes current state to MiniDump.
            </summary>
            <param name="fileHandle">The file handle of the dump file to write.</param>
            <param name="dumpType">MiniDump type.</param>
            <returns>returns true if successfull.</returns>
        </member>
        <member name="M:LamestWebserver.Core.MiniDump.Write(System.String,LamestWebserver.Core.MiniDump.Option)">
            <summary>
            Writes current state to MiniDump.
            </summary>
            <param name="filename">the name of the file to write to. (usually *.mdmp)</param>
            <param name="dumpType">MiniDump type.</param>
            <returns>returns true if successfull.</returns>
        </member>
        <member name="M:LamestWebserver.Core.MiniDump.Write(LamestWebserver.Core.MiniDump.Option)">
            <summary>
            Writes current state to MiniDump.
            </summary>
            <param name="dumpType">MiniDump type.</param>
            <returns>returns true if successfull.</returns>
        </member>
        <member name="T:LamestWebserver.Core.MultiStreamWriter">
            <summary>
            Stream Writer who can writer multiple streams.
            </summary>
        </member>
        <member name="F:LamestWebserver.Core.MultiStreamWriter.IsDisposed">
            <summary>
            Singals if the MultiStreamwriter is already disposed
            </summary>
        </member>
        <member name="M:LamestWebserver.Core.MultiStreamWriter.#ctor(System.Collections.Generic.IEnumerable{System.IO.Stream})">
            <summary>
            Creates a MultiStreamWriter.
            </summary>
            <param name="streams"></param>
        </member>
        <member name="M:LamestWebserver.Core.MultiStreamWriter.#ctor(System.IO.Stream[])">
            <summary>
            Creates a MultiStreamWriter.
            </summary>
            <param name="streams"></param>
        </member>
        <member name="M:LamestWebserver.Core.MultiStreamWriter.Write(System.String)">
            <summary>
            Write to all streams.
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:LamestWebserver.Core.MultiStreamWriter.WriteLine(System.String)">
            <summary>
            Write a Line to all streams
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:LamestWebserver.Core.MultiStreamWriter.Flush">
            <summary>
            Flush all streams.
            </summary>
        </member>
        <member name="M:LamestWebserver.Core.MultiStreamWriter.Close">
            <summary>
            Close all streams.
            </summary>
        </member>
        <member name="M:LamestWebserver.Core.MultiStreamWriter.Dispose">
            <inheritdoc />
        </member>
        <member name="M:LamestWebserver.Core.MultiStreamWriter.DisposeExcept(System.Collections.Generic.IEnumerable{System.IO.Stream})">
            <summary>
            Disposes all streams except the ones listed in the parameter.
            </summary>
            <param name="streams">The Streams not to dispose.</param>
        </member>
        <member name="M:LamestWebserver.Core.MultiStreamWriter.Finalize">
            <summary>
            De-constructor flush and closes all streams.
            </summary>
        </member>
        <member name="T:LamestWebserver.Core.NullCheckable">
            <summary>
            The abstract NullCheckable class provides functionality for checking for null like in c/c++.
            </summary>
        </member>
        <member name="M:LamestWebserver.Core.NullCheckable.op_Implicit(LamestWebserver.Core.NullCheckable)~System.Boolean">
            <summary>
            Returns false if the object is null.
            </summary>
            <param name="obj">the object</param>
        </member>
        <member name="M:LamestWebserver.Core.NullCheckable.op_LogicalNot(LamestWebserver.Core.NullCheckable)">
            <summary>
            Returns true if the object is null.
            </summary>
            <param name="obj">the object</param>
        </member>
        <member name="T:LamestWebserver.Core.Parsing.ParsingStringExtentions">
            <summary>
            Provides Extention Methods for string operations.
            </summary>
        </member>
        <member name="M:LamestWebserver.Core.Parsing.ParsingStringExtentions.FindBetween(System.String,System.String,System.String)">
            <summary>
            Returns the string between two substrings of this string.
            </summary>
            <param name="s">this string.</param>
            <param name="before">the string before the requested string.</param>
            <param name="after">the string after the requested string.</param>
            <returns>the string inbetween or null.</returns>
        </member>
        <member name="M:LamestWebserver.Core.Parsing.ParsingStringExtentions.FindString(System.String,System.String,System.Int32@)">
            <summary>
            Searches for a Substring and returns it's start index.
            </summary>
            <param name="s">this string.</param>
            <param name="find">the substring to find.</param>
            <param name="index">the index where the substring begins.</param>
            <returns>returns true if the string could be found. otherwise false.</returns>
        </member>
        <member name="M:LamestWebserver.Core.Parsing.ParsingStringExtentions.GetKMP(System.String)">
            <summary>
            Returns the indexes of the Knuth–Morris–Pratt algorithm of a given string.
            </summary>
            <param name="s">this string.</param>
            <returns>the Knuth–Morris–Pratt algorithm indexes.</returns>
        </member>
        <member name="M:LamestWebserver.Core.Parsing.ParsingStringExtentions.Parse(System.String,System.String[])">
            <summary>
            Parses a string like Split(...) but keeps the splitting strings as separate entries.
            </summary>
            <param name="s">this string.</param>
            <param name="delimiters">the delimiters to split at.</param>
            <returns>A list of the splitted string parts without empty entries.</returns>
        </member>
        <member name="M:LamestWebserver.Core.Parsing.ParsingStringExtentions.Parse(System.String,System.Boolean,System.String[])">
            <summary>
            Parses a string like Split(...) but keeps the splitting strings as separate entries.
            </summary>
            <param name="s">this string.</param>
            <param name="removeEmptyEntries">shall empty strings be removed from the returned list?</param>
            <param name="delimiters">the delimiters to split at.</param>
            <returns>A list of the splitted string parts.</returns>
        </member>
        <member name="T:LamestWebserver.Core.Singleton`1">
            <summary>
            Provides a threadsafe, auto-initializing Singleton for a given type.
            </summary>
            <typeparam name="T">The type of the singleton.</typeparam>
        </member>
        <member name="P:LamestWebserver.Core.Singleton`1.Instance">
            <summary>
            The Instance of the Singleton. The instance is automatically initalized when you first read from it.
            </summary>
        </member>
        <member name="M:LamestWebserver.Core.Singleton`1.#ctor(System.Func{`0},System.Boolean)">
            <summary>
            Creates a new Singleton.
            </summary>
            <param name="getInstanceFunction">A function to create an instance of the given type. If null will be set to default constructor of this type.</param>
            <param name="initializeDirectly">Shall the Singleton be directly initialized upfront?</param>
            <exception cref="T:System.MissingMethodException">Throws a MissingMethodException when no getInstanceFunction is given and the type does not contain a default constructor and is no ValueType.</exception>
        </member>
        <member name="M:LamestWebserver.Core.Singleton`1.op_Implicit(LamestWebserver.Core.Singleton{`0})~`0">
            <summary>
            Retrieves the Instance of the singleton.
            </summary>
            <param name="singleton">The current singleton.</param>
            <returns>Returns the Instance of the singleton.</returns>
        </member>
        <member name="M:LamestWebserver.Core.Singleton`1.GetInstance">
            <summary>
            Retrieves the Instance of the singleton.
            </summary>
            <returns>Returns the Instance of the singleton.</returns>
        </member>
        <member name="M:LamestWebserver.Core.Singleton`1.Equals(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:LamestWebserver.Core.Singleton`1.ToString">
            <inheritdoc />
        </member>
        <member name="T:LamestWebserver.Core.Web.WebCrawler">
            <summary>
            Provides an automated easy-to-use WebCrawler.
            </summary>
        </member>
        <member name="F:LamestWebserver.Core.Web.WebCrawler.StartURL">
            <summary>
            The URL to begin with.
            </summary>
        </member>
        <member name="F:LamestWebserver.Core.Web.WebCrawler.Prefixes">
            <summary>
            The Prefixes of the valid URLs to Crawl into.
            </summary>
        </member>
        <member name="F:LamestWebserver.Core.Web.WebCrawler.OnNewPage">
            <summary>
            The delegate to execute whenever a new match was found.
            </summary>
        </member>
        <member name="F:LamestWebserver.Core.Web.WebCrawler.OnError">
            <summary>
            The delegate to execute whenever a response is invalid.
            </summary>
        </member>
        <member name="F:LamestWebserver.Core.Web.WebCrawler.CallSynchrously">
            <summary>
            Specifies whether the OnNewPage and OnError functions shall be called synchronously or in parallel.
            </summary>
        </member>
        <member name="F:LamestWebserver.Core.Web.WebCrawler.IsDone">
            <summary>
            Has the WebCrawler processed every possible page?
            </summary>
        </member>
        <member name="F:LamestWebserver.Core.Web.WebCrawler.KeepLastEntry">
            <summary>
            If false: the last visited page before OnNewPage returns false is removed from VisitedPages. 
            This might be handy if the bot detection of a webpage is messing you up and you want to continue where you _successfully_ left of.
            </summary>
        </member>
        <member name="P:LamestWebserver.Core.Web.WebCrawler.WebRequestFactory">
            <summary>
            The internal WebRequestFactory.
            </summary>
        </member>
        <member name="M:LamestWebserver.Core.Web.WebCrawler.#ctor(System.String,System.String[],System.Func{System.String,LamestWebserver.Core.Web.WebCrawler,System.Boolean},System.Func{System.Exception,System.Boolean},LamestWebserver.Core.Web.WebRequestFactory,System.Int32)">
            <summary>
            Constructs a new WebCrawler instance. Doesn't start it yet.
            </summary>
            <param name="startURL">The URL to begin crawling at.</param>
            <param name="prefixes">The valid prefixes of an URL to load (usually the page domain that you want to crawl through). ALL pages are valid if null.</param>
            <param name="onNewPage">The function to execute whenever a valid page is found.</param>
            <param name="onError">The function to execute whenever the response is invalid.</param>
            <param name="webRequestFactory">A WebRequestFactory to construct the Requests with.</param>
            <param name="threadCount">The number of worker-threads to use.</param>
        </member>
        <member name="M:LamestWebserver.Core.Web.WebCrawler.#ctor(System.String,System.String,System.Func{System.String,LamestWebserver.Core.Web.WebCrawler,System.Boolean},System.Func{System.Exception,System.Boolean},LamestWebserver.Core.Web.WebRequestFactory,System.Int32)">
            <summary>
            Constructs a new WebCrawler instance. Doesn't start it yet.
            </summary>
            <param name="startURL">The URL to begin crawling at.</param>
            <param name="prefix">The valid prefix of an URL to load (usually the page domain that you want to crawl through).</param>
            <param name="onNewPage">The function to execute whenever a valid page is found. Returns if the links inside this page should be visited.</param>
            <param name="onError">The function to execute whenever the response is invalid. Returns if the WebCrawler should continue running.</param>
            <param name="webRequestFactory">A WebRequestFactory to construct the Requests with.</param>
            <param name="threadCount">The number of worker-threads to use.</param>
        </member>
        <member name="M:LamestWebserver.Core.Web.WebCrawler.LoadState(System.String)">
            <summary>
            Loads a previous state of the crawler. (does not load the webRequestFactory caches)
            </summary>
            <param name="fileName">The filename of the saved state.</param>
        </member>
        <member name="M:LamestWebserver.Core.Web.WebCrawler.SaveState(System.String)">
            <summary>
            Saves the current state of the crawler. (does not save the webRequestFactory caches)
            </summary>
            <param name="fileName">The filename for the saved state.</param>
        </member>
        <member name="M:LamestWebserver.Core.Web.WebCrawler.Stop">
            <summary>
            Stops the crawler.
            </summary>
        </member>
        <member name="M:LamestWebserver.Core.Web.WebCrawler.Start">
            <summary>
            Starts the WebCrawler.
            </summary>
            <returns>Returns the current WebCrawler so that you can type 'var crawler = new WebCrawler(...).Start();'.</returns>
        </member>
        <member name="T:LamestWebserver.Core.Web.WebCrawler.WebCrawlerState">
            <summary>
            This is just public to be serializable.
            </summary>
        </member>
        <member name="F:LamestWebserver.Core.Web.WebCrawler.WebCrawlerState.VisitedPages">
            <summary>
            The visited pages so far.
            </summary>
        </member>
        <member name="F:LamestWebserver.Core.Web.WebCrawler.WebCrawlerState.ToGo">
            <summary>
            The discovered Pages that haven't been visited.
            </summary>
        </member>
        <member name="M:LamestWebserver.Core.Web.WebCrawler.WebCrawlerState.#ctor">
            <summary>
            Constructs a new WebCrawlerState object and initializes the internal collecions.
            </summary>
        </member>
        <member name="T:LamestWebserver.Core.Web.WebRequestFactory">
            <summary>
            Provivides functionality for quickly generating a lot of similar WebRequests.
            </summary>
        </member>
        <member name="F:LamestWebserver.Core.Web.WebRequestFactory.Responses">
            <summary>
            The cached Responses of recent Requests.
            </summary>
        </member>
        <member name="F:LamestWebserver.Core.Web.WebRequestFactory.Redirects">
            <summary>
            The cached Redirects of recent Redirects.
            </summary>
        </member>
        <member name="F:LamestWebserver.Core.Web.WebRequestFactory.Cookies">
            <summary>
            The specified Cookies for the WebRequests.
            </summary>
        </member>
        <member name="F:LamestWebserver.Core.Web.WebRequestFactory.UserAgentString">
            <summary>
            The UserAgent string to send in every WebRequest.
            </summary>
        </member>
        <member name="F:LamestWebserver.Core.Web.WebRequestFactory.Timeout">
            <summary>
            The default Timeout in milliseconds for every request.
            </summary>
        </member>
        <member name="F:LamestWebserver.Core.Web.WebRequestFactory.MaximumRetries">
            <summary>
            The maximum number of Retries per Request on Timeout.
            </summary>
        </member>
        <member name="P:LamestWebserver.Core.Web.WebRequestFactory.RandomWaitTimeMs">
            <summary>
            The time to randomly wait after a completed request. (Item1 is MinimumTime, Item2 is MaximumTime)
            </summary>
        </member>
        <member name="M:LamestWebserver.Core.Web.WebRequestFactory.#ctor(System.Boolean)">
            <summary>
            Creates a new WebRequestFactory instance.
            </summary>
            <param name="cacheResponses">Shall responses and redirects be cached?</param>
        </member>
        <member name="M:LamestWebserver.Core.Web.WebRequestFactory.FlushCache">
            <summary>
            Clears the caches for Responses and Redirects if they were enabled.
            </summary>
        </member>
        <member name="M:LamestWebserver.Core.Web.WebRequestFactory.LoadCacheState(System.String)">
            <summary>
            Loads the cached responses and redirects from files.
            </summary>
            <param name="fileName">the filename. (will be suffixed with .Responses or .Redirects)</param>
        </member>
        <member name="M:LamestWebserver.Core.Web.WebRequestFactory.AppendCacheState(System.String)">
            <summary>
            Loads the cached responses and redirects from files and appends them to the current collection of responses and redirects.
            </summary>
            <param name="fileName">the filename. (will be suffixed with .Responses or .Redirects)</param>
        </member>
        <member name="M:LamestWebserver.Core.Web.WebRequestFactory.SaveCacheState(System.String)">
            <summary>
            Saves the cached responses and redirects to files.
            </summary>
            <param name="fileName">the filename. (will be suffixed with .Responses or .Redirects)</param>
        </member>
        <member name="M:LamestWebserver.Core.Web.WebRequestFactory.GetResponse(System.String,System.String,System.Int32,System.String,System.Net.WebHeaderCollection)">
            <summary>
            Retrieves a Response as string.
            </summary>
            <param name="URL">The requested URL.</param>
            <param name="maxRedirects">The maximum amount of redirects before stop following.</param>
            <returns>Returns the response as string.</returns>
        </member>
        <member name="M:LamestWebserver.Core.Web.WebRequestFactory.HasCached(System.String,System.String,System.Int32)">
            <summary>
            Has this particular URL been cached?
            </summary>
            <param name="URL">The URL.</param>
            <returns>Returns true if the URL has been cached.</returns>
        </member>
        <member name="M:LamestWebserver.Core.Web.WebRequestFactory.GetResponse(System.String,System.Net.HttpStatusCode@,System.String,System.Int32,System.String,System.Net.WebHeaderCollection)">
            <summary>
            Retrieves a Response as string.
            </summary>
            <param name="URL">The requested URL.</param>
            <param name="statusCode">The status code of the Request.</param>
            <param name="maxRedirects">The maximum amount of redirects before stop following.</param>
            <returns>Returns the response as string.</returns>
        </member>
        <member name="M:LamestWebserver.Core.Web.WebRequestFactory.GetResponseSimple(System.String,System.Net.HttpStatusCode@)">
            <summary>
            Simply retrieves a response of the given URL.
            </summary>
            <param name="URL">The requested URL.</param>
            <param name="statusCode">The returned status code of the response.</param>
            <returns></returns>
        </member>
        <member name="T:LamestWebserver.Core.ThreadedWorker">
            <summary>
            Executes enqueued tasks using a fixed amount of worker threads.
            </summary>
        </member>
        <member name="F:LamestWebserver.Core.ThreadedWorker.CurrentWorker">
            <summary>
            The ThreadedWorker used in the Server.
            </summary>
        </member>
        <member name="F:LamestWebserver.Core.ThreadedWorker.DefaultWorkerCount">
            <summary>
            The default Thread-count of a new Threaded Worker.
            </summary>
        </member>
        <member name="F:LamestWebserver.Core.ThreadedWorker.WorkerCount">
            <summary>
            The count of WorkerThreads for this ThreadedWorker.
            </summary>
        </member>
        <member name="M:LamestWebserver.Core.ThreadedWorker.#ctor">
            <summary>
            Constructs a new ThreadedWorker with the default amount of WorkerThreads
            </summary>
        </member>
        <member name="M:LamestWebserver.Core.ThreadedWorker.#ctor(System.UInt32)">
            <summary>
            Constructs a new ThreadedWorker with a specific amount of WorkerThreads
            </summary>
            <param name="workerCount">the amount of WorkerThreads</param>
        </member>
        <member name="M:LamestWebserver.Core.ThreadedWorker.EnqueueJob(System.Delegate,System.Object[])">
            <summary>
            Enqueues a new Task to the ThreadedWorker pool
            </summary>
            <param name="task">the delegate to start</param>
            <param name="parameters">the parameters to start the delegate with</param>
            <returns>The WorkerTask object for this Job.</returns>
        </member>
        <member name="P:LamestWebserver.Core.ThreadedWorker.TaskCount">
            <summary>
            The amount of currently enqueued tasks
            </summary>
        </member>
        <member name="M:LamestWebserver.Core.ThreadedWorker.Stop(System.Nullable{System.Int32})">
            <summary>
            Stops all WorkerTasks
            <paramref name="timeout">The timeout in milliseconds to wait before forcefully aborting threads.<para/>Warning: This will most likely NOT free some memory. Please just use with reasonable timespans.</paramref>
            </summary>
        </member>
        <member name="M:LamestWebserver.Core.ThreadedWorker.Join(System.Nullable{System.Int32})">
            <summary>
            Waits until all WorkerTasks are done
            <paramref name="timeout">The timeout in milliseconds to wait before forcefully aborting threads.<para/>Warning: This will most likely NOT free some memory. Please just use with reasonable timespans.</paramref>
            </summary>
        </member>
        <member name="M:LamestWebserver.Core.ThreadedWorker.JoinTasks(LamestWebserver.Core.WorkerTask[])">
            <summary>
            Waits until multiple Workers have finished running.
            <para/>
            This Join will throw an Exception if raised inside the workers.
            </summary>
            <param name="workers">The workers to wait for.</param>
        </member>
        <member name="M:LamestWebserver.Core.ThreadedWorker.JoinTasks(System.TimeSpan,LamestWebserver.Core.WorkerTask[])">
            <summary>
            Waits until multiple Workers have finished running.
            <para/>
            This Join will throw an Exception if raised inside the workers.
            </summary>
            <param name="maximumTotalWaitTime">The maximum total time to wait for the tasks to finish.</param>
            <param name="workers">The workers to wait for.</param>
        </member>
        <member name="M:LamestWebserver.Core.ThreadedWorker.JoinTasksSafe(LamestWebserver.Core.WorkerTask[])">
            <summary>
            Waits until multiple workers have finished running.
            <para/>
            This Join will not throw Exceptions.
            </summary>
            <param name="workers">The workers to wait for.</param>
            <returns>Returns true if successfully joined all workers.</returns>
        </member>
        <member name="M:LamestWebserver.Core.ThreadedWorker.JoinTasksSafe(System.TimeSpan,LamestWebserver.Core.WorkerTask[])">
            <summary>
            Waits until multiple Workers have finished running.
            <para/>
            This Join will not throw Exceptions.
            </summary>
            <param name="maximumTotalWaitTime">The maximum total time to wait for the tasks to finish.</param>
            <param name="workers">The workers to wait for.</param>
            <returns>Returns true if successfully joined all workers.</returns>
        </member>
        <member name="M:LamestWebserver.Core.ThreadedWorker.GetDebugResponseNode">
            <inheritdoc />
        </member>
        <member name="T:LamestWebserver.Core.WorkerTask">
            <summary>
            A WorkerTasks to be executed by ThreadedWorker's WorkerThreads.
            </summary>
        </member>
        <member name="F:LamestWebserver.Core.WorkerTask.Parameters">
            <summary>
            The parameters to start the delegate with
            </summary>
        </member>
        <member name="F:LamestWebserver.Core.WorkerTask.Task">
            <summary>
            The delegate to start
            </summary>
        </member>
        <member name="M:LamestWebserver.Core.WorkerTask.#ctor(System.Delegate,System.Object[])">
            <summary>
            Constructs a new WorkerTask
            </summary>
            <param name="task">the delegate to start</param>
            <param name="parameters">the parameters to execute on the delegate</param>
        </member>
        <member name="P:LamestWebserver.Core.WorkerTask.State">
            <summary>
            The current Execution State of this task.
            </summary>
        </member>
        <member name="P:LamestWebserver.Core.WorkerTask.ReturnedValue">
            <summary>
            The returned value from the executed task - if any.
            </summary>
        </member>
        <member name="P:LamestWebserver.Core.WorkerTask.ExceptionThrown">
            <summary>
            The thrown exception from the executed task - if any.
            </summary>
        </member>
        <member name="M:LamestWebserver.Core.WorkerTask.JoinSafe">
            <summary>
            Waits until the task has been executed.
            <para/>
            This Join will not throw Exceptions.
            </summary>
            <returns>Returns true if task was executed successfully.</returns>
        </member>
        <member name="M:LamestWebserver.Core.WorkerTask.JoinSafe(System.Nullable{System.TimeSpan})">
            <summary>
            Waits until the task has been executed.
            <para/>
            This Join will not throw Exceptions.
            </summary>
            <param name="maximumWaitTime">The maximum amount of time to wait for the task to be executed.</param>
            <returns>Returns true if task was executed successfully.</returns>
        </member>
        <member name="M:LamestWebserver.Core.WorkerTask.JoinSafe(System.Int32)">
            <summary>
            Waits until the task has been executed.
            <para/>
            This Join will not throw Exceptions.
            </summary>
            <param name="milliseconds">The maximum amount of time to wait for the task to be executed in milliseconds.</param>
            <returns>Returns true if task was executed successfully.</returns>
        </member>
        <member name="M:LamestWebserver.Core.WorkerTask.JoinSafe(System.Object@,System.Nullable{System.TimeSpan})">
            <summary>
            Waits until the task has been executed.
            <para/>
            This Join will not throw Exceptions.
            </summary>
            <param name="returnedValue">The returned value - if any.</param>
            <param name="maximumWaitTime">The maximum amount of time to wait for the task to be executed.</param>
            <returns>Returns true if task was executed successfully.</returns>
        </member>
        <member name="M:LamestWebserver.Core.WorkerTask.JoinSafe``1(``0@,System.Nullable{System.TimeSpan})">
            <summary>
            Waits until the task has been executed.
            <para/>
            This Join will not throw Exceptions.
            </summary>
            <typeparam name="T">The Type of the returned value to be casted into.</typeparam>
            <param name="returnedValue">The returned value casted to T.</param>
            <param name="maximumWaitTime">The maximum amount of time to wait for the task to be executed.</param>
            <returns>Returns true if task was executed successfully.</returns>
        </member>
        <member name="M:LamestWebserver.Core.WorkerTask.JoinSafeOrNull``1(System.Nullable{System.TimeSpan})">
            <summary>
            Waits until the task has been executed.
            <para/>
            This Join will not throw Exceptions.
            </summary>
            <typeparam name="T">The Type of the returned value to be casted into.</typeparam>
            <param name="maximumWaitTime">The maximum amount of time to wait for the task to be executed.</param>
            <returns>The returned value casted to T if successfull or null if it failed.</returns>
        </member>
        <member name="M:LamestWebserver.Core.WorkerTask.Join">
            <summary>
            Waits until the task has been executed.
            <param/>
            This Join will throw an Exception if raised during execution.
            </summary>
        </member>
        <member name="M:LamestWebserver.Core.WorkerTask.Join(System.Nullable{System.TimeSpan})">
            <summary>
            Waits until the task has been executed.
            <param/>
            This Join will throw an Exception if raised during execution.
            </summary>
            <param name="maximumWaitTime">The maximum amount of time to wait for the task to be executed.</param>
        </member>
        <member name="M:LamestWebserver.Core.WorkerTask.Join(System.Int32)">
            <summary>
            Waits until the task has been executed.
            <param/>
            This Join will throw an Exception if raised during execution.
            </summary>
            <param name="milliseconds">The maximum amount of time to wait for the task to be executed in milliseconds.</param>
        </member>
        <member name="M:LamestWebserver.Core.WorkerTask.Join(System.Object@,System.Nullable{System.TimeSpan})">
            <summary>
            Waits until the task has been executed.
            <param/>
            This Join will throw an Exception if raised during execution.
            </summary>
            <param name="returnedValue">The returned value - if any.</param>
            <param name="maximumWaitTime">The maximum amount of time to wait for the task to be executed.</param>
        </member>
        <member name="M:LamestWebserver.Core.WorkerTask.Join``1(``0@,System.Nullable{System.TimeSpan})">
            <summary>
            Waits until the task has been executed.
            <param/>
            This Join will throw an Exception if raised during execution.
            </summary>
            <typeparam name="T">The Type of the returned value to be casted into.</typeparam>
            <param name="returnedValue">The returned value casted to T.</param>
            <param name="maximumWaitTime">The maximum amount of time to wait for the task to be executed.</param>
        </member>
        <member name="T:LamestWebserver.Core.WorkerTask.ETaskState">
            <summary>
            An enum containing the possible State Types of a WorkerTask.
            </summary>
        </member>
        <member name="F:LamestWebserver.Core.WorkerTask.ETaskState.Waiting">
            <summary>
            The Task has not been worked on yet.
            </summary>
        </member>
        <member name="F:LamestWebserver.Core.WorkerTask.ETaskState.Executing">
            <summary>
            The task is currently being executed.
            </summary>
        </member>
        <member name="F:LamestWebserver.Core.WorkerTask.ETaskState.Done">
            <summary>
            The task finished successfully.
            </summary>
        </member>
        <member name="F:LamestWebserver.Core.WorkerTask.ETaskState.ExceptionThrown">
            <summary>
            The task execution raised an Exception.
            </summary>
        </member>
        <member name="T:LamestWebserver.Core.UnfinishedTaskException">
            <summary>
            An exception to represent that the given task(s) could not be executed in the given timespan. 
            </summary>
        </member>
        <member name="M:LamestWebserver.Core.UnfinishedTaskException.#ctor">
            <inheritdoc />
        </member>
        <member name="M:LamestWebserver.Core.UnfinishedTaskException.#ctor(System.String)">
            <inheritdoc />
        </member>
        <member name="M:LamestWebserver.Core.UnfinishedTaskException.#ctor(System.String,System.Exception)">
            <inheritdoc />
        </member>
        <member name="T:LamestWebserver.Core.ElevateRightsWindows">
            <summary>
            Tools for executing the current Application with elevated rights
            
            Source: https://code.msdn.microsoft.com/windowsapps/CSUACSelfElevation-644673d3
            </summary>
        </member>
        <member name="P:LamestWebserver.Core.ElevateRightsWindows.IsRunAsAdmin">
            <summary>
            The function checks whether the current process is run as administrator.
            In other words, it dictates whether the primary access token of the 
            process belongs to user account that is a member of the local 
            Administrators group and it is elevated.
            </summary>
            <returns>
            Returns true if the primary access token of the process belongs to user 
            account that is a member of the local Administrators group and it is 
            elevated. Returns false if the token does not.
            </returns>
        </member>
        <member name="P:LamestWebserver.Core.ElevateRightsWindows.IsProcessElevated">
            <summary>
            The function gets the elevation information of the current process. It 
            dictates whether the process is elevated or not. Token elevation is only 
            available on Windows Vista and newer operating systems, thus 
            IsProcessElevated throws a C++ exception if it is called on systems prior 
            to Windows Vista. It is not appropriate to use this function to determine 
            whether a process is run as administartor.
            </summary>
            <returns>
            Returns true if the process is elevated. Returns false if it is not.
            </returns>
            <exception cref="T:System.ComponentModel.Win32Exception">
            When any native Windows API call fails, the function throws a Win32Exception 
            with the last error code.
            </exception>
            <remarks>
            TOKEN_INFORMATION_CLASS provides TokenElevationType to check the elevation 
            type (TokenElevationTypeDefault / TokenElevationTypeLimited / 
            TokenElevationTypeFull) of the process. It is different from TokenElevation 
            in that, when UAC is turned off, elevation type always returns 
            TokenElevationTypeDefault even though the process is elevated (Integrity 
            Level == High). In other words, it is not safe to say if the process is 
            elevated based on elevation type. Instead, we should use TokenElevation. 
            </remarks>
        </member>
        <member name="M:LamestWebserver.Core.ElevateRightsWindows.ElevateRights">
            <summary>
            Reexecutes the current process with administrative rights and exits the current one if you don't already have these
            </summary>
        </member>
        <member name="T:LamestWebserver.Core.TOKEN_INFORMATION_CLASS">
            <summary>
            The TOKEN_INFORMATION_CLASS enumeration type contains values that 
            specify the type of information being assigned to or retrieved from 
            an access token.
            </summary>
        </member>
        <member name="T:LamestWebserver.Core.WELL_KNOWN_SID_TYPE">
            <summary>
            The WELL_KNOWN_SID_TYPE enumeration type is a list of commonly used 
            security identifiers (SIDs). Programs can pass these values to the 
            CreateWellKnownSid function to create a SID from this list.
            </summary>
        </member>
        <member name="T:LamestWebserver.Core.SECURITY_IMPERSONATION_LEVEL">
            <summary>
            The SECURITY_IMPERSONATION_LEVEL enumeration type contains values 
            that specify security impersonation levels. Security impersonation 
            levels govern the degree to which a server process can act on behalf 
            of a client process.
            </summary>
        </member>
        <member name="T:LamestWebserver.Core.TOKEN_ELEVATION_TYPE">
            <summary>
            The TOKEN_ELEVATION_TYPE enumeration indicates the elevation type of 
            token being queried by the GetTokenInformation function or set by 
            the SetTokenInformation function.
            </summary>
        </member>
        <member name="T:LamestWebserver.Core.SID_AND_ATTRIBUTES">
            <summary>
            The structure represents a security identifier (SID) and its 
            attributes. SIDs are used to uniquely identify users or groups.
            </summary>
        </member>
        <member name="T:LamestWebserver.Core.TOKEN_ELEVATION">
            <summary>
            The structure indicates whether a token has elevated privileges.
            </summary>
        </member>
        <member name="T:LamestWebserver.Core.TOKEN_MANDATORY_LABEL">
            <summary>
            The structure specifies the mandatory integrity level for a token.
            </summary>
        </member>
        <member name="T:LamestWebserver.Core.SafeTokenHandle">
            <summary>
            Represents a wrapper class for a token handle.
            </summary>
        </member>
        <member name="M:LamestWebserver.Core.NativeMethods.OpenProcessToken(System.IntPtr,System.UInt32,LamestWebserver.Core.SafeTokenHandle@)">
            <summary>
            The function opens the access token associated with a process.
            </summary>
            <param name="hProcess">
            A handle to the process whose access token is opened.
            </param>
            <param name="desiredAccess">
            Specifies an access mask that specifies the requested types of 
            access to the access token. 
            </param>
            <param name="hToken">
            Outputs a handle that identifies the newly opened access token 
            when the function returns.
            </param>
            <returns></returns>
        </member>
        <member name="M:LamestWebserver.Core.NativeMethods.DuplicateToken(LamestWebserver.Core.SafeTokenHandle,LamestWebserver.Core.SECURITY_IMPERSONATION_LEVEL,LamestWebserver.Core.SafeTokenHandle@)">
            <summary>
            The function creates a new access token that duplicates one 
            already in existence.
            </summary>
            <param name="ExistingTokenHandle">
            A handle to an access token opened with TOKEN_DUPLICATE access.
            </param>
            <param name="ImpersonationLevel">
            Specifies a SECURITY_IMPERSONATION_LEVEL enumerated type that 
            supplies the impersonation level of the new token.
            </param>
            <param name="DuplicateTokenHandle">
            Outputs a handle to the duplicate token. 
            </param>
            <returns></returns>
        </member>
        <member name="M:LamestWebserver.Core.NativeMethods.GetTokenInformation(LamestWebserver.Core.SafeTokenHandle,LamestWebserver.Core.TOKEN_INFORMATION_CLASS,System.IntPtr,System.Int32,System.Int32@)">
            <summary>
            The function retrieves a specified type of information about an 
            access token. The calling process must have appropriate access 
            rights to obtain the information.
            </summary>
            <param name="hToken">
            A handle to an access token from which information is retrieved.
            </param>
            <param name="tokenInfoClass">
            Specifies a value from the TOKEN_INFORMATION_CLASS enumerated 
            type to identify the type of information the function retrieves.
            </param>
            <param name="pTokenInfo">
            A pointer to a buffer the function fills with the requested 
            information.
            </param>
            <param name="tokenInfoLength">
            Specifies the size, in bytes, of the buffer pointed to by the 
            TokenInformation parameter. 
            </param>
            <param name="returnLength">
            A pointer to a variable that receives the number of bytes needed 
            for the buffer pointed to by the TokenInformation parameter. 
            </param>
            <returns></returns>
        </member>
        <member name="F:LamestWebserver.Core.NativeMethods.BCM_SETSHIELD">
            <summary>
            Sets the elevation required state for a specified button or 
            command link to display an elevated icon. 
            </summary>
        </member>
        <member name="M:LamestWebserver.Core.NativeMethods.SendMessage(System.IntPtr,System.UInt32,System.Int32,System.IntPtr)">
            <summary>
            Sends the specified message to a window or windows. The function 
            calls the window procedure for the specified window and does not 
            return until the window procedure has processed the message. 
            </summary>
            <param name="hWnd">
            Handle to the window whose window procedure will receive the 
            message.
            </param>
            <param name="Msg">Specifies the message to be sent.</param>
            <param name="wParam">
            Specifies additional message-specific information.
            </param>
            <param name="lParam">
            Specifies additional message-specific information.
            </param>
            <returns></returns>
        </member>
        <member name="M:LamestWebserver.Core.NativeMethods.GetSidSubAuthority(System.IntPtr,System.UInt32)">
            <summary>
            The function returns a pointer to a specified subauthority in a 
            security identifier (SID). The subauthority value is a relative 
            identifier (RID).
            </summary>
            <param name="pSid">
            A pointer to the SID structure from which a pointer to a 
            subauthority is to be returned.
            </param>
            <param name="nSubAuthority">
            Specifies an index value identifying the subauthority array 
            element whose address the function will return.
            </param>
            <returns>
            If the function succeeds, the return value is a pointer to the 
            specified SID subauthority. To get extended error information, 
            call GetLastError. If the function fails, the return value is 
            undefined. The function fails if the specified SID structure is 
            not valid or if the index value specified by the nSubAuthority 
            parameter is out of bounds.
            </returns>
        </member>
        <member name="T:LamestWebserver.Attributes.ExecuteOnLoad">
            <summary>
            Mark a public static Method to be executed on load by the LamestWebserver Host Service
            </summary>
        </member>
        <member name="F:LamestWebserver.Attributes.ExecuteOnLoad.Args">
            <summary>
            The arguments to start the method with
            </summary>
        </member>
        <member name="M:LamestWebserver.Attributes.ExecuteOnLoad.#ctor(System.Object[])">
            <summary>
            Mark a public static Method to be executed on load by the LamestWebserver Host Service
            </summary>
            <param name="args">The arguments to start the method with</param>
        </member>
        <member name="T:LamestWebserver.Attributes.IgnoreDiscovery">
            <summary>
            Mark this class to not be added automatically when discovering pages.
            </summary>
        </member>
        <member name="T:LamestWebserver.Attributes.ExecuteOnUnload">
            <summary>
            Mark a public static Method to be executed on unload by the LamestWebserver Host Service
            </summary>
        </member>
        <member name="F:LamestWebserver.Attributes.ExecuteOnUnload.Args">
            <summary>
            The arguments to start the method with
            </summary>
        </member>
        <member name="M:LamestWebserver.Attributes.ExecuteOnUnload.#ctor(System.Object[])">
            <summary>
            Mark a public static Method to be executed on unload by the LamestWebserver Host Service
            </summary>
            <param name="args">The arguments to start the method with</param>
        </member>
        <member name="T:LamestWebserver.RequestHandlers.DebugView.IDebugRespondable">
            <summary>
            An Object that a DebugResponseNode can be retrieved from.
            </summary>
        </member>
        <member name="M:LamestWebserver.RequestHandlers.DebugView.IDebugRespondable.GetDebugResponseNode">
            <summary>
            Retrieves the DebugResponseNode for this object.
            </summary>
            <returns>Retrieves the DebugResponseNode for this object.</returns>
        </member>
        <member name="T:LamestWebserver.RequestHandlers.DebugView.DebugResponse">
            <summary>
            A request handler for the LamestWebserver DebugView.
            </summary>
        </member>
        <member name="F:LamestWebserver.RequestHandlers.DebugView.DebugResponse.DebugResponseInstance">
            <summary>
            The Singleton holding the main DebugResponse instance.
            </summary>
        </member>
        <member name="F:LamestWebserver.RequestHandlers.DebugView.DebugResponse.DebugViewRequestHandler">
            <summary>
            The Singleton holding the RequestHandler for the DebugResponse. This instance can simply be attatched to a Webserver in order to view the DebugView.
            </summary>
        </member>
        <member name="F:LamestWebserver.RequestHandlers.DebugView.DebugResponse.StyleSheet">
            <summary>
            The css stylesheet for the DebugView.
            </summary>
        </member>
        <member name="M:LamestWebserver.RequestHandlers.DebugView.DebugResponse.GetResponse(LamestWebserver.HttpRequest,System.Diagnostics.Stopwatch)">
            <inheritdoc />
        </member>
        <member name="M:LamestWebserver.RequestHandlers.DebugView.DebugResponse.UnpackUrlActions(LamestWebserver.HttpRequest)">
            <summary>
            Unpacks the URL of the Request into a WalkableQueue.
            </summary>
            <param name="request">The HttpRequest to take the URL from.</param>
            <returns>A Walkable Queue containing the URL.</returns>
        </member>
        <member name="M:LamestWebserver.RequestHandlers.DebugView.DebugResponse.AddNode(LamestWebserver.RequestHandlers.DebugView.DebugResponseNode)">
            <summary>
            Adds a node to the static DebugNode.
            </summary>
            <param name="node">The node to add.</param>
        </member>
        <member name="M:LamestWebserver.RequestHandlers.DebugView.DebugResponse.RemoveNode(LamestWebserver.RequestHandlers.DebugView.DebugResponseNode)">
            <summary>
            Removes a node from the static DebugNode.
            </summary>
            <param name="node">The node to remove.</param>
        </member>
        <member name="M:LamestWebserver.RequestHandlers.DebugView.DebugResponse.ClearNodes">
            <summary>
            Clears the static DebugNode.
            </summary>
        </member>
        <member name="M:LamestWebserver.RequestHandlers.DebugView.DebugResponse.Equals(LamestWebserver.RequestHandlers.IRequestHandler)">
            <inheritdoc />
        </member>
        <member name="T:LamestWebserver.RequestHandlers.DebugView.DebugResponseNode">
            <summary>
            A Node of Contents for the DebugView.
            </summary>
        </member>
        <member name="F:LamestWebserver.RequestHandlers.DebugView.DebugResponseNode.Name">
            <summary>
            The Name of this DebugResponseNode.
            </summary>
        </member>
        <member name="P:LamestWebserver.RequestHandlers.DebugView.DebugResponseNode.ID">
            <summary>
            The ID of this DebugResponseNode.
            </summary>
        </member>
        <member name="P:LamestWebserver.RequestHandlers.DebugView.DebugResponseNode.URL">
            <summary>
            The URL of this DebugResponseNode.
            </summary>
        </member>
        <member name="M:LamestWebserver.RequestHandlers.DebugView.DebugResponseNode.SetParentURL(LamestWebserver.RequestHandlers.DebugView.DebugContainerResponseNode)">
            <summary>
            Sets the the current node as Child of a given DebugContainerResponseNode.
            </summary>
            <param name="node">The parent node for this node.</param>
        </member>
        <member name="M:LamestWebserver.RequestHandlers.DebugView.DebugResponseNode.SetRootNode">
            <summary>
            Sets the current node as RootNode.
            </summary>
        </member>
        <member name="M:LamestWebserver.RequestHandlers.DebugView.DebugResponseNode.GetContents(LamestWebserver.SessionData,System.String,LamestWebserver.Collections.WalkableQueue{System.Tuple{LamestWebserver.Core.ID,System.String}})">
            <summary>
            Retrieves the contents of the DebugView node as HElement.
            </summary>
            <param name="sessionData">The current SessionData.</param>
            <param name="requestedAction">The requested Action for this particular node (if any).</param>
            <param name="walkableQueue">The current WalkableQueue containing all Subnodes of the requested URL.</param>
            <returns></returns>
        </member>
        <member name="M:LamestWebserver.RequestHandlers.DebugView.DebugResponseNode.GetLink(System.String,LamestWebserver.Core.ID,LamestWebserver.Collections.WalkableQueue{System.Tuple{LamestWebserver.Core.ID,System.String}},System.String)">
            <summary>
            Creates a link to another DebugNode.
            </summary>
            <param name="text">The text of the link.</param>
            <param name="subUrl">The subUrl to link to.</param>
            <param name="walkableQueue">The current walkableQueue.</param>
            <param name="requestedAction">The requested Action for the linked DebugNode.</param>
            <returns>The link as HLink.</returns>
        </member>
        <member name="M:LamestWebserver.RequestHandlers.DebugView.DebugResponseNode.GetLink(System.String,LamestWebserver.Collections.URL{LamestWebserver.Core.ID},System.String)">
            <summary>
            Creates a link to another DebugNode.
            </summary>
            <param name="text">The text of the link.</param>
            <param name="url">The URL of the DebugNode to link to.</param>
            <param name="requestedAction">The requested Action for the linked DebugNode.</param>
            <returns>The link as HLink.</returns>
        </member>
        <member name="M:LamestWebserver.RequestHandlers.DebugView.DebugResponseNode.GetLink(System.String,LamestWebserver.Core.ID,LamestWebserver.Collections.WalkableQueue{System.Tuple{LamestWebserver.Core.ID,System.String}},System.Int32,System.String)">
            <summary>
            Creates a link to another DebugNode.
            </summary>
            <param name="text">The text of the link.</param>
            <param name="subUrl">The subUrl to link to.</param>
            <param name="walkableQueue">The current walkableQueue.</param>
            <param name="position">The maximum Position to get from in the walkable queue.</param>
            <param name="requestedAction">The requested Action for the linked DebugNode.</param>
            <returns>The link as HLink.</returns>
        </member>
        <member name="M:LamestWebserver.RequestHandlers.DebugView.DebugResponseNode.GetLink(LamestWebserver.RequestHandlers.DebugView.DebugResponseNode)">
            <summary>
            Creates a link to another DebugNode.
            </summary>
            <param name="node">The Node to link to.</param>
            <returns>The link as HLink.</returns>
        </member>
        <member name="M:LamestWebserver.RequestHandlers.DebugView.DebugResponseNode.GetLink(LamestWebserver.RequestHandlers.DebugView.IDebugRespondable)">
            <summary>
            Creates a link to another DebugNode.
            </summary>
            <param name="respondable">The IDebugRespondable that contains the Node to link to.</param>
            <returns>The link as HLink.</returns>
        </member>
        <member name="T:LamestWebserver.RequestHandlers.DebugView.DebugContainerResponseNode">
            <summary>
            A kind of DebugResponseNode that can contain subnodes.
            </summary>
        </member>
        <member name="F:LamestWebserver.RequestHandlers.DebugView.DebugContainerResponseNode.GetElements">
            <summary>
            This Func is Called whenever the contents of this particular node are requested.
            </summary>
        </member>
        <member name="M:LamestWebserver.RequestHandlers.DebugView.DebugContainerResponseNode.#ctor(System.String,System.String,System.Func{LamestWebserver.SessionData,LamestWebserver.UI.HElement},LamestWebserver.RequestHandlers.DebugView.DebugContainerResponseNode,System.Boolean)">
            <summary>
            Creates a new DebugContainerResponseNode.
            </summary>
            <param name="name">The name of this DebugResponseNode.</param>
            <param name="description">The description for this DebugResponseNode.</param>
            <param name="getElementFunc">The function to execute whenever the contents of this DebugResponseNode are requested.</param>
            <param name="parentNode">The parent node of this node.</param>
            <param name="AddToParent">Shall this node be added to it's parent already?</param>
        </member>
        <member name="M:LamestWebserver.RequestHandlers.DebugView.DebugContainerResponseNode.ConstructRootNode(System.String,System.String,System.Func{LamestWebserver.SessionData,LamestWebserver.UI.HElement})">
            <summary>
            Constructs a new root-DebugResponse-node.
            </summary>
            <param name="name">The name of the Node.</param>
            <param name="description">The description for the node.</param>
            <param name="getElementFunc">The function to call whenever the contents of the node will be requested.</param>
            <returns>A root-DebugResponse-node.</returns>
        </member>
        <member name="M:LamestWebserver.RequestHandlers.DebugView.DebugContainerResponseNode.AddNode(LamestWebserver.RequestHandlers.DebugView.DebugResponseNode)">
            <summary>
            Adds a specified node as sub-node of this node.
            </summary>
            <param name="node">The node to add as subnode.</param>
        </member>
        <member name="M:LamestWebserver.RequestHandlers.DebugView.DebugContainerResponseNode.RemoveNode(LamestWebserver.RequestHandlers.DebugView.DebugResponseNode)">
            <summary>
            Removes a specified node from the sub-nodes of this node.
            </summary>
            <param name="node">The node to remove from the subnodes.</param>
        </member>
        <member name="M:LamestWebserver.RequestHandlers.DebugView.DebugContainerResponseNode.ClearNodes">
            <summary>
            Clears the Subnodes of this node.
            </summary>
        </member>
        <member name="M:LamestWebserver.RequestHandlers.DebugView.DebugContainerResponseNode.GetContents(LamestWebserver.SessionData,System.String,LamestWebserver.Collections.WalkableQueue{System.Tuple{LamestWebserver.Core.ID,System.String}})">
            <inheritdoc />
        </member>
        <member name="T:LamestWebserver.RequestHandlers.DebugView.StaticDebugContainerResponseNode">
            <summary>
            A DebugResponseNode that retrieves a static response.
            </summary>
        </member>
        <member name="F:LamestWebserver.RequestHandlers.DebugView.StaticDebugContainerResponseNode.Elements">
            <summary>
            The elements to return on request of the contents of this node.
            </summary>
        </member>
        <member name="M:LamestWebserver.RequestHandlers.DebugView.StaticDebugContainerResponseNode.#ctor(System.String,System.String,LamestWebserver.UI.HElement[])">
            <summary>
            Constructs a new StaticDebugContainerResponseNode.
            </summary>
            <param name="name">The name of this node.</param>
            <param name="description">The description of this node.</param>
            <param name="elements">The elements contained in this node.</param>
        </member>
        <member name="T:LamestWebserver.RequestHandlers.DebugView.IDebugUpdateableResponse`1">
            <summary>
            An interface to display that a class is able to Update it's DebugResponse with a variety of parameters.
            </summary>
        </member>
        <member name="M:LamestWebserver.RequestHandlers.DebugView.IDebugUpdateableResponse`1.UpdateDebugResponseData(`0)">
            <summary>
            Updates the DebugView information of this DebugResponse.
            </summary>
            <param name="data">The data to update with.</param>
        </member>
        <member name="T:LamestWebserver.RequestHandlers.DebugView.IDebugUpdateableResponse`2">
            <summary>
            An interface to display that a class is able to Update it's DebugResponse with a variety of parameters.
            </summary>
        </member>
        <member name="M:LamestWebserver.RequestHandlers.DebugView.IDebugUpdateableResponse`2.UpdateDebugResponseData(`0,`1)">
            <summary>
            Updates the DebugView information of this DebugResponse.
            </summary>
            <param name="data1">The data parameter 1 to update with.</param>
            <param name="data2">The data parameter 2 to update with.</param>
        </member>
        <member name="T:LamestWebserver.RequestHandlers.DebugView.IDebugUpdateableResponse`3">
            <summary>
            An interface to display that a class is able to Update it's DebugResponse with a variety of parameters.
            </summary>
        </member>
        <member name="M:LamestWebserver.RequestHandlers.DebugView.IDebugUpdateableResponse`3.UpdateDebugResponseData(`0,`1,`2)">
            <summary>
            Updates the DebugView information of this DebugResponse.
            </summary>
            <param name="data1">The data parameter 1 to update with.</param>
            <param name="data2">The data parameter 2 to update with.</param>
            <param name="data3">The data parameter 3 to update with.</param>
        </member>
        <member name="T:LamestWebserver.RequestHandlers.DebugView.IDebugUpdateableResponse`4">
            <summary>
            An interface to display that a class is able to Update it's DebugResponse with a variety of parameters.
            </summary>
        </member>
        <member name="M:LamestWebserver.RequestHandlers.DebugView.IDebugUpdateableResponse`4.UpdateDebugResponseData(`0,`1,`2,`3)">
            <summary>
            Updates the DebugView information of this DebugResponse.
            </summary>
            <param name="data1">The data parameter 1 to update with.</param>
            <param name="data2">The data parameter 2 to update with.</param>
            <param name="data3">The data parameter 3 to update with.</param>
            <param name="data4">The data parameter 4 to update with.</param>
        </member>
        <member name="T:LamestWebserver.RequestHandlers.DebugView.IDebugUpdateableResponse`5">
            <summary>
            An interface to display that a class is able to Update it's DebugResponse with a variety of parameters.
            </summary>
        </member>
        <member name="M:LamestWebserver.RequestHandlers.DebugView.IDebugUpdateableResponse`5.UpdateDebugResponseData(`0,`1,`2,`3,`4)">
            <summary>
            Updates the DebugView information of this DebugResponse.
            </summary>
            <param name="data1">The data parameter 1 to update with.</param>
            <param name="data2">The data parameter 2 to update with.</param>
            <param name="data3">The data parameter 3 to update with.</param>
            <param name="data4">The data parameter 4 to update with.</param>
            <param name="data5">The data parameter 5 to update with.</param>
        </member>
        <member name="T:LamestWebserver.RequestHandlers.DebugView.IDebugUpdateableResponse`6">
            <summary>
            An interface to display that a class is able to Update it's DebugResponse with a variety of parameters.
            </summary>
        </member>
        <member name="M:LamestWebserver.RequestHandlers.DebugView.IDebugUpdateableResponse`6.UpdateDebugResponseData(`0,`1,`2,`3,`4,`5)">
            <summary>
            Updates the DebugView information of this DebugResponse.
            </summary>
            <param name="data1">The data parameter 1 to update with.</param>
            <param name="data2">The data parameter 2 to update with.</param>
            <param name="data3">The data parameter 3 to update with.</param>
            <param name="data4">The data parameter 4 to update with.</param>
            <param name="data5">The data parameter 5 to update with.</param>
            <param name="data6">The data parameter 6 to update with.</param>
        </member>
        <member name="T:LamestWebserver.RequestHandlers.DebugView.IDebugUpdateableResponse`7">
            <summary>
            An interface to display that a class is able to Update it's DebugResponse with a variety of parameters.
            </summary>
        </member>
        <member name="M:LamestWebserver.RequestHandlers.DebugView.IDebugUpdateableResponse`7.UpdateDebugResponseData(`0,`1,`2,`3,`4,`5,`6)">
            <summary>
            Updates the DebugView information of this DebugResponse.
            </summary>
            <param name="data1">The data parameter 1 to update with.</param>
            <param name="data2">The data parameter 2 to update with.</param>
            <param name="data3">The data parameter 3 to update with.</param>
            <param name="data4">The data parameter 4 to update with.</param>
            <param name="data5">The data parameter 5 to update with.</param>
            <param name="data6">The data parameter 6 to update with.</param>
            <param name="data7">The data parameter 7 to update with.</param>
        </member>
        <member name="T:LamestWebserver.RequestHandlers.DebugView.IDebugUpdateableResponse`8">
            <summary>
            An interface to display that a class is able to Update it's DebugResponse with a variety of parameters.
            </summary>
        </member>
        <member name="M:LamestWebserver.RequestHandlers.DebugView.IDebugUpdateableResponse`8.UpdateDebugResponseData(`0,`1,`2,`3,`4,`5,`6,`7)">
            <summary>
            Updates the DebugView information of this DebugResponse.
            </summary>
            <param name="data1">The data parameter 1 to update with.</param>
            <param name="data2">The data parameter 2 to update with.</param>
            <param name="data3">The data parameter 3 to update with.</param>
            <param name="data4">The data parameter 4 to update with.</param>
            <param name="data5">The data parameter 5 to update with.</param>
            <param name="data6">The data parameter 6 to update with.</param>
            <param name="data7">The data parameter 7 to update with.</param>
            <param name="data8">The data parameter 8 to update with.</param>
        </member>
        <member name="T:LamestWebserver.RequestHandlers.DebugView.IDebugUpdateableResponse`9">
            <summary>
            An interface to display that a class is able to Update it's DebugResponse with a variety of parameters.
            </summary>
        </member>
        <member name="M:LamestWebserver.RequestHandlers.DebugView.IDebugUpdateableResponse`9.UpdateDebugResponseData(`0,`1,`2,`3,`4,`5,`6,`7,`8)">
            <summary>
            Updates the DebugView information of this DebugResponse.
            </summary>
            <param name="data1">The data parameter 1 to update with.</param>
            <param name="data2">The data parameter 2 to update with.</param>
            <param name="data3">The data parameter 3 to update with.</param>
            <param name="data4">The data parameter 4 to update with.</param>
            <param name="data5">The data parameter 5 to update with.</param>
            <param name="data6">The data parameter 6 to update with.</param>
            <param name="data7">The data parameter 7 to update with.</param>
            <param name="data8">The data parameter 8 to update with.</param>
            <param name="data9">The data parameter 9 to update with.</param>
        </member>
        <member name="T:LamestWebserver.RequestHandlers.RequestHandler">
            <summary>
            A RequestHandler contains tools to resolve HTTP-Requests to responses.
            </summary>
        </member>
        <member name="F:LamestWebserver.RequestHandlers.RequestHandler.CurrentRequestHandler">
            <summary>
            The RequestHandler used across all default Webserver Instances.
            </summary>
        </member>
        <member name="F:LamestWebserver.RequestHandlers.RequestHandler.RequestHandlers">
            <summary>
            The RequestHandlers to look through primarily.
            </summary>
        </member>
        <member name="F:LamestWebserver.RequestHandlers.RequestHandler.SecondaryRequestHandlers">
            <summary>
            The RequestHandlers to look through seconarily (e.g. ErrorRequestHandlers).
            </summary>
        </member>
        <member name="F:LamestWebserver.RequestHandlers.RequestHandler.RequestWriteLock">
            <summary>
            A WriteLock to safely add and remove response handlers.
            </summary>
        </member>
        <member name="F:LamestWebserver.RequestHandlers.RequestHandler.DebugResponseNode">
            <summary>
            The Root DebugResponseNode.
            </summary>
        </member>
        <member name="M:LamestWebserver.RequestHandlers.RequestHandler.#ctor(System.String)">
            <summary>
            Constructs a new RequestHandler.
            </summary>
            <param name="debugResponseNodeName">The DebugView name for this RequestHandler.</param>
        </member>
        <member name="M:LamestWebserver.RequestHandlers.RequestHandler.AddDebugResponseNode(LamestWebserver.RequestHandlers.DebugView.DebugResponseNode)">
            <summary>
            Adds a DebugResponseNode as Subnode to the Root DebugResponseNode.
            </summary>
            <param name="node">The node to add as subnode.</param>
        </member>
        <member name="M:LamestWebserver.RequestHandlers.RequestHandler.RemoveDebugResponseNode(LamestWebserver.RequestHandlers.DebugView.DebugResponseNode)">
            <summary>
            Removes a DebugResponseNode from the Subnodes of the Root DebugResponseNode.
            </summary>
            <param name="node">The node to remove.</param>
        </member>
        <member name="M:LamestWebserver.RequestHandlers.RequestHandler.ClearDebugResponseNodes">
            <summary>
            Clears the subnodes of the Root DebugResponseNode.
            </summary>
        </member>
        <member name="M:LamestWebserver.RequestHandlers.RequestHandler.GetDebugResponseNode">
            <inheritdoc />
        </member>
        <member name="M:LamestWebserver.RequestHandlers.RequestHandler.GetResponse(LamestWebserver.HttpRequest)">
            <summary>
            Retrieves a response (or null) from a given http packet by looking through all primary and secondary request handlers as long as none has a propper response to it.
            </summary>
            <param name="requestPacket">the http-packet to reply to</param>
            <returns>the response http packet or null</returns>
        </member>
        <member name="M:LamestWebserver.RequestHandlers.RequestHandler.AddRequestHandler(LamestWebserver.RequestHandlers.IRequestHandler)">
            <summary>
            Adds a new request handler.
            </summary>
            <param name="handler">the handler to add</param>
        </member>
        <member name="M:LamestWebserver.RequestHandlers.RequestHandler.InsertRequestHandler(LamestWebserver.RequestHandlers.IRequestHandler,System.Int32)">
            <summary>
            Adds a new request handler at the specified position (or 0).
            </summary>
            <param name="handler">the handler to add</param>
            <param name="index">the position where to add the request handler.</param>
        </member>
        <member name="M:LamestWebserver.RequestHandlers.RequestHandler.RemoveRequestHandler(LamestWebserver.RequestHandlers.IRequestHandler)">
            <summary>
            Removes a specific requestHandler.
            </summary>
            <param name="handler">the handler to remove.</param>
        </member>
        <member name="M:LamestWebserver.RequestHandlers.RequestHandler.RemoveRequestHandlers(System.Type)">
            <summary>
            Removes all request handlers with a certain type.
            </summary>
            <param name="handlertype">the type of the handler.</param>
        </member>
        <member name="M:LamestWebserver.RequestHandlers.RequestHandler.InsertSecondaryRequestHandler(LamestWebserver.RequestHandlers.IRequestHandler,System.Int32)">
            <summary>
            Inserts a secondary request handler at a specified position (or 0).
            </summary>
            <param name="handler">the handler to insert</param>
            <param name="index">the index where to insert the handler</param>
        </member>
        <member name="M:LamestWebserver.RequestHandlers.RequestHandler.RemoveSecondaryRequestHandler(LamestWebserver.RequestHandlers.IRequestHandler)">
            <summary>
            Removes a handler from the secondary request handlers
            </summary>
            <param name="handler">the handler to remove</param>
        </member>
        <member name="M:LamestWebserver.RequestHandlers.RequestHandler.RemoveSecondaryRequestHandlers(System.Type)">
            <summary>
            Removes all request handlers of a specific type from the secondary request handlers.
            </summary>
            <param name="handlertype">the type of the handlers to remove</param>
        </member>
        <member name="T:LamestWebserver.RequestHandlers.IRequestHandler">
            <summary>
            An Interface for HTTP-Request handlers.
            </summary>
        </member>
        <member name="M:LamestWebserver.RequestHandlers.IRequestHandler.GetResponse(LamestWebserver.HttpRequest,System.Diagnostics.Stopwatch)">
            <summary>
            Retrieves a response from a http-request.
            </summary>
            <param name="requestPacket">the request packet</param>
            <param name="currentStopwatch">a reference to a started response time stopwatch.</param>
            <returns>the response packet</returns>
        </member>
        <member name="T:LamestWebserver.RequestHandlers.FileRequestHandler">
            <summary>
            The Request Handler that delivers files from local storage.
            </summary>
        </member>
        <member name="F:LamestWebserver.RequestHandlers.FileRequestHandler.Folder">
            <summary>
            The folder in local storage, where the files are located.
            </summary>
        </member>
        <member name="M:LamestWebserver.RequestHandlers.FileRequestHandler.#ctor(System.String)">
            <summary>
            Constructs a new FileRequestHandler.
            </summary>
            <param name="folder">the folder where to look for the the requested files.</param>
        </member>
        <member name="M:LamestWebserver.RequestHandlers.FileRequestHandler.GetResponse(LamestWebserver.HttpRequest,System.Diagnostics.Stopwatch)">
            <inheritdoc />
        </member>
        <member name="M:LamestWebserver.RequestHandlers.FileRequestHandler.ReadFile(System.String,System.Boolean)">
            <summary>
            Reads a file from local storage.
            </summary>
            <param name="filename">the name of the file</param>
            <param name="isBinary">shall the file be read as binary file?</param>
            <returns>a byte[] contatining the file contents</returns>
        </member>
        <member name="M:LamestWebserver.RequestHandlers.FileRequestHandler.ReadFile(System.String)">
            <summary>
            Reads a file from local storage.
            </summary>
            <param name="filename">the name of the file</param>
            <returns>a byte[] contatining the file contents</returns>
        </member>
        <member name="M:LamestWebserver.RequestHandlers.FileRequestHandler.FileIsBinary(System.String,System.String)">
            <summary>
            Checks if a given file should be binary.
            </summary>
            <param name="fileName">the name of the file</param>
            <param name="extention">the extention of the file</param>
            <returns></returns>
        </member>
        <member name="M:LamestWebserver.RequestHandlers.FileRequestHandler.GetExtention(System.String)">
            <summary>
            Eetrieves the extention of a file.
            </summary>
            <param name="fileName">the file name</param>
            <returns>the extention</returns>
        </member>
        <member name="M:LamestWebserver.RequestHandlers.FileRequestHandler.GetMimeType(System.String)">
            <summary>
            Returns the mime-type of a given file.
            </summary>
            <param name="extention">the extention of the file</param>
            <returns>the mime-type as string</returns>
        </member>
        <member name="M:LamestWebserver.RequestHandlers.FileRequestHandler.Equals(LamestWebserver.RequestHandlers.IRequestHandler)">
            <inheritdoc />
        </member>
        <member name="T:LamestWebserver.RequestHandlers.CachedFileRequestHandler">
            <summary>
            A RequestHanlder that delivers Files from local storage - which will be cached on use.
            </summary>
        </member>
        <member name="F:LamestWebserver.RequestHandlers.CachedFileRequestHandler.CacheHashMapSize">
            <summary>
            The size of the cache hash map. this does not limit the amount of cached items - it's just there to preference size or performance.
            </summary>
        </member>
        <member name="F:LamestWebserver.RequestHandlers.CachedFileRequestHandler.DebugResponseNode">
            <summary>
            The DebugResponseNode for this CachedFileRequestHandler.
            </summary>
        </member>
        <member name="M:LamestWebserver.RequestHandlers.CachedFileRequestHandler.#ctor(System.String)">
            <inheritdoc />
        </member>
        <member name="M:LamestWebserver.RequestHandlers.CachedFileRequestHandler.GetResponse(LamestWebserver.HttpRequest,System.Diagnostics.Stopwatch)">
            <inheritdoc />
        </member>
        <member name="M:LamestWebserver.RequestHandlers.CachedFileRequestHandler.GetFromCache(System.String,LamestWebserver.RequestHandlers.PreloadedFile@)">
            <summary>
            Gets a file from the cache.
            </summary>
            <param name="name">the name of the file.</param>
            <param name="file">the PreloadedFile object of this file</param>
            <returns>true if found - false if not found.</returns>
        </member>
        <member name="M:LamestWebserver.RequestHandlers.CachedFileRequestHandler.GetDebugResponseNode">
            <inheritdoc />
        </member>
        <member name="T:LamestWebserver.RequestHandlers.PackedFileRequestHandler">
            <summary>
            Reads or writes an entire dictionary from / to a file which can be loaded at startup so that the file size is compressed and not anyone can easily look at the files inside.
            </summary>
        </member>
        <member name="M:LamestWebserver.RequestHandlers.PackedFileRequestHandler.#ctor(System.String,System.Boolean,System.Nullable{System.Int32})">
            <summary>
            Creates a new PackedFileRequestHandler from a directory. Use SaveToPackedFile-Method to save it.
            </summary>
            <param name="directoryPath">the path of the directory to read</param>
            <param name="includeSubdirectories">shall subdirectories be included</param>
            <param name="HashMapSize">the size of the hashmap containing the files. this does not limit the number of contained files - only to preference performance or size.</param>
        </member>
        <member name="M:LamestWebserver.RequestHandlers.PackedFileRequestHandler.#ctor(System.String)">
            <summary>
            Creates a new PackedFileRequestHandler from a packed file.
            </summary>
            <param name="filename">the name of the file to load</param>
        </member>
        <member name="M:LamestWebserver.RequestHandlers.PackedFileRequestHandler.SaveToPackedFile(System.String)">
            <summary>
            Saves the storage to a packed file.
            </summary>
            <param name="filename">the name of the packed file.</param>
        </member>
        <member name="M:LamestWebserver.RequestHandlers.PackedFileRequestHandler.GetResponse(LamestWebserver.HttpRequest,System.Diagnostics.Stopwatch)">
            <inheritdoc />
        </member>
        <member name="M:LamestWebserver.RequestHandlers.PackedFileRequestHandler.Equals(LamestWebserver.RequestHandlers.IRequestHandler)">
            <inheritdoc />
        </member>
        <member name="T:LamestWebserver.RequestHandlers.PreloadedFile">
            <summary>
            A Cacheable preloaded file.
            </summary>
        </member>
        <member name="F:LamestWebserver.RequestHandlers.PreloadedFile.Filename">
            <summary>
            The name of the file.
            </summary>
        </member>
        <member name="F:LamestWebserver.RequestHandlers.PreloadedFile.Contents">
            <summary>
            The contents of the file.
            </summary>
        </member>
        <member name="F:LamestWebserver.RequestHandlers.PreloadedFile.Size">
            <summary>
            The size of the file.
            </summary>
        </member>
        <member name="F:LamestWebserver.RequestHandlers.PreloadedFile.LastModified">
            <summary>
            The last-modified date of the file.
            </summary>
        </member>
        <member name="F:LamestWebserver.RequestHandlers.PreloadedFile.IsBinary">
            <summary>
            is the file just binary data?
            </summary>
        </member>
        <member name="F:LamestWebserver.RequestHandlers.PreloadedFile.LoadCount">
            <summary>
            The amount of times the file has been requested.
            </summary>
        </member>
        <member name="M:LamestWebserver.RequestHandlers.PreloadedFile.#ctor">
            <summary>
            Empty Deserialization constructor
            </summary>
        </member>
        <member name="M:LamestWebserver.RequestHandlers.PreloadedFile.#ctor(System.String,System.Byte[],System.DateTime,System.Boolean)">
            <summary>
            Constructs a new Preloaded file.
            </summary>
            <param name="filename">The name of the file.</param>
            <param name="contents">The contents of the file.</param>
            <param name="lastModified">The last-modified date of the file.</param>
            <param name="isBinary">is the file just binary data?</param>
        </member>
        <member name="M:LamestWebserver.RequestHandlers.PreloadedFile.Clone">
            <inheritdoc />
        </member>
        <member name="M:LamestWebserver.RequestHandlers.PreloadedFile.Equals(LamestWebserver.RequestHandlers.PreloadedFile)">
            <inheritdoc />
        </member>
        <member name="T:LamestWebserver.RequestHandlers.ErrorRequestHandler">
            <summary>
            Displays error messages for every request that passed through.
            </summary>
        </member>
        <member name="F:LamestWebserver.RequestHandlers.ErrorRequestHandler.StoreErrorMessages">
            <summary>
            Shall this RequestHandler store DebugView information?
            </summary>
        </member>
        <member name="F:LamestWebserver.RequestHandlers.ErrorRequestHandler.DebugResponseNode">
            <summary>
            The DebugResponseNode for this ErrorRequestHandler.
            </summary>
        </member>
        <member name="M:LamestWebserver.RequestHandlers.ErrorRequestHandler.#ctor">
            <summary>
            Creates a new ErrorRequestHandler.
            </summary>
        </member>
        <member name="M:LamestWebserver.RequestHandlers.ErrorRequestHandler.GetResponse(LamestWebserver.HttpRequest,System.Diagnostics.Stopwatch)">
            <inheritdoc />
        </member>
        <member name="M:LamestWebserver.RequestHandlers.ErrorRequestHandler.Equals(LamestWebserver.RequestHandlers.IRequestHandler)">
            <inheritdoc />
        </member>
        <member name="M:LamestWebserver.RequestHandlers.ErrorRequestHandler.GetDebugResponseNode">
            <inheritdoc />
        </member>
        <member name="T:LamestWebserver.RequestHandlers.AbstractMutexRetriableResponse`1">
            <summary>
            Provides functionality for Retriable Responses (MutexRetryException triggered retrying)
            </summary>
            <typeparam name="T">the type of method to call</typeparam>
        </member>
        <member name="F:LamestWebserver.RequestHandlers.AbstractMutexRetriableResponse`1.Retries">
            <summary>
            The maximum amount of retries if deadlocks prevented the execution.
            </summary>
        </member>
        <member name="M:LamestWebserver.RequestHandlers.AbstractMutexRetriableResponse`1.GetResponse(LamestWebserver.HttpRequest,System.Diagnostics.Stopwatch)">
            <inheritdoc />
        </member>
        <member name="M:LamestWebserver.RequestHandlers.AbstractMutexRetriableResponse`1.GetRetriableResponse(`0,LamestWebserver.HttpRequest,LamestWebserver.HttpSessionData)">
            <summary>
            Responds to the request packet by calling the requestFunction with the sessionData and the requested packet.
            The retriable part of the response delivery.
            </summary>
            <param name="requestFunction">the function to call</param>
            <param name="requestPacket">the http-request</param>
            <param name="sessionData">the current sessionData</param>
            <returns>the http response-packet</returns>
        </member>
        <member name="M:LamestWebserver.RequestHandlers.AbstractMutexRetriableResponse`1.FinishResponse(`0,System.Exception,System.Diagnostics.Stopwatch,LamestWebserver.HttpRequest,LamestWebserver.HttpResponse)">
            <summary>
            Provides information about the last response and is called whenever a response finished.
            </summary>
            <param name="requestFunction">The called request function.</param>
            <param name="exception">The thrown exception.</param>
            <param name="stopwatch">The current stopwatch.</param>
            <param name="requestPacket">The original Request Packet.</param>
            <param name="httpResponse">The response Packet.</param>
        </member>
        <member name="M:LamestWebserver.RequestHandlers.AbstractMutexRetriableResponse`1.GetResponseFunction(LamestWebserver.HttpRequest)">
            <summary>
            Gets the response function which can be called multiple times in GetRetriableResponse.
            </summary>
            <param name="requestPacket">the http-request</param>
            <returns>the method to call.</returns>
        </member>
        <member name="M:LamestWebserver.RequestHandlers.AbstractMutexRetriableResponse`1.Equals(LamestWebserver.RequestHandlers.IRequestHandler)">
            <inheritdoc />
        </member>
        <member name="T:LamestWebserver.RequestHandlers.PageResponseRequestHandler">
            <summary>
            A response handler for PageResponses
            </summary>
        </member>
        <member name="F:LamestWebserver.RequestHandlers.PageResponseRequestHandler.StoreDebugInformation">
            <summary>
            Shall this RequestHandler store DebugView information?
            </summary>
        </member>
        <member name="F:LamestWebserver.RequestHandlers.PageResponseRequestHandler.DebugResponseNode">
            <summary>
            The DebugResponseNode for this PageResponseRequestHandler.
            </summary>
        </member>
        <member name="F:LamestWebserver.RequestHandlers.PageResponseRequestHandler.ReaderWriterLock">
            <summary>
            A ReaderWriterLock for accessing pages synchronously.
            </summary>
        </member>
        <member name="F:LamestWebserver.RequestHandlers.PageResponseRequestHandler.PageResponses">
            <summary>
            The currently listed PageResponses.
            </summary>
        </member>
        <member name="M:LamestWebserver.RequestHandlers.PageResponseRequestHandler.#ctor">
            <summary>
            Constructs a new PageResponseRequestHandler and registers this RequestHandler as listening for new PageResponses.
            </summary>
        </member>
        <member name="M:LamestWebserver.RequestHandlers.PageResponseRequestHandler.GetRetriableResponse(LamestWebserver.Master.GetContents,LamestWebserver.HttpRequest,LamestWebserver.HttpSessionData)">
            <inheritdoc />
        </member>
        <member name="M:LamestWebserver.RequestHandlers.PageResponseRequestHandler.GetResponseFunction(LamestWebserver.HttpRequest)">
            <inheritdoc />
        </member>
        <member name="M:LamestWebserver.RequestHandlers.PageResponseRequestHandler.GetDebugResponseNode">
            <inheritdoc />
        </member>
        <member name="M:LamestWebserver.RequestHandlers.PageResponseRequestHandler.FinishResponse(LamestWebserver.Master.GetContents,System.Exception,System.Diagnostics.Stopwatch,LamestWebserver.HttpRequest,LamestWebserver.HttpResponse)">
            <inheritdoc />
        </member>
        <member name="T:LamestWebserver.RequestHandlers.OneTimePageResponseRequestHandler">
            <summary>
            A response handler for OneTime-PageResponses
            </summary>
        </member>
        <member name="F:LamestWebserver.RequestHandlers.OneTimePageResponseRequestHandler.ReaderWriterLock">
            <summary>
            A ReaderWriterLock for accessing pages synchronously.
            </summary>
        </member>
        <member name="F:LamestWebserver.RequestHandlers.OneTimePageResponseRequestHandler.OneTimeResponses">
            <summary>
            The currently listed OneTime-PageResponses.
            </summary>
        </member>
        <member name="M:LamestWebserver.RequestHandlers.OneTimePageResponseRequestHandler.#ctor">
            <summary>
            Constructs a new OneTimePageResponseRequestHandler and registers this RequestHandler as listening for new OneTime-PageResponses.
            </summary>
        </member>
        <member name="M:LamestWebserver.RequestHandlers.OneTimePageResponseRequestHandler.GetRetriableResponse(LamestWebserver.Master.GetContents,LamestWebserver.HttpRequest,LamestWebserver.HttpSessionData)">
            <inheritdoc />
        </member>
        <member name="M:LamestWebserver.RequestHandlers.OneTimePageResponseRequestHandler.GetResponseFunction(LamestWebserver.HttpRequest)">
            <inheritdoc />
        </member>
        <member name="T:LamestWebserver.RequestHandlers.WebSocketRequestHandler">
            <summary>
            A response handler for WebSocketResponses
            </summary>
        </member>
        <member name="F:LamestWebserver.RequestHandlers.WebSocketRequestHandler.ReaderWriterLock">
            <summary>
            A ReaderWriterLock for accessing pages synchronously.
            </summary>
        </member>
        <member name="F:LamestWebserver.RequestHandlers.WebSocketRequestHandler.WebSocketResponses">
            <summary>
            The currently listed WebSocketResponses.
            </summary>
        </member>
        <member name="M:LamestWebserver.RequestHandlers.WebSocketRequestHandler.#ctor">
            <summary>
            Constructs a new WebSocketRequestHandler and registers this RequestHandler as listening for new WebSocketResponses.
            </summary>
        </member>
        <member name="M:LamestWebserver.RequestHandlers.WebSocketRequestHandler.GetResponse(LamestWebserver.HttpRequest,System.Diagnostics.Stopwatch)">
            <inheritdoc />
        </member>
        <member name="M:LamestWebserver.RequestHandlers.WebSocketRequestHandler.Equals(LamestWebserver.RequestHandlers.IRequestHandler)">
            <inheritdoc />
        </member>
        <member name="T:LamestWebserver.RequestHandlers.DirectoryResponseRequestHandler">
            <summary>
            A response handler for DirectoryResponses
            </summary>
        </member>
        <member name="F:LamestWebserver.RequestHandlers.DirectoryResponseRequestHandler.StoreDebugInformation">
            <summary>
            Shall this RequestHandler store DebugView information?
            </summary>
        </member>
        <member name="F:LamestWebserver.RequestHandlers.DirectoryResponseRequestHandler.ReaderWriterLock">
            <summary>
            A ReaderWriterLock for accessing pages synchronously.
            </summary>
        </member>
        <member name="F:LamestWebserver.RequestHandlers.DirectoryResponseRequestHandler.DirectoryResponses">
            <summary>
            The currently listed DirectoryResponses.
            </summary>
        </member>
        <member name="F:LamestWebserver.RequestHandlers.DirectoryResponseRequestHandler.DebugResponseNode">
            <summary>
            The DebugResponseNode for this PageResponseRequestHandler.
            </summary>
        </member>
        <member name="M:LamestWebserver.RequestHandlers.DirectoryResponseRequestHandler.#ctor">
            <summary>
            Constructs a new DirectoryResponseRequestHandler and registers this RequestHandler as listening for new DirectoryResponses.
            </summary>
        </member>
        <member name="M:LamestWebserver.RequestHandlers.DirectoryResponseRequestHandler.GetRetriableResponse(LamestWebserver.Master.GetDirectoryContents,LamestWebserver.HttpRequest,LamestWebserver.HttpSessionData)">
            <inheritdoc />
        </member>
        <member name="M:LamestWebserver.RequestHandlers.DirectoryResponseRequestHandler.GetResponseFunction(LamestWebserver.HttpRequest)">
            <inheritdoc />
        </member>
        <member name="M:LamestWebserver.RequestHandlers.DirectoryResponseRequestHandler.GetDebugResponseNode">
            <inheritdoc />
        </member>
        <member name="M:LamestWebserver.RequestHandlers.DirectoryResponseRequestHandler.FinishResponse(LamestWebserver.Master.GetDirectoryContents,System.Exception,System.Diagnostics.Stopwatch,LamestWebserver.HttpRequest,LamestWebserver.HttpResponse)">
            <inheritdoc />
        </member>
        <member name="T:LamestWebserver.RequestHandlers.DataResponseRequestHandler">
            <summary>
            A response handler for DataResponses
            </summary>
        </member>
        <member name="F:LamestWebserver.RequestHandlers.DataResponseRequestHandler.StoreDebugInformation">
            <summary>
            Shall this RequestHandler store DebugView information?
            </summary>
        </member>
        <member name="F:LamestWebserver.RequestHandlers.DataResponseRequestHandler.DebugResponseNode">
            <summary>
            The DebugResponseNode for this DataResponseRequestHandler.
            </summary>
        </member>
        <member name="F:LamestWebserver.RequestHandlers.DataResponseRequestHandler.ReaderWriterLock">
            <summary>
            A ReaderWriterLock for accessing pages synchronously.
            </summary>
        </member>
        <member name="F:LamestWebserver.RequestHandlers.DataResponseRequestHandler.DataResponses">
            <summary>
            The currently listed DataResponses.
            </summary>
        </member>
        <member name="M:LamestWebserver.RequestHandlers.DataResponseRequestHandler.#ctor">
            <summary>
            Constructs a new DataResponseRequestHandler and registers this RequestHandler as listening for new DataResponses.
            </summary>
        </member>
        <member name="M:LamestWebserver.RequestHandlers.DataResponseRequestHandler.GetRetriableResponse(LamestWebserver.Master.GetDataContents,LamestWebserver.HttpRequest,LamestWebserver.HttpSessionData)">
            <inheritdoc />
        </member>
        <member name="M:LamestWebserver.RequestHandlers.DataResponseRequestHandler.GetResponseFunction(LamestWebserver.HttpRequest)">
            <inheritdoc />
        </member>
        <member name="M:LamestWebserver.RequestHandlers.DataResponseRequestHandler.GetDebugResponseNode">
            <inheritdoc />
        </member>
        <member name="M:LamestWebserver.RequestHandlers.DataResponseRequestHandler.FinishResponse(LamestWebserver.Master.GetDataContents,System.Exception,System.Diagnostics.Stopwatch,LamestWebserver.HttpRequest,LamestWebserver.HttpResponse)">
            <inheritdoc />
        </member>
        <member name="T:LamestWebserver.HttpResponse">
            <summary>
            Contains tools to build HTTP-Responses.
            </summary>
        </member>
        <member name="F:LamestWebserver.HttpResponse.HtmlDateFormat">
            <summary>
            An expression used for DateTime.ToString to parse into correct HTTP DateFormat
            </summary>
        </member>
        <member name="F:LamestWebserver.HttpResponse.Date">
            <summary>
            The current date in HTTP DateFormat
            </summary>
        </member>
        <member name="F:LamestWebserver.HttpResponse.Version">
            <summary>
            The HTTP Version of the Response
            </summary>
        </member>
        <member name="F:LamestWebserver.HttpResponse.Status">
            <summary>
            The HTTP Status Code and Status of the Response
            </summary>
        </member>
        <member name="F:LamestWebserver.HttpResponse.Range">
            <summary>
            describes the range of bytes this package sends
            item1 = begin
            item2 = end
            is null when all bytes are requested
            </summary>
        </member>
        <member name="F:LamestWebserver.HttpResponse.ContentType">
            <summary>
            The content-type of the response
            </summary>
        </member>
        <member name="F:LamestWebserver.HttpResponse.Cookies">
            <summary>
            The cookies, that shall be set in the client browser
            </summary>
        </member>
        <member name="F:LamestWebserver.HttpResponse.ModifiedDate">
            <summary>
            The modified date of the file (if any)
            </summary>
        </member>
        <member name="F:LamestWebserver.HttpResponse.CharSet">
            <summary>
            The HTTP ContentType charset attribute. Only applicable if ContentType is not null.
            </summary>
        </member>
        <member name="P:LamestWebserver.HttpResponse.BinaryData">
            <summary>
            the binary data contained in the request
            Also sets the contentLength.
            </summary>
        </member>
        <member name="M:LamestWebserver.HttpResponse.#ctor(LamestWebserver.HttpRequest)">
            <summary>
            Creates a new HttpResponse
            </summary>
        </member>
        <member name="M:LamestWebserver.HttpResponse.#ctor(LamestWebserver.HttpRequest,System.Byte[])">
            <summary>
            Creates a new HttpResponse from the given requestPacket with the given data as response.
            </summary>
            <param name="requestPacket">The request packet.</param>
            <param name="binaryData">The binary data to reply with.</param>
        </member>
        <member name="M:LamestWebserver.HttpResponse.#ctor(LamestWebserver.HttpRequest,System.String)">
            <summary>
            Creates a new HttpResponse from the given requestPacket with the given string as response.
            </summary>
            <param name="requestPacket">The request packet.</param>
            <param name="responseString">The string response to reply with.</param>
        </member>
        <member name="M:LamestWebserver.HttpResponse.GetPackage">
            <summary>
            Returns the contents of the complete package to be sent via tcp to the client 
            </summary>
            <returns>the contents as byte array</returns>
        </member>
        <member name="T:LamestWebserver.Serialization.SerializableKeyValuePair`2">
            <summary>
            A serializable alternative to KeyValuePair.
            </summary>
            <typeparam name="TKey">the Type of the Key</typeparam>
            <typeparam name="TValue">the Type of the Value</typeparam>
        </member>
        <member name="P:LamestWebserver.Serialization.SerializableKeyValuePair`2.Key">
            <summary>
            The Key
            </summary>
        </member>
        <member name="P:LamestWebserver.Serialization.SerializableKeyValuePair`2.Value">
            <summary>
            The Value
            </summary>
        </member>
        <member name="M:LamestWebserver.Serialization.SerializableKeyValuePair`2.#ctor(`0,`1)">
            <summary>
            Constructs a new SerializableKeyValuePair
            </summary>
            <param name="key">the Key</param>
            <param name="value">the Value</param>
        </member>
        <member name="M:LamestWebserver.Serialization.SerializableKeyValuePair`2.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Deserialization constructor.
            </summary>
        </member>
        <member name="M:LamestWebserver.Serialization.SerializableKeyValuePair`2.op_Implicit(System.Collections.Generic.KeyValuePair{`0,`1})~LamestWebserver.Serialization.SerializableKeyValuePair{`0,`1}">
            <summary>
            Casts a KeyValuePair to a SerializableKeyValuePair
            </summary>
            <param name="input">the KeyValuePair</param>
            <returns>the Entry</returns>
        </member>
        <member name="M:LamestWebserver.Serialization.SerializableKeyValuePair`2.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <inheritdoc />
        </member>
        <member name="M:LamestWebserver.Serialization.SerializableKeyValuePair`2.GetSchema">
            <inheritdoc />
        </member>
        <member name="M:LamestWebserver.Serialization.SerializableKeyValuePair`2.ReadXml(System.Xml.XmlReader)">
            <inheritdoc />
        </member>
        <member name="M:LamestWebserver.Serialization.SerializableKeyValuePair`2.WriteXml(System.Xml.XmlWriter)">
            <inheritdoc />
        </member>
        <member name="T:LamestWebserver.Serialization.Serializer">
            <summary>
            A class that contains various Serialization methods
            </summary>
        </member>
        <member name="M:LamestWebserver.Serialization.Serializer.ReadXmlData``1(System.String)">
            <summary>
            Retrieves XML-Serialized data from a file.
            </summary>
            <typeparam name="T">The Type of the data to deserialize</typeparam>
            <param name="filename">The name of the file</param>
            <returns>The deserialized object</returns>
        </member>
        <member name="M:LamestWebserver.Serialization.Serializer.ReadXmlDataInMemory``1(System.String)">
            <summary>
            Retrieves XML-Serialized data from a string.
            </summary>
            <typeparam name="T">The Type of the data to deserialize</typeparam>
            <param name="xml">The serialized object</param>
            <returns>The deserialized object</returns>
        </member>
        <member name="M:LamestWebserver.Serialization.Serializer.ReadXmlData(System.String,System.Type)">
            <summary>
            Retrieves XML-Serialized data from a file.
            </summary>
            <param name="filename">The name of the file</param>
            <param name="type">The Type of the data to deserialize</param>
            <returns>The deserialized object</returns>
        </member>
        <member name="M:LamestWebserver.Serialization.Serializer.ReadXmlDataInMemory(System.String,System.Type)">
            <summary>
            Retrieves XML-Serialized data from a string.
            </summary>
            <param name="xml">The serialized object</param>
            <param name="type">The Type of the data to deserialize</param>
            <returns>The deserialized object</returns>
        </member>
        <member name="M:LamestWebserver.Serialization.Serializer.WriteXmlData``1(``0,System.String)">
            <summary>
            Writes an Object to an XML-File.
            </summary>
            <typeparam name="T">The Type of the Object</typeparam>
            <param name="data">The Object</param>
            <param name="filename">The name of the file to write</param>
        </member>
        <member name="M:LamestWebserver.Serialization.Serializer.WriteXmlDataInMemory``1(``0)">
            <summary>
            Serializes an Object to an XML-string.
            </summary>
            <typeparam name="T">The Type of the Object</typeparam>
            <param name="data">The Object</param>
        </member>
        <member name="M:LamestWebserver.Serialization.Serializer.ReadJsonData``1(System.String)">
            <summary>
            Retrieves a JSON-Serialized object from a file.
            </summary>
            <typeparam name="T">The Type of the data to deserialize</typeparam>
            <param name="filename">The name of the file</param>
            <returns>The deserialized object</returns>
        </member>
        <member name="M:LamestWebserver.Serialization.Serializer.ReadJsonDataInMemory``1(System.String)">
            <summary>
            Retrieves JSON-Serialized data from a json string.
            </summary>
            <typeparam name="T">The Type of the data to deserialize</typeparam>
            <param name="json">The serialized Object</param>
            <returns>The deserialized object</returns>
        </member>
        <member name="M:LamestWebserver.Serialization.Serializer.ReadJsonData(System.String,System.Type)">
            <summary>
            Retrieves a JSON-Serialized object from a file.
            </summary>
            <param name="filename">The name of the file</param>
            <param name="type">The Type of the data to deserialize</param>
            <returns>The deserialized object</returns>
        </member>
        <member name="M:LamestWebserver.Serialization.Serializer.ReadJsonDataInMemory(System.String,System.Type)">
            <summary>
            Retrieves JSON-Serialized data from a json string.
            </summary>
            <param name="json">The serialized Object</param>
            <param name="type">The Type of the data to deserialize</param>
            <returns>The deserialized object</returns>
        </member>
        <member name="M:LamestWebserver.Serialization.Serializer.WriteJsonData``1(``0,System.String,System.Boolean)">
            <summary>
            Writes an Object to a JSON-File.
            </summary>
            <typeparam name="T">The Type of the Object</typeparam>
            <param name="data">The Object</param>
            <param name="filename">The name of the file to write</param>
            <param name="humanReadable">Shall the file contain linefeeds</param>
        </member>
        <member name="M:LamestWebserver.Serialization.Serializer.WriteJsonDataInMemory``1(``0,System.Boolean)">
            <summary>
            Writes an Object to a json string.
            </summary>
            <typeparam name="T">The Type of the Object</typeparam>
            <param name="data">The Object</param>
            <param name="humanReadable">Shall the file contain linefeeds</param>
        </member>
        <member name="M:LamestWebserver.Serialization.Serializer.WriteJsonData``1(``0,System.String)">
            <summary>
            Writes an Object to a JSON-File.
            </summary>
            <typeparam name="T">The Type of the Object</typeparam>
            <param name="data">The Object</param>
            <param name="filename">The name of the file to write</param>
        </member>
        <member name="M:LamestWebserver.Serialization.Serializer.WriteJsonDataInMemory``1(``0)">
            <summary>
            Writes an Object to a json string.
            </summary>
            <typeparam name="T">The Type of the Object</typeparam>
            <param name="data">The Object</param>
        </member>
        <member name="M:LamestWebserver.Serialization.Serializer.ReadBinaryData``1(System.String)">
            <summary>
            Retrieves Binary-Serialized data from a file.
            </summary>
            <typeparam name="T">The Type of the data to deserialize</typeparam>
            <param name="filename">The name of the file</param>
            <returns>The deserialized object</returns>
        </member>
        <member name="M:LamestWebserver.Serialization.Serializer.ReadBinaryDataInMemory``1(System.Byte[])">
            <summary>
            Retrieves Binary-Serialized data from a byte[].
            </summary>
            <typeparam name="T">The Type of the data to deserialize</typeparam>
            <param name="data">The serizalized object</param>
            <returns>The deserialized object</returns>
        </member>
        <member name="M:LamestWebserver.Serialization.Serializer.ReadBinaryData``1(System.String,System.Type)">
            <summary>
            Retrieves Binary-Serialized data from a file.
            </summary>
            <param name="filename">The name of the file</param>
            <param name="type">The Type of the data to deserialize</param>
            <returns>The deserialized object</returns>
        </member>
        <member name="M:LamestWebserver.Serialization.Serializer.ReadBinaryDataInMemory(System.Byte[],System.Type)">
            <summary>
            Retrieves Binary-Serialized data from a byte[].
            </summary>
            <param name="data">The serizalized object</param>
            <param name="type">The Type of the data to deserialize</param>
            <returns>The deserialized object</returns>
        </member>
        <member name="M:LamestWebserver.Serialization.Serializer.WriteBinaryData``1(``0,System.String)">
            <summary>
            Writes an Object to a Binary-File.
            </summary>
            <typeparam name="T">The Type of the Object</typeparam>
            <param name="data">The Object</param>
            <param name="filename">The name of the file to write</param>
        </member>
        <member name="M:LamestWebserver.Serialization.Serializer.WriteBinaryDataInMemory``1(``0)">
            <summary>
            Serializes an Object to a byte[].
            </summary>
            <typeparam name="T">The Type of the Object</typeparam>
            <param name="data">The Object</param>
        </member>
        <member name="T:LamestWebserver.Serialization.XmlSerializationTools">
            <summary>
            A class that contains a lot of XmlSerialization helpers
            </summary>
        </member>
        <member name="M:LamestWebserver.Serialization.XmlSerializationTools.GetXmlSerializer(System.Type)">
            <summary>
            Caches XMLSerializers to prevent MemoryLeaks.
            
            Source: http://codereview.stackexchange.com/questions/24861/caching-xmlserializer-in-appdomain &amp; https://msdn.microsoft.com/en-us/library/system.xml.serialization.xmlserializer(v=vs.110).aspx
            </summary>
            <param name="type">type parameter of the Serializer</param>
            <returns>An XML-Serializer created with the given type argument</returns>
        </member>
        <member name="M:LamestWebserver.Serialization.XmlSerializationTools.GetElementsNamed(System.Xml.XmlReader,System.String)">
            <summary>
            Source: http://stackoverflow.com/questions/2441673/reading-xml-with-xmlreader-in-c-sharp
            </summary>
            <param name="reader">the XMLReader</param>
            <param name="elementName">the name of the Element</param>
            <returns>All matching elements</returns>
        </member>
        <member name="M:LamestWebserver.Serialization.XmlSerializationTools.GetElementNamed(System.Xml.XmlReader,System.String)">
            <summary>
            Source: http://stackoverflow.com/questions/2441673/reading-xml-with-xmlreader-in-c-sharp
            </summary>
            <param name="reader">the XMLReader</param>
            <param name="elementName">the name of the Element</param>
            <returns>The first matching element</returns>
        </member>
        <member name="M:LamestWebserver.Serialization.XmlSerializationTools.WriteElement``1(System.Xml.XmlWriter,System.String,``0)">
            <summary>
            Writes an object to the xmlWriter
            </summary>
            <typeparam name="T">The type of the element</typeparam>
            <param name="writer">the current writer</param>
            <param name="name">the name of the object</param>
            <param name="value">the value of the object</param>
        </member>
        <member name="M:LamestWebserver.Serialization.XmlSerializationTools.ReadElement``1(System.Xml.XmlReader,System.String)">
            <summary>
            searches and reads an object from a xmlReader
            </summary>
            <typeparam name="T">The type of the element</typeparam>
            <param name="reader">the current reader</param>
            <param name="name">the name of the object</param>
        </member>
        <member name="M:LamestWebserver.Serialization.XmlSerializationTools.ReadElement(System.Xml.XmlReader,System.Type,System.String)">
            <summary>
            searches and reads an object from a xmlReader
            </summary>
            <param name="reader">the current reader</param>
            <param name="T">The type of the element</param>
            <param name="name">the name of the object</param>
        </member>
        <member name="M:LamestWebserver.Serialization.XmlSerializationTools.ReadLowerElement``1(System.Xml.XmlReader)">
            <summary>
            reads an object from a xmlReader
            </summary>
            <typeparam name="T">The type of the element</typeparam>
            <param name="reader">the current reader</param>
        </member>
        <member name="M:LamestWebserver.Serialization.XmlSerializationTools.ReadLowerElement(System.Xml.XmlReader,System.Type)">
            <summary>
            reads an object from a xmlReader
            </summary>
            <param name="reader">the current reader</param>
            <param name="T">The type of the element</param>
        </member>
        <member name="M:LamestWebserver.Serialization.XmlSerializationTools.ReadToEndElement(System.Xml.XmlReader,System.String)">
            <summary>
            Reads an XmlReader to a specified EndElement
            </summary>
            <param name="reader">the XmlReader</param>
            <param name="endElement">the name of the EndElement tag</param>
        </member>
        <member name="T:LamestWebserver.ServerCore">
            <summary>
            A ServerCore provides functionality for accepting Connections on a TCP port.
            </summary>
        </member>
        <member name="T:LamestWebserver.ServerCore.EThreadingType">
            <summary>
            Defines the handling of Server Threads.
            </summary>
        </member>
        <member name="F:LamestWebserver.ServerCore.EThreadingType.WorkerThreads">
            <summary>
            A fixed pool of threads will execute tasks.
            </summary>
        </member>
        <member name="F:LamestWebserver.ServerCore.EThreadingType.ThreadSpawner">
            <summary>
            Tasks will be launched as separate threads.
            </summary>
        </member>
        <member name="F:LamestWebserver.ServerCore.DefaultReadTimeout">
            <summary>
            The default time to wait until a NetworkStream is being closed because of a no data coming in.
            </summary>
        </member>
        <member name="F:LamestWebserver.ServerCore.ServerShutdownClientHandlerForceQuitTimeout">
            <summary>
            When stopping the Server the timeout to use before quiting the worker threads forcefully.
            </summary>
        </member>
        <member name="F:LamestWebserver.ServerCore.Port">
            <summary>
            The Port, the server is listening at.
            </summary>
        </member>
        <member name="F:LamestWebserver.ServerCore.ThreadingType">
            <summary>
            Defines the behavior of this Server when executing tasks.
            </summary>
        </member>
        <member name="M:LamestWebserver.ServerCore.#ctor(System.Int32)">
            <summary>
            Creates a new Server that is set-up to listen to a specified TCP port. Call `Start` to start the listener thread.
            </summary>
            <param name="port">The port to listen on.</param>
        </member>
        <member name="M:LamestWebserver.ServerCore.#ctor(System.Net.IPAddress,System.Int32,LamestWebserver.ServerCore.EThreadingType)">
            <summary>
            Creates a new Server that is set-up to listen to a specified TCP port on a specified IPAddress. Call `Start` to start the listener thread.
            </summary>
            <param name="localAddress">The local address to listen on.</param>
            <param name="port">The port to listen on.</param>
            <param name="threadingType">The threading behaviour of this server.</param>
        </member>
        <member name="M:LamestWebserver.ServerCore.Finalize">
            <inheritdoc />
        </member>
        <member name="M:LamestWebserver.ServerCore.Dispose">
            <inheritdoc />
        </member>
        <member name="M:LamestWebserver.ServerCore.Stop">
            <summary>
            Stops the Server from running.
            </summary>
        </member>
        <member name="M:LamestWebserver.ServerCore.Start">
            <summary>
            Starts the TCP Listener Thread.
            </summary>
        </member>
        <member name="M:LamestWebserver.ServerCore.HandleClient(System.Net.Sockets.TcpClient,System.Net.Sockets.NetworkStream)">
            <summary>
            Handles client interactions.
            </summary>
            <param name="tcpClient">The TcpClient of the client.</param>
            <param name="networkStream">The networkStream of the connection to the client.</param>
        </member>
        <member name="P:LamestWebserver.ServerCore.CurrentThreadStream">
            <summary>
            Gets or sets the current stream for the active thread.
            </summary>
        </member>
        <member name="M:LamestWebserver.ServerCore.TcpPortIsUnused(System.Int32)">
            <summary>
            Source: http://stackoverflow.com/questions/570098/in-c-how-to-check-if-a-tcp-port-is-available
            </summary>
            <param name="port">The TCP-Port to check for</param>
            <returns>true if unused</returns>
        </member>
        <member name="T:LamestWebserver.SessionData">
            <summary>
            Contains the current SessionData
            </summary>
        </member>
        <member name="F:LamestWebserver.SessionData.CurrentSession">
            <summary>
            contains the current session identificator for this thread
            </summary>
        </member>
        <member name="P:LamestWebserver.SessionData.UserName">
            <summary>
            The name of the current user (the sessionID handles this!) (the current user could by incognito due to a missing sessionID)
            </summary>
        </member>
        <member name="P:LamestWebserver.SessionData.KnownUser">
            <summary>
            Represents the state of the current viewer of the page - true if this user has a special hash
            </summary>
        </member>
        <member name="P:LamestWebserver.SessionData.Ssid">
            <summary>
            The SSID of the current Request
            </summary>
        </member>
        <member name="P:LamestWebserver.SessionData.RequestedFile">
            <summary>
            the currently requested file
            </summary>
        </member>
        <member name="P:LamestWebserver.SessionData.HttpHeadVariables">
            <summary>
            The Variables mentioned in the HTTP head (http://www.link.com/?IamAHeadVariable=IamTheCorrespondingValue)
            </summary>
        </member>
        <member name="P:LamestWebserver.SessionData.HttpPostVariables">
            <summary>
            The Variables mentinoed in the HTTP POST packet (they don't have to have values!)
            </summary>
        </member>
        <member name="M:LamestWebserver.SessionData.GetHttpHeadValue(System.String)">
            <summary>
            get the value of a HTTP HEAD variable by name. (null if not existent)
            </summary>
            <param name="name">The name of the HTTP HEAD variable</param>
            <returns>the value of the given HTTP HEAD variable (or null if not existent)</returns>
        </member>
        <member name="M:LamestWebserver.SessionData.GetHttpPostValue(System.String)">
            <summary>
            get the value of a HTTP POST variable by name. (null if not existent)
            </summary>
            <param name="name">The name of the HTTP POST variable</param>
            <returns>the value of the given HTTP POST variable (or null if not existent)</returns>
        </member>
        <member name="M:LamestWebserver.SessionData.GetVariable(System.String,LamestWebserver.EVariableScope)">
            <summary>
            Get the value of a variable defined at a certain scope by name
            </summary>
            <param name="name">name of the variable</param>
            <param name="scope">scope at which the variable is defined</param>
            <returns>returns the value of the variable (or null if not existent or exception if you really want to mess things up, dude!)</returns>
        </member>
        <member name="M:LamestWebserver.SessionData.GetVariable``1(System.String,LamestWebserver.EVariableScope)">
            <summary>
            Get the value of a variable defined at a certain scope by name
            </summary>
            <param name="name">name of the variable</param>
            <param name="scope">scope at which the variable is defined</param>
            <returns>returns the value of the variable (or null if not existent or exception if you really want to mess things up, dude!)</returns>
        </member>
        <member name="M:LamestWebserver.SessionData.SetVariable``1(System.String,``0,LamestWebserver.EVariableScope)">
            <summary>
            Set the value of a variable defined at a certain scope by name
            </summary>
            <typeparam name="T">The type of the value</typeparam>
            <param name="name">name of the variable</param>
            <param name="value">the value to set to the variable</param>
            <param name="scope">scope at which the variable is/will be defined</param>
        </member>
        <member name="M:LamestWebserver.SessionData.SetGlobalVariable``1(System.String,``0)">
            <summary>
            set the value of a variable saved globally (available from everywhere on this server)
            </summary>
            <typeparam name="T">The Type of the Value</typeparam>
            <param name="name">The name of the variable</param>
            <param name="value">The value of the variable</param>
        </member>
        <member name="M:LamestWebserver.SessionData.GetGlobalVariable(System.String)">
            <summary>
            get the value (or null if not existent) from the variables saved globally (available from everywhere on this server)
            </summary>
            <param name="name">the name of the variable</param>
            <returns>the value of the variable (or null if not existent)</returns>
        </member>
        <member name="M:LamestWebserver.SessionData.GetGlobalVariable``1(System.String)">
            <summary>
            get the value (or null if not existent) from the variables saved globally (available from everywhere on this server) and casts it to a specified Type T
            </summary>
            <typeparam name="T">The type T to cast the value to</typeparam>
            <param name="name">the name of the variable</param>
            <returns>the value of the variable (or null if not existent)</returns>
        </member>
        <member name="M:LamestWebserver.SessionData.SetUserFileVariable``1(System.String,``0)">
            <summary>
            set the value of a variable saved globally for the current _USER_AND_FILE_COMBINATION_
            </summary>
            <typeparam name="T">The Type of the Value</typeparam>
            <param name="name">The name of the variable</param>
            <param name="value">The value of the variable</param>
        </member>
        <member name="M:LamestWebserver.SessionData.GetUserFileVariable(System.String)">
            <summary>
            get the value (or null if not existent) from the variables saved globally for the current _USER_AND_FILE_COMBINATION_
            </summary>
            <param name="name">the name of the variable</param>
            <returns>the value of the variable (or null if not existent)</returns>
        </member>
        <member name="M:LamestWebserver.SessionData.GetUserFileVariable``1(System.String)">
            <summary>
            get the value (or null if not existent) from the variables saved globally for the current _USER_AND_FILE_COMBINATION_ and casts it to a specified Type T
            </summary>
            <typeparam name="T">The type T to cast the value to</typeparam>
            <param name="name">the name of the variable</param>
            <returns>the value of the variable (or null if not existent)</returns>
        </member>
        <member name="M:LamestWebserver.SessionData.SetUserVariable``1(System.String,``0)">
            <summary>
            set the value of a variable saved globally for the current _USER_
            </summary>
            <typeparam name="T">The Type of the Value</typeparam>
            <param name="name">The name of the variable</param>
            <param name="value">The value of the variable</param>
        </member>
        <member name="M:LamestWebserver.SessionData.GetUserVariable(System.String)">
            <summary>
            get the value (or null if not existent) from the variables saved globally for the current _USER_
            </summary>
            <param name="name">the name of the variable</param>
            <returns>the value of the variable (or null if not existent)</returns>
        </member>
        <member name="M:LamestWebserver.SessionData.GetUserVariable``1(System.String)">
            <summary>
            get the value (or null if not existent) from the variables saved globally for the current _USER_ and casts it to a specified Type T
            </summary>
            <typeparam name="T">The type T to cast the value to</typeparam>
            <param name="name">the name of the variable</param>
            <returns>the value of the variable (or null if not existent)</returns>
        </member>
        <member name="M:LamestWebserver.SessionData.SetFileVariable``1(System.String,``0)">
            <summary>
            set the value of a variable saved globally for the current _FILE_
            </summary>
            <typeparam name="T">The Type of the Value</typeparam>
            <param name="name">The name of the variable</param>
            <param name="value">The value of the variable</param>
        </member>
        <member name="M:LamestWebserver.SessionData.GetFileVariable(System.String)">
            <summary>
            get the value (or null if not existent) from the variables saved globally for the current _FILE_
            </summary>
            <param name="name">the name of the variable</param>
            <returns>the value of the variable (or null if not existent)</returns>
        </member>
        <member name="M:LamestWebserver.SessionData.GetFileVariable``1(System.String)">
            <summary>
            get the value (or null if not existent) from the variables saved globally for the current _FILE_ and casts it to a specified Type T
            </summary>
            <typeparam name="T">The type T to cast the value to</typeparam>
            <param name="name">the name of the variable</param>
            <returns>the value of the variable (or null if not existent)</returns>
        </member>
        <member name="M:LamestWebserver.SessionData.UserExists(System.String)">
            <summary>
            Tells if a user has ever been registered with the given name
            </summary>
            <param name="userName">the name of the user</param>
            <returns>true if the user has ever existed</returns>
        </member>
        <member name="M:LamestWebserver.SessionData.GetGlobalVariables">
            <summary>
            Retrieves a collection of all global variables.
            </summary>
            <returns>a collection of all global variables.</returns>
        </member>
        <member name="M:LamestWebserver.SessionData.GetUserPerFileVariables">
            <summary>
            Retrieves a collection of the per file user variables.
            </summary>
            <returns>a collection of the per file user variables.</returns>
        </member>
        <member name="M:LamestWebserver.SessionData.GetPerFileVariables">
            <summary>
            Retrieves a collection of the per file variables.
            </summary>
            <returns>a collection of the per file user variables.</returns>
        </member>
        <member name="T:LamestWebserver.EVariableScope">
            <summary>
            contains all available scopes for variables
            </summary>
        </member>
        <member name="F:LamestWebserver.EVariableScope.File">
            <summary>
            available for all visitors of this page
            </summary>
        </member>
        <member name="F:LamestWebserver.EVariableScope.User">
            <summary>
            Available globally for this USER
            </summary>
        </member>
        <member name="F:LamestWebserver.EVariableScope.FileAndUser">
            <summary>
            Available for the current User on only this page
            </summary>
        </member>
        <member name="F:LamestWebserver.EVariableScope.Global">
            <summary>
            Available for all Users on any page
            </summary>
        </member>
        <member name="T:LamestWebserver.SessionIdentificatorSlim">
            <summary>
            A slim variant of SessionData used in WebSockets
            </summary>
        </member>
        <member name="T:LamestWebserver.Compression.GZipCompression">
            <summary>
            Includes Methods for GZip Compressing and Decompressing.
            </summary>
        </member>
        <member name="M:LamestWebserver.Compression.GZipCompression.CompressString(System.String,System.IO.Compression.CompressionLevel)">
            <summary>
            Compresses a string by UTF8-Encoding it and Compressing the bytes
            </summary>
            <param name="data">the string to compress</param>
            <param name="compressionLevel">the level of compression</param>
            <returns>the compressed data as byte[]</returns>
        </member>
        <member name="M:LamestWebserver.Compression.GZipCompression.Compress(System.Byte[],System.IO.Compression.CompressionLevel)">
            <summary>
            Compresses a byte[]
            </summary>
            <param name="data">the byte[] to compress</param>
            <param name="compressionLevel">the level of compression</param>
            <returns>the compressed data as byte[]</returns>
        </member>
        <member name="M:LamestWebserver.Compression.GZipCompression.DecompressString(System.Byte[])">
            <summary>
            Decompressed a byte array and encodes the results in UTF-8
            </summary>
            <param name="data">the bytes to decompress</param>
            <returns>the resulting string</returns>
        </member>
        <member name="M:LamestWebserver.Compression.GZipCompression.Decompress(System.Byte[])">
            <summary>
            Decompressed a byte array
            </summary>
            <param name="data">the bytes to decompress</param>
            <returns>the resulting byte[]</returns>
        </member>
        <member name="T:LamestWebserver.JScriptBuilder.JSElement">
            <summary>
            A JavaScript powered HTML-Element
            </summary>
        </member>
        <member name="F:LamestWebserver.JScriptBuilder.JSElement.DescriptionTags">
            <summary>
            Additional Attributes added to the Element
            </summary>
        </member>
        <member name="M:LamestWebserver.JScriptBuilder.JSElement.#ctor">
            <summary>
            Constructs a new JSElement and sets it's ID to a HashValue
            </summary>
        </member>
        <member name="P:LamestWebserver.JScriptBuilder.JSElement.Body">
            <summary>
            Retrieves the Body of the currentDocument
            </summary>
        </member>
        <member name="M:LamestWebserver.JScriptBuilder.JSElement.CreateNew">
            <summary>
            Inserts this Element into the document body.
            </summary>
            <returns>A piece of JavaScript code</returns>
        </member>
        <member name="M:LamestWebserver.JScriptBuilder.JSElement.CreateNew(System.String)">
            <summary>
            Inserts this Element into an Element with the specified ID.
            </summary>
            <param name="intoID">the ID of the Element</param>
            <returns>A piece of JavaScript code</returns>
        </member>
        <member name="M:LamestWebserver.JScriptBuilder.JSElement.GetJsCode(LamestWebserver.SessionData,LamestWebserver.JScriptBuilder.CallingContext)">
            <inheritdoc />
        </member>
        <member name="M:LamestWebserver.JScriptBuilder.JSElement.GetDefaultAttributes">
            <summary>
            Retrieves the default attributes for a HTML element
            </summary>
            <returns>the attributes as string</returns>
        </member>
        <member name="M:LamestWebserver.JScriptBuilder.JSElement.GetContent(LamestWebserver.SessionData,LamestWebserver.JScriptBuilder.CallingContext)">
            <summary>
            Retrieves the HTML-Text of this Element
            </summary>
            <param name="sessionData">the current sessionData</param>
            <param name="context">the current CallingContext</param>
            <returns></returns>
        </member>
        <member name="M:LamestWebserver.JScriptBuilder.JSElement.GetContent(LamestWebserver.SessionData)">
            <inheritdoc />
        </member>
        <member name="M:LamestWebserver.JScriptBuilder.JSElement.GetByID(System.String)">
            <summary>
            Retrieves
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="T:LamestWebserver.JScriptBuilder.JSPlainText">
            <summary>
            Just a wrapper to put the text given in the constructor into the final document
            </summary>
        </member>
        <member name="F:LamestWebserver.JScriptBuilder.JSPlainText.Contents">
            <summary>
            The text add to the final output
            </summary>
        </member>
        <member name="M:LamestWebserver.JScriptBuilder.JSPlainText.#ctor(System.String)">
            <summary>
            Creates a pseudo element containing the given contents
            </summary>
            <param name="Contents">the contents to add to the final output</param>
        </member>
        <member name="M:LamestWebserver.JScriptBuilder.JSPlainText.GetContent(LamestWebserver.SessionData,LamestWebserver.JScriptBuilder.CallingContext)">
            <inheritdoc />
        </member>
        <member name="T:LamestWebserver.JScriptBuilder.JSMsgBox">
            <summary>
            A simple MessageBox
            </summary>
        </member>
        <member name="M:LamestWebserver.JScriptBuilder.JSMsgBox.#ctor(System.Boolean,LamestWebserver.JScriptBuilder.JSElement[])">
            <summary>
            Constructs a new MessageBox
            </summary>
            <param name="hasExitButton">Should there be an Exit-Button?</param>
            <param name="elements">The contained elements</param>
        </member>
        <member name="M:LamestWebserver.JScriptBuilder.JSMsgBox.#ctor(LamestWebserver.JScriptBuilder.JSElement[])">
            <summary>
            Constructs a new MessageBox
            </summary>
            <param name="elements">The contained elements</param>
        </member>
        <member name="M:LamestWebserver.JScriptBuilder.JSMsgBox.GetContent(LamestWebserver.SessionData,LamestWebserver.JScriptBuilder.CallingContext)">
            <inheritdoc />
        </member>
        <member name="F:LamestWebserver.JScriptBuilder.JSMsgBox.GlobalID">
            <summary>
            The Id of the MessageBox Background
            </summary>
        </member>
        <member name="F:LamestWebserver.JScriptBuilder.JSMsgBox.GlobalInnerID">
            <summary>
            The Id of the MessageBox Foreground
            </summary>
        </member>
        <member name="T:LamestWebserver.JScriptBuilder.JSButton">
            <summary>
            A HTML Button Element
            </summary>
        </member>
        <member name="F:LamestWebserver.JScriptBuilder.JSButton.buttonType">
            <summary>
            The type of the button
            </summary>
        </member>
        <member name="F:LamestWebserver.JScriptBuilder.JSButton.buttonText">
            <summary>
            The text displayed on the button
            </summary>
        </member>
        <member name="M:LamestWebserver.JScriptBuilder.JSButton.#ctor(System.String,LamestWebserver.UI.HButton.EButtonType)">
            <summary>
            Constructs a new JSButton element
            </summary>
            <param name="buttonText">the text displayed on the button</param>
            <param name="buttonType">the type of the button</param>
        </member>
        <member name="M:LamestWebserver.JScriptBuilder.JSButton.GetContent(LamestWebserver.SessionData,LamestWebserver.JScriptBuilder.CallingContext)">
            <inheritdoc />
        </member>
        <member name="T:LamestWebserver.JScriptBuilder.JSText">
            <summary>
            A HTML Text Element
            </summary>
        </member>
        <member name="M:LamestWebserver.JScriptBuilder.JSText.#ctor(System.String)">
            <summary>
            Constructs a new JSText element with the given content
            </summary>
            <param name="content">the content of the Text-Element</param>
        </member>
        <member name="M:LamestWebserver.JScriptBuilder.JSText.GetContent(LamestWebserver.SessionData,LamestWebserver.JScriptBuilder.CallingContext)">
            <inheritdoc />
        </member>
        <member name="T:LamestWebserver.JScriptBuilder.JSInput">
            <summary>
            A HTML Input Element
            </summary>
        </member>
        <member name="F:LamestWebserver.JScriptBuilder.JSInput.inputType">
            <summary>
            The inputType of this Element
            </summary>
        </member>
        <member name="F:LamestWebserver.JScriptBuilder.JSInput.Value">
            <summary>
            The Value of this Element
            </summary>
        </member>
        <member name="M:LamestWebserver.JScriptBuilder.JSInput.#ctor(LamestWebserver.UI.HInput.EInputType,System.String,System.String)">
            <summary>
            Constructs a new JSInput Element
            </summary>
            <param name="type">the type of the element</param>
            <param name="name">the name of the element</param>
            <param name="value">the value of the element</param>
        </member>
        <member name="M:LamestWebserver.JScriptBuilder.JSInput.GetContent(LamestWebserver.SessionData,LamestWebserver.JScriptBuilder.CallingContext)">
            <inheritdoc />
        </member>
        <member name="M:LamestWebserver.JScriptBuilder.JSInput.SendNameValueAsync(System.String)">
            <summary>
            Sends this elements name and value to a remote server.
            </summary>
            <param name="URL">the event to reach</param>
        </member>
        <member name="M:LamestWebserver.JScriptBuilder.JSInput.GetInnerValue">
            <summary>
            Retrieves a JSValue containing the "value" property of this input element.
            </summary>
            <returns>The value of this element.</returns>
        </member>
        <member name="M:LamestWebserver.JScriptBuilder.JSInput.SetInnerHTMLWithNameValueAsync(LamestWebserver.JScriptBuilder.IJSValue,System.String,LamestWebserver.JScriptBuilder.IJSPiece[])">
            <summary>
            Sends this elements name and value to a remote server and sets the response as InnerHtml of a HTML element.
            </summary>
            <param name="element">the element which innerHTML you want to override</param>
            <param name="URL">the event to reach</param>
            <param name="executeOnComplete">the code to execute when the task has been completed</param>
        </member>
        <member name="T:LamestWebserver.JScriptBuilder.JSTextArea">
            <summary>
            A HTML Text-Area Element
            </summary>
        </member>
        <member name="F:LamestWebserver.JScriptBuilder.JSTextArea.cols">
            <summary>
            The Columns displayed
            </summary>
        </member>
        <member name="F:LamestWebserver.JScriptBuilder.JSTextArea.rows">
            <summary>
            The Rows displayed
            </summary>
        </member>
        <member name="M:LamestWebserver.JScriptBuilder.JSTextArea.#ctor(System.String,System.String,System.Nullable{System.UInt32},System.Nullable{System.UInt32})">
            <summary>
            Constructs a new JSTextArea
            </summary>
            <param name="name">the name</param>
            <param name="value">the default value</param>
            <param name="cols">the columns displayed</param>
            <param name="rows">the rows displayed</param>
        </member>
        <member name="M:LamestWebserver.JScriptBuilder.JSTextArea.GetContent(LamestWebserver.SessionData,LamestWebserver.JScriptBuilder.CallingContext)">
            <inheritdoc />
        </member>
        <member name="T:LamestWebserver.JScriptBuilder.JSDropDownMenu">
            <summary>
            A HTML Drop-Down-Menu Element
            </summary>
        </member>
        <member name="F:LamestWebserver.JScriptBuilder.JSDropDownMenu.size">
            <summary>
            The amount of entries displayed if not expanded
            </summary>
        </member>
        <member name="F:LamestWebserver.JScriptBuilder.JSDropDownMenu.multipleSelectable">
            <summary>
            does the dropdownmenu allow multiple selections?
            </summary>
        </member>
        <member name="F:LamestWebserver.JScriptBuilder.JSDropDownMenu.disabled">
            <summary>
            is the dropdownmenu disabled for the user?
            </summary>
        </member>
        <member name="F:LamestWebserver.JScriptBuilder.JSDropDownMenu.selectedIndexes">
            <summary>
            the selectedIndexes
            </summary>
        </member>
        <member name="M:LamestWebserver.JScriptBuilder.JSDropDownMenu.#ctor(System.String,System.Int32,System.Boolean,System.Tuple{System.String,System.String}[])">
            <summary>
            Constructs a new DropDownMenu element
            </summary>
            <param name="name">the name of the element (for forms)</param>
            <param name="size">The amount of entries displayed if not expanded</param>
            <param name="multipleSelectable">does the dropdownmenu allow multiple selections?</param>
            <param name="TextValuePairsToDisplay">All possibly selectable items as a tuple (Text displayed for the user, Value presented to form)</param>
        </member>
        <member name="M:LamestWebserver.JScriptBuilder.JSDropDownMenu.#ctor(System.String,System.Tuple{System.String,System.String}[])">
            <summary>
            Constructs a new DropDownMenu element
            </summary>
            <param name="name">the name of the element (for forms)</param>
            <param name="TextValuePairsToDisplay">All possibly selectable items as a tuple (Text displayed for the user, Value presented to form)</param>
        </member>
        <member name="M:LamestWebserver.JScriptBuilder.JSDropDownMenu.SelectByValue(System.String)">
            <summary>
            Selects an item based on the value given to it.
            Unselects everything else if !multipleSelectable.
            DOES NOT THROW AN EXCEPTION IF NO MATCHING INDEX HAS BEEN FOUND!
            </summary>
            <param name="value">the value to look for</param>
            <returns>this element for inline use.</returns>
        </member>
        <member name="M:LamestWebserver.JScriptBuilder.JSDropDownMenu.SelectByText(System.String)">
            <summary>
            Selects an item based on the text given to it.
            Unselects everything else if !multipleSelectable.
            DOES NOT THROW AN EXCEPTION IF NO MATCHING INDEX HAS BEEN FOUND!
            </summary>
            <param name="text">the text to look for</param>
            <returns>this element for inline use.</returns>
        </member>
        <member name="M:LamestWebserver.JScriptBuilder.JSDropDownMenu.GetContent(LamestWebserver.SessionData,LamestWebserver.JScriptBuilder.CallingContext)">
            <inheritdoc />
        </member>
        <member name="M:LamestWebserver.JScriptBuilder.JSDropDownMenu.SendNameValueAsync(System.String)">
            <summary>
            Sends this elements name and value to a remote server.
            </summary>
            <param name="URL">the event to reach</param>
        </member>
        <member name="M:LamestWebserver.JScriptBuilder.JSDropDownMenu.SetInnerHTMLWithNameValueAsync(LamestWebserver.JScriptBuilder.IJSValue,System.String,LamestWebserver.JScriptBuilder.IJSPiece[])">
            <summary>
            Sends this elements name and value to a remote server and sets the response as InnerHtml of a HTML element.
            </summary>
            <param name="element">the element which innerHTML you want to override</param>
            <param name="URL">the event to reach</param>
            <param name="executeOnComplete">code to execute when the action is done</param>
        </member>
        <member name="T:LamestWebserver.JScriptBuilder.JSInteractableElement">
            <summary>
            See: http://www.w3schools.com/jsref/dom_obj_event.asp
            </summary>
        </member>
        <member name="M:LamestWebserver.JScriptBuilder.JSInteractableElement.GetContent(LamestWebserver.SessionData,LamestWebserver.JScriptBuilder.CallingContext)">
            <inheritdoc />
        </member>
        <member name="F:LamestWebserver.JScriptBuilder.JSInteractableElement.onclick">
            <summary>
            The event occurs when the user clicks on an element
            </summary>
        </member>
        <member name="F:LamestWebserver.JScriptBuilder.JSInteractableElement.oncontextmenu">
            <summary>
            The event occurs when the user right-clicks on an element to open a context menu
            </summary>
        </member>
        <member name="F:LamestWebserver.JScriptBuilder.JSInteractableElement.ondblclick">
            <summary>
            The event occurs when the user double-clicks on an element
            </summary>
        </member>
        <member name="F:LamestWebserver.JScriptBuilder.JSInteractableElement.onmousedown">
            <summary>
            The event occurs when the user presses a mouse button over an element
            </summary>
        </member>
        <member name="F:LamestWebserver.JScriptBuilder.JSInteractableElement.onmouseenter">
            <summary>
            The event occurs when the pointer is moved onto an element
            </summary>
        </member>
        <member name="F:LamestWebserver.JScriptBuilder.JSInteractableElement.onmouseleave">
            <summary>
            The event occurs when the pointer is moved out of an element
            </summary>
        </member>
        <member name="F:LamestWebserver.JScriptBuilder.JSInteractableElement.onmousemove">
            <summary>
            The event occurs when the pointer is moving while it is over an element
            </summary>
        </member>
        <member name="F:LamestWebserver.JScriptBuilder.JSInteractableElement.onmouseover">
            <summary>
            The event occurs when the pointer is moved onto an element, or onto one of its children
            </summary>
        </member>
        <member name="F:LamestWebserver.JScriptBuilder.JSInteractableElement.onmouseout">
            <summary>
            The event occurs when a user moves the mouse pointer out of an element, or out of one of its children
            </summary>
        </member>
        <member name="F:LamestWebserver.JScriptBuilder.JSInteractableElement.onmouseup">
            <summary>
            The event occurs when a user releases a mouse button over an element
            </summary>
        </member>
        <member name="F:LamestWebserver.JScriptBuilder.JSInteractableElement.onkeydown">
            <summary>
            The event occurs when the user is pressing a key
            </summary>
        </member>
        <member name="F:LamestWebserver.JScriptBuilder.JSInteractableElement.onkeypress">
            <summary>
            The event occurs when the user presses a key
            </summary>
        </member>
        <member name="F:LamestWebserver.JScriptBuilder.JSInteractableElement.onkeyup">
            <summary>
            The event occurs when the user releases a key
            </summary>
        </member>
        <member name="F:LamestWebserver.JScriptBuilder.JSInteractableElement.onabort">
            <summary>
            The event occurs when the loading of a resource has been aborted
            The event occurs when the loading of a media is aborted
            </summary>
        </member>
        <member name="F:LamestWebserver.JScriptBuilder.JSInteractableElement.onbeforeunload">
            <summary>
            The event occurs before the document is about to be unloaded
            </summary>
        </member>
        <member name="F:LamestWebserver.JScriptBuilder.JSInteractableElement.onerror">
            <summary>
            The event occurs when an error occurs while loading an external file
            The event occurs when an error occurred during the loading of a media file
            The event occurs when an error occurs with the event source
            </summary>
        </member>
        <member name="F:LamestWebserver.JScriptBuilder.JSInteractableElement.onhashchange">
            <summary>
            The event occurs when there has been changes to the anchor part of a URL
            </summary>
        </member>
        <member name="F:LamestWebserver.JScriptBuilder.JSInteractableElement.onload">
            <summary>
            The event occurs when an object has loaded
            </summary>
        </member>
        <member name="F:LamestWebserver.JScriptBuilder.JSInteractableElement.onpageshow">
            <summary>
            The event occurs when the user navigates to a webpage
            </summary>
        </member>
        <member name="F:LamestWebserver.JScriptBuilder.JSInteractableElement.onpagehide">
            <summary>
            The event occurs when the user navigates away from a webpage
            </summary>
        </member>
        <member name="F:LamestWebserver.JScriptBuilder.JSInteractableElement.onresize">
            <summary>
            The event occurs when the document view is resized
            </summary>
        </member>
        <member name="F:LamestWebserver.JScriptBuilder.JSInteractableElement.onscroll">
            <summary>
            The event occurs when an element's scrollbar is being scrolled
            </summary>
        </member>
        <member name="F:LamestWebserver.JScriptBuilder.JSInteractableElement.onunload">
            <summary>
            The event occurs once a page has unloaded (for body)
            </summary>
        </member>
        <member name="F:LamestWebserver.JScriptBuilder.JSInteractableElement.onblur">
            <summary>
            The event occurs when an element loses focus
            </summary>
        </member>
        <member name="F:LamestWebserver.JScriptBuilder.JSInteractableElement.onchange">
            <summary>
            The event occurs when the content of a form element, the selection, or the checked state have changed (for input, keygen, select, and textarea)
            </summary>
        </member>
        <member name="F:LamestWebserver.JScriptBuilder.JSInteractableElement.onfocus">
            <summary>
            The event occurs when an element gets focus
            </summary>
        </member>
        <member name="F:LamestWebserver.JScriptBuilder.JSInteractableElement.onfocusin">
            <summary>
            The event occurs when an element is about to get focus
            </summary>
        </member>
        <member name="F:LamestWebserver.JScriptBuilder.JSInteractableElement.onfocusout">
            <summary>
            The event occurs when an element is about to lose focus
            </summary>
        </member>
        <member name="F:LamestWebserver.JScriptBuilder.JSInteractableElement.oninput">
            <summary>
            The event occurs when an element gets user input
            </summary>
        </member>
        <member name="F:LamestWebserver.JScriptBuilder.JSInteractableElement.oninvalid">
            <summary>
            The event occurs when an element is invalid
            </summary>
        </member>
        <member name="F:LamestWebserver.JScriptBuilder.JSInteractableElement.onreset">
            <summary>
            The event occurs when a form is reset
            </summary>
        </member>
        <member name="F:LamestWebserver.JScriptBuilder.JSInteractableElement.onsearch">
            <summary>
            The event occurs when the user writes something in a search field (for input="search")
            </summary>
        </member>
        <member name="F:LamestWebserver.JScriptBuilder.JSInteractableElement.onselect">
            <summary>
            The event occurs after the user selects some text (for input and textarea)
            </summary>
        </member>
        <member name="F:LamestWebserver.JScriptBuilder.JSInteractableElement.onsubmit">
            <summary>
            The event occurs when a form is submitted
            </summary>
        </member>
        <member name="F:LamestWebserver.JScriptBuilder.JSInteractableElement.ondrag">
            <summary>
            The event occurs when an element is being dragged
            </summary>
        </member>
        <member name="F:LamestWebserver.JScriptBuilder.JSInteractableElement.ondragend">
            <summary>
            The event occurs when the user has finished dragging an element
            </summary>
        </member>
        <member name="F:LamestWebserver.JScriptBuilder.JSInteractableElement.ondragenter">
            <summary>
            The event occurs when the dragged element enters the drop target
            </summary>
        </member>
        <member name="F:LamestWebserver.JScriptBuilder.JSInteractableElement.ondragleave">
            <summary>
            The event occurs when the dragged element leaves the drop target
            </summary>
        </member>
        <member name="F:LamestWebserver.JScriptBuilder.JSInteractableElement.ondragover">
            <summary>
            The event occurs when the dragged element is over the drop target
            </summary>
        </member>
        <member name="F:LamestWebserver.JScriptBuilder.JSInteractableElement.ondragstart">
            <summary>
            The event occurs when the user starts to drag an element
            </summary>
        </member>
        <member name="F:LamestWebserver.JScriptBuilder.JSInteractableElement.ondrop">
            <summary>
            The event occurs when the dragged element is dropped on the drop target
            </summary>
        </member>
        <member name="F:LamestWebserver.JScriptBuilder.JSInteractableElement.oncopy">
            <summary>
            The event occurs when the user copies the content of an element
            </summary>
        </member>
        <member name="F:LamestWebserver.JScriptBuilder.JSInteractableElement.oncut">
            <summary>
            The event occurs when the user cuts the content of an element
            </summary>
        </member>
        <member name="F:LamestWebserver.JScriptBuilder.JSInteractableElement.onpaste">
            <summary>
            The event occurs when the user pastes some content in an element
            </summary>
        </member>
        <member name="F:LamestWebserver.JScriptBuilder.JSInteractableElement.onafterprint">
            <summary>
            The event occurs when a page has started printing, or if the print dialogue box has been closed
            </summary>
        </member>
        <member name="F:LamestWebserver.JScriptBuilder.JSInteractableElement.onbeforeprint">
            <summary>
            The event occurs when a page is about to be printed
            </summary>
        </member>
        <member name="F:LamestWebserver.JScriptBuilder.JSInteractableElement.oncanplay">
            <summary>
            The event occurs when the browser can start playing the media (when it has buffered enough to begin)
            </summary>
        </member>
        <member name="F:LamestWebserver.JScriptBuilder.JSInteractableElement.oncanplaythrough">
            <summary>
            The event occurs when the browser can play through the media without stopping for buffering
            </summary>
        </member>
        <member name="F:LamestWebserver.JScriptBuilder.JSInteractableElement.ondurationchange">
            <summary>
            The event occurs when the duration of the media is changed
            </summary>
        </member>
        <member name="F:LamestWebserver.JScriptBuilder.JSInteractableElement.onemptied">
            <summary>
            The event occurs when something bad happens and the media file is suddenly unavailable (like unexpectedly disconnects)
            </summary>
        </member>
        <member name="F:LamestWebserver.JScriptBuilder.JSInteractableElement.onended">
            <summary>
            The event occurs when the media has reach the end (useful for messages like "thanks for listening")
            </summary>
        </member>
        <member name="F:LamestWebserver.JScriptBuilder.JSInteractableElement.onloadeddata">
            <summary>
            The event occurs when media data is loaded
            </summary>
        </member>
        <member name="F:LamestWebserver.JScriptBuilder.JSInteractableElement.onloadedmetadata">
            <summary>
            The event occurs when meta data (like dimensions and duration) are loaded
            </summary>
        </member>
        <member name="F:LamestWebserver.JScriptBuilder.JSInteractableElement.onloadstart">
            <summary>
            The event occurs when the browser starts looking for the specified media
            </summary>
        </member>
        <member name="F:LamestWebserver.JScriptBuilder.JSInteractableElement.onpause">
            <summary>
            The event occurs when the media is paused either by the user or programmatically
            </summary>
        </member>
        <member name="F:LamestWebserver.JScriptBuilder.JSInteractableElement.onplay">
            <summary>
            The event occurs when the media has been started or is no longer paused
            </summary>
        </member>
        <member name="F:LamestWebserver.JScriptBuilder.JSInteractableElement.onplaying">
            <summary>
            The event occurs when the media is playing after having been paused or stopped for buffering
            </summary>
        </member>
        <member name="F:LamestWebserver.JScriptBuilder.JSInteractableElement.onprogress">
            <summary>
            The event occurs when the browser is in the process of getting the media data (downloading the media)
            </summary>
        </member>
        <member name="F:LamestWebserver.JScriptBuilder.JSInteractableElement.onratechange">
            <summary>
            The event occurs when the playing speed of the media is changed
            </summary>
        </member>
        <member name="F:LamestWebserver.JScriptBuilder.JSInteractableElement.onseeked">
            <summary>
            The event occurs when the user is finished moving/skipping to a new position in the media
            </summary>
        </member>
        <member name="F:LamestWebserver.JScriptBuilder.JSInteractableElement.onseeking">
            <summary>
            The event occurs when the user starts moving/skipping to a new position in the media
            </summary>
        </member>
        <member name="F:LamestWebserver.JScriptBuilder.JSInteractableElement.onstalled">
            <summary>
            The event occurs when the browser is trying to get media data, but data is not available
            </summary>
        </member>
        <member name="F:LamestWebserver.JScriptBuilder.JSInteractableElement.onsuspend">
            <summary>
            The event occurs when the browser is intentionally not getting media data
            </summary>
        </member>
        <member name="F:LamestWebserver.JScriptBuilder.JSInteractableElement.ontimeupdate">
            <summary>
            The event occurs when the playing position has changed (like when the user fast forwards to a different point in the media)
            </summary>
        </member>
        <member name="F:LamestWebserver.JScriptBuilder.JSInteractableElement.onvolumechange">
            <summary>
            The event occurs when the volume of the media has changed (includes setting the volume to "mute")
            </summary>
        </member>
        <member name="F:LamestWebserver.JScriptBuilder.JSInteractableElement.onwaiting">
            <summary>
            The event occurs when the media has paused but is expected to resume (like when the media pauses to buffer more data)
            </summary>
        </member>
        <member name="F:LamestWebserver.JScriptBuilder.JSInteractableElement.animationend">
            <summary>
            The event occurs when a CSS animation has completed
            </summary>
        </member>
        <member name="F:LamestWebserver.JScriptBuilder.JSInteractableElement.animationiteration">
            <summary>
            The event occurs when a CSS animation is repeated
            </summary>
        </member>
        <member name="F:LamestWebserver.JScriptBuilder.JSInteractableElement.animationstart">
            <summary>
            The event occurs when a CSS animation has started
            </summary>
        </member>
        <member name="F:LamestWebserver.JScriptBuilder.JSInteractableElement.transitionend">
            <summary>
            The event occurs when a CSS transition has completed
            </summary>
        </member>
        <member name="F:LamestWebserver.JScriptBuilder.JSInteractableElement.onmessage">
            <summary>
            The event occurs when a message is received through the event source
            </summary>
        </member>
        <member name="F:LamestWebserver.JScriptBuilder.JSInteractableElement.onopen">
            <summary>
            The event occurs when a connection with the event source is opened
            The event occurs when a message is received through or from an object (WebSocket, Web Worker, Event Source or a child frame or a parent window)
            </summary>
        </member>
        <member name="F:LamestWebserver.JScriptBuilder.JSInteractableElement.onmousewheel">
            <summary>
            Deprecated. Use the onwheel event instead
            </summary>
        </member>
        <member name="F:LamestWebserver.JScriptBuilder.JSInteractableElement.ononline">
            <summary>
            The event occurs when the browser starts to work online
            </summary>
        </member>
        <member name="F:LamestWebserver.JScriptBuilder.JSInteractableElement.onoffline">
            <summary>
            The event occurs when the browser starts to work offline
            </summary>
        </member>
        <member name="F:LamestWebserver.JScriptBuilder.JSInteractableElement.onpopstate">
            <summary>
            The event occurs when the window's history changes
            </summary>
        </member>
        <member name="F:LamestWebserver.JScriptBuilder.JSInteractableElement.onshow">
            <summary>
            The event occurs when a menu element is shown as a context menu
            </summary>
        </member>
        <member name="F:LamestWebserver.JScriptBuilder.JSInteractableElement.onstorage">
            <summary>
            The event occurs when a Web Storage area is updated
            </summary>
        </member>
        <member name="F:LamestWebserver.JScriptBuilder.JSInteractableElement.ontoggle">
            <summary>
            The event occurs when the user opens or closes the details element
            </summary>
        </member>
        <member name="F:LamestWebserver.JScriptBuilder.JSInteractableElement.onwheel">
            <summary>
            The event occurs when the mouse wheel rolls up or down over an element
            </summary>
        </member>
        <member name="F:LamestWebserver.JScriptBuilder.JSInteractableElement.ontouchcancel">
            <summary>
            The event occurs when the touch is interrupted
            </summary>
        </member>
        <member name="F:LamestWebserver.JScriptBuilder.JSInteractableElement.ontouchend">
            <summary>
            The event occurs when a finger is removed from a touch screen
            </summary>
        </member>
        <member name="F:LamestWebserver.JScriptBuilder.JSInteractableElement.ontouchmove">
            <summary>
            The event occurs when a finger is dragged across the screen
            </summary>
        </member>
        <member name="F:LamestWebserver.JScriptBuilder.JSInteractableElement.ontouchstart">
            <summary>
            The event occurs when a finger is placed on a touch screen
            </summary>
        </member>
        <member name="M:LamestWebserver.JScriptBuilder.JSInteractableElement.GetEventAttributes(LamestWebserver.SessionData,LamestWebserver.JScriptBuilder.CallingContext)">
            <summary>
            gets all event attributes for the given object
            </summary>
            <param name="sessionData">the sessionData</param>
            <param name="context">the current Calling Context</param>
            <returns>the event attributes as string</returns>
        </member>
        <member name="T:LamestWebserver.JScriptBuilder.JSAnimation">
            <summary>
            Contains basic functionality for Animating Elements
            </summary>
        </member>
        <member name="T:LamestWebserver.JScriptBuilder.JSAnimation.JSAnimationType">
            <summary>
            Various types of animation types
            </summary>
        </member>
        <member name="F:LamestWebserver.JScriptBuilder.JSAnimation.JSAnimationType.Linear">
            <summary>
            linear function - constant speed
            </summary>
        </member>
        <member name="F:LamestWebserver.JScriptBuilder.JSAnimation.JSAnimationType.Differencial">
            <summary>
            Differencial function - decreasing speed
            </summary>
        </member>
        <member name="F:LamestWebserver.JScriptBuilder.JSAnimation.JSAnimationType.Quadreatic">
            <summary>
            Quadratic function - increasing speed
            </summary>
        </member>
        <member name="T:LamestWebserver.JScriptBuilder.JSAnimation.JSAxis">
            <summary>
            Axis at which the animation is applied
            </summary>
        </member>
        <member name="F:LamestWebserver.JScriptBuilder.JSAnimation.JSAxis.X">
            <summary>
            X Axis
            </summary>
        </member>
        <member name="F:LamestWebserver.JScriptBuilder.JSAnimation.JSAxis.Y">
            <summary>
            Y Axis
            </summary>
        </member>
        <member name="F:LamestWebserver.JScriptBuilder.JSAnimation.JSAxis.Both">
            <summary>
            Both Axis
            </summary>
        </member>
        <member name="M:LamestWebserver.JScriptBuilder.JSAnimation.ResizeElementToFit(LamestWebserver.JScriptBuilder.IJSValue,System.Int32,LamestWebserver.JScriptBuilder.IJSPiece[])">
            <summary>
            Resizes an element until it fits the contents inside.
            </summary>
            <param name="element">the element</param>
            <param name="speedFactor">the speed factor of the animation</param>
            <param name="executeOnComplete">the code to execute when the animation finished</param>
            <returns>the animation as functioncall</returns>
        </member>
        <member name="M:LamestWebserver.JScriptBuilder.JSAnimation.DecreaseElementToZero(LamestWebserver.JScriptBuilder.IJSValue,System.Int32,LamestWebserver.JScriptBuilder.IJSPiece[])">
            <summary>
            Resizes an element until it's size in the given axis is zero
            </summary>
            <param name="element">the element</param>
            <param name="speedFactor">the speed factor of the animation</param>
            <param name="executeOnComplete">the code to execute when the animation finished</param>
            <returns>the animation as functioncall</returns>
        </member>
        <member name="T:LamestWebserver.JScriptBuilder.JScript">
            <summary>
            A batch of javascript code pieces
            </summary>
        </member>
        <member name="F:LamestWebserver.JScriptBuilder.JScript.pieces">
            <summary>
            The contained javascript code pieces
            </summary>
        </member>
        <member name="M:LamestWebserver.JScriptBuilder.JScript.#ctor">
            <summary>
            Constructs an empty JScript
            </summary>
        </member>
        <member name="M:LamestWebserver.JScriptBuilder.JScript.#ctor(LamestWebserver.JScriptBuilder.IJSPiece[])">
            <summary>
            Constructs a JScript containing the given code pieces
            </summary>
            <param name="pieces">the contained code pieces</param>
        </member>
        <member name="M:LamestWebserver.JScriptBuilder.JScript.#ctor(System.Collections.Generic.List{LamestWebserver.JScriptBuilder.IJSPiece})">
            <summary>
            Constructs a JScript containing the given code pieces
            </summary>
            <param name="pieces">the contained code pieces</param>
        </member>
        <member name="M:LamestWebserver.JScriptBuilder.JScript.AppendCode(LamestWebserver.JScriptBuilder.IJSPiece)">
            <summary>
            Appends a given piece of code to the Script
            </summary>
            <param name="piece">the piece of code to add</param>
        </member>
        <member name="M:LamestWebserver.JScriptBuilder.JScript.AppendCodePieces(LamestWebserver.JScriptBuilder.IJSPiece[])">
            <summary>
            Appends a given piece of code to the Script
            </summary>
            <param name="piecesToAdd">the pieces of code to add</param>
        </member>
        <member name="M:LamestWebserver.JScriptBuilder.JScript.GetJsCode(LamestWebserver.SessionData,LamestWebserver.JScriptBuilder.CallingContext)">
            <inheritdoc />
        </member>
        <member name="M:LamestWebserver.JScriptBuilder.JScript.ToString">
            <inheritdoc />
        </member>
        <member name="T:LamestWebserver.JScriptBuilder.JSMaster">
            <summary>
            Contains Features for JavaScript parsing
            </summary>
        </member>
        <member name="M:LamestWebserver.JScriptBuilder.JSMaster.JSEncode(System.String)">
            <summary>
            Encodes the given string to a JavaScript inner String
            </summary>
            <param name="input">the given string</param>
            <returns>the encoded string</returns>
        </member>
        <member name="M:LamestWebserver.JScriptBuilder.JSMaster.Base64Encode(System.String)">
            <summary>
            Returns a piece of JavaScript code to decode this string as Base64 back to normal text
            </summary>
            <param name="input">the given input</param>
            <returns>A piece of JavaScript code</returns>
        </member>
        <member name="M:LamestWebserver.JScriptBuilder.JSMaster.EvalBase64(System.String)">
            <summary>
            Returns a piece of JavaScript code decoding and executing the given string as base64
            </summary>
            <param name="input">the given code to encode</param>
            <returns>A piece of JavaScript code</returns>
        </member>
        <member name="T:LamestWebserver.JScriptBuilder.CallingContext">
            <summary>
            The context in which this piece of code will be executed.
            </summary>
        </member>
        <member name="F:LamestWebserver.JScriptBuilder.CallingContext.Default">
            <summary>
            The Default Calling Context: End command with Semicolon
            </summary>
        </member>
        <member name="F:LamestWebserver.JScriptBuilder.CallingContext.Inner">
            <summary>
            Inside a Call - Don't end command with Semicolon 
            </summary>
        </member>
        <member name="F:LamestWebserver.JScriptBuilder.CallingContext.NoSemicolon">
            <summary>
            Don't end command with a Semicolon
            </summary>
        </member>
        <member name="T:LamestWebserver.JScriptBuilder.IJSPiece">
            <summary>
            Some kind of JavaScript code
            </summary>
        </member>
        <member name="M:LamestWebserver.JScriptBuilder.IJSPiece.GetJsCode(LamestWebserver.SessionData,LamestWebserver.JScriptBuilder.CallingContext)">
            <summary>
            Retrieves the JavaScript code for this Element
            </summary>
            <param name="sessionData">the current sessionData</param>
            <param name="context">the current context. Default: CallingContext.Default</param>
            <returns>the JavaScript code as string</returns>
        </member>
        <member name="T:LamestWebserver.JScriptBuilder.JSFunction">
            <summary>
            A JavaScript function definition
            </summary>
        </member>
        <member name="F:LamestWebserver.JScriptBuilder.JSFunction.pieces">
            <summary>
            The pieces of code to execute
            </summary>
        </member>
        <member name="F:LamestWebserver.JScriptBuilder.JSFunction.parameters">
            <summary>
            the parameters to feed to this function
            </summary>
        </member>
        <member name="F:LamestWebserver.JScriptBuilder.JSFunction._content">
            <summary>
            The name of this Function
            </summary>
        </member>
        <member name="P:LamestWebserver.JScriptBuilder.JSFunction.Content">
            <summary>
            The name of this Function
            </summary>
        </member>
        <member name="P:LamestWebserver.JScriptBuilder.JSFunction.FunctionPointer">
            <summary>
            The name of this Function as JSValue
            </summary>
        </member>
        <member name="M:LamestWebserver.JScriptBuilder.JSFunction.#ctor(System.String,System.Collections.Generic.List{LamestWebserver.JScriptBuilder.IJSValue})">
            <summary>
            Constructs a new JSFunction
            </summary>
            <param name="name">the name of the function</param>
            <param name="parameters">the parameters of the Function Definition</param>
        </member>
        <member name="M:LamestWebserver.JScriptBuilder.JSFunction.#ctor(System.Collections.Generic.List{LamestWebserver.JScriptBuilder.IJSValue})">
            <summary>
            Constructs a new JSFunction
            </summary>
            <param name="parameters">the parameters of the Function Definition</param>
        </member>
        <member name="M:LamestWebserver.JScriptBuilder.JSFunction.#ctor(LamestWebserver.JScriptBuilder.IJSValue[])">
            <summary>
            Constructs a new JSFunction
            </summary>
            <param name="parameters">the parameters of the Function Definition</param>
        </member>
        <member name="M:LamestWebserver.JScriptBuilder.JSFunction.#ctor(System.String)">
            <summary>
            Constructs a new JSFunction
            </summary>
            <param name="name">the name of the function</param>
        </member>
        <member name="M:LamestWebserver.JScriptBuilder.JSFunction.#ctor">
            <summary>
            Constructs a new empty JSFunction
            </summary>
        </member>
        <member name="M:LamestWebserver.JScriptBuilder.JSFunction.AppendCode(LamestWebserver.JScriptBuilder.IJSPiece)">
            <summary>
            Adds a given piece of JavaScript code to this function.
            </summary>
            <param name="piece">the piece to add</param>
        </member>
        <member name="M:LamestWebserver.JScriptBuilder.JSFunction.AppendCodePieces(LamestWebserver.JScriptBuilder.IJSPiece[])">
            <summary>
            Adds a bunch of given pieces of JavaScript code to this function.
            </summary>
            <param name="piecesToAdd">the pieces to add</param>
        </member>
        <member name="M:LamestWebserver.JScriptBuilder.JSFunction.Set(LamestWebserver.JScriptBuilder.IJSValue)">
            <summary>
            You can't set a function.
            </summary>
            <param name="value">the value to set this value to</param>
            <returns>throws an Exception, because you cannot set a Function</returns>
        </member>
        <member name="M:LamestWebserver.JScriptBuilder.JSFunction.GetJsCode(LamestWebserver.SessionData,LamestWebserver.JScriptBuilder.CallingContext)">
            <inheritdoc />
        </member>
        <member name="M:LamestWebserver.JScriptBuilder.JSFunction.callFunction(LamestWebserver.JScriptBuilder.IJSValue[])">
            <summary>
            Calls the given Function
            </summary>
            <param name="values">the parameters to input in to this call</param>
            <returns>A piece of JavaScript code</returns>
        </member>
        <member name="P:LamestWebserver.JScriptBuilder.JSFunction.Item(LamestWebserver.JScriptBuilder.IJSValue[])">
            <summary>
            Calls the Function with the given parameters
            </summary>
            <param name="values">the values to call the function with</param>
            <returns>A piece of JavaScript code</returns>
        </member>
        <member name="M:LamestWebserver.JScriptBuilder.JSFunction.DefineAndCall">
            <summary>
            Defines and Calls this Function at the same time.
            </summary>
            <returns>A piece of JavaScript code</returns>
        </member>
        <member name="T:LamestWebserver.JScriptBuilder.JSDirectFunctionCall">
            <summary>
            A JSDirectFunctionCall defines and calls a function at the same time.
            </summary>
        </member>
        <member name="M:LamestWebserver.JScriptBuilder.JSDirectFunctionCall.#ctor(LamestWebserver.JScriptBuilder.JSFunction)">
            <summary>
            Constructs a new JSDirectFunctionCall from a given Function
            </summary>
            <param name="function">the function to define and execute</param>
        </member>
        <member name="P:LamestWebserver.JScriptBuilder.JSDirectFunctionCall.Content">
            <summary>
            The name of the given function.
            </summary>
        </member>
        <member name="M:LamestWebserver.JScriptBuilder.JSDirectFunctionCall.Set(LamestWebserver.JScriptBuilder.IJSValue)">
            <summary>
            Sets the result of this FunctionCall to a Value
            </summary>
            <param name="value">the value to set to</param>
            <returns>A piece of JavaScript code</returns>
        </member>
        <member name="M:LamestWebserver.JScriptBuilder.JSDirectFunctionCall.GetJsCode(LamestWebserver.SessionData,LamestWebserver.JScriptBuilder.CallingContext)">
            <inheritdoc />
        </member>
        <member name="T:LamestWebserver.JScriptBuilder.JSInstantFunction">
            <summary>
            A JSInstant functino is a quick way to generate an anonymus Function executing some code.
            </summary>
        </member>
        <member name="M:LamestWebserver.JScriptBuilder.JSInstantFunction.#ctor(LamestWebserver.JScriptBuilder.IJSPiece[])">
            <summary>
            Constructs a new Function containing the given code
            </summary>
            <param name="pieces">the code to execute on execution</param>
        </member>
        <member name="T:LamestWebserver.JScriptBuilder.IJSValue">
            <summary>
            A Value in JavaScript code
            </summary>
        </member>
        <member name="P:LamestWebserver.JScriptBuilder.IJSValue.Content">
            <summary>
            The name of the Value
            </summary>
        </member>
        <member name="M:LamestWebserver.JScriptBuilder.IJSValue.Set(LamestWebserver.JScriptBuilder.IJSValue)">
            <summary>
            A way to quickly set this Value.
            </summary>
            <param name="value">the value to set this element to</param>
            <returns>A piece of JavaScript code</returns>
        </member>
        <member name="M:LamestWebserver.JScriptBuilder.IJSValue.IsEqualTo(LamestWebserver.JScriptBuilder.IJSValue)">
            <summary>
            A way to quickly compare two values in JavaScript on Equality
            </summary>
            <param name="value">the value to compare to</param>
            <returns>A piece of JavaScript code</returns>
        </member>
        <member name="M:LamestWebserver.JScriptBuilder.IJSValue.IsNotEqualTo(LamestWebserver.JScriptBuilder.IJSValue)">
            <summary>
            A way to quickly compare two values in JavaScript on Nonequality
            </summary>
            <param name="value">the value to compare to</param>
            <returns>A piece of JavaScript code</returns>
        </member>
        <member name="M:LamestWebserver.JScriptBuilder.IJSValue.GetJsCode(LamestWebserver.SessionData,LamestWebserver.JScriptBuilder.CallingContext)">
            <inheritdoc />
        </member>
        <member name="M:LamestWebserver.JScriptBuilder.IJSValue.op_Addition(LamestWebserver.JScriptBuilder.IJSValue,LamestWebserver.JScriptBuilder.IJSValue)">
            <summary>
            Adds two Values
            </summary>
            <param name="a">value a</param>
            <param name="b">value b</param>
            <returns>A piece of JavaScript code</returns>
        </member>
        <member name="M:LamestWebserver.JScriptBuilder.IJSValue.op_Subtraction(LamestWebserver.JScriptBuilder.IJSValue,LamestWebserver.JScriptBuilder.IJSValue)">
            <summary>
            Subtracts two Values
            </summary>
            <param name="a">value a</param>
            <param name="b">value b</param>
            <returns>A piece of JavaScript code</returns>
        </member>
        <member name="M:LamestWebserver.JScriptBuilder.IJSValue.op_Multiply(LamestWebserver.JScriptBuilder.IJSValue,LamestWebserver.JScriptBuilder.IJSValue)">
            <summary>
            Multiplies two Values
            </summary>
            <param name="a">value a</param>
            <param name="b">value b</param>
            <returns>A piece of JavaScript code</returns>
        </member>
        <member name="M:LamestWebserver.JScriptBuilder.IJSValue.op_Division(LamestWebserver.JScriptBuilder.IJSValue,LamestWebserver.JScriptBuilder.IJSValue)">
            <summary>
            Divides two Values
            </summary>
            <param name="a">value a</param>
            <param name="b">value b</param>
            <returns>A piece of JavaScript code</returns>
        </member>
        <member name="M:LamestWebserver.JScriptBuilder.IJSValue.op_LessThan(LamestWebserver.JScriptBuilder.IJSValue,LamestWebserver.JScriptBuilder.IJSValue)">
            <summary>
            Compares two Values
            </summary>
            <param name="a">value a</param>
            <param name="b">value b</param>
            <returns>A piece of JavaScript code</returns>
        </member>
        <member name="M:LamestWebserver.JScriptBuilder.IJSValue.op_GreaterThan(LamestWebserver.JScriptBuilder.IJSValue,LamestWebserver.JScriptBuilder.IJSValue)">
            <summary>
            Compares two Values
            </summary>
            <param name="a">value a</param>
            <param name="b">value b</param>
            <returns>A piece of JavaScript code</returns>
        </member>
        <member name="M:LamestWebserver.JScriptBuilder.IJSValue.op_LessThanOrEqual(LamestWebserver.JScriptBuilder.IJSValue,LamestWebserver.JScriptBuilder.IJSValue)">
            <summary>
            Compares two Values
            </summary>
            <param name="a">value a</param>
            <param name="b">value b</param>
            <returns>A piece of JavaScript code</returns>
        </member>
        <member name="M:LamestWebserver.JScriptBuilder.IJSValue.op_GreaterThanOrEqual(LamestWebserver.JScriptBuilder.IJSValue,LamestWebserver.JScriptBuilder.IJSValue)">
            <summary>
            Compares two Values
            </summary>
            <param name="a">value a</param>
            <param name="b">value b</param>
            <returns>A piece of JavaScript code</returns>
        </member>
        <member name="M:LamestWebserver.JScriptBuilder.IJSValue.op_Addition(System.String,LamestWebserver.JScriptBuilder.IJSValue)">
            <summary>
            Adds this Value to a StringValue
            </summary>
            <param name="a">value a</param>
            <param name="b">value b</param>
            <returns>A piece of JavaScript code</returns>
        </member>
        <member name="M:LamestWebserver.JScriptBuilder.IJSValue.op_Addition(LamestWebserver.JScriptBuilder.IJSValue,System.String)">
            <summary>
            Adds a StringVaue to this Value
            </summary>
            <param name="a">value a</param>
            <param name="b">value b</param>
            <returns>A piece of JavaScript code</returns>
        </member>
        <member name="M:LamestWebserver.JScriptBuilder.IJSValue.op_Implicit(LamestWebserver.UI.HElement)~LamestWebserver.JScriptBuilder.IJSValue">
            <summary>
            Casts an HElement to a JSValue
            </summary>
            <param name="element">the HElement</param>
        </member>
        <member name="T:LamestWebserver.JScriptBuilder.JSOperator">
            <summary>
            Performs operations on IJSValues
            </summary>
        </member>
        <member name="P:LamestWebserver.JScriptBuilder.JSOperator.Content">
            <summary>
            Returns the value of this Operation
            </summary>
        </member>
        <member name="M:LamestWebserver.JScriptBuilder.JSOperator.#ctor(LamestWebserver.JScriptBuilder.JSOperator.JSOperatorType,LamestWebserver.JScriptBuilder.IJSValue,LamestWebserver.JScriptBuilder.IJSValue)">
            <summary>
            Constructs a new Operation
            </summary>
            <param name="operatorType">the operator</param>
            <param name="a">first parameter</param>
            <param name="b">second parameter</param>
        </member>
        <member name="M:LamestWebserver.JScriptBuilder.JSOperator.Set(LamestWebserver.JScriptBuilder.IJSValue)">
            <summary>
            Sets the resulting value of this operation to a specified value.
            Please make sure, that you really want to do this.
            </summary>
            <param name="value">the value to set to</param>
            <returns>A piece of JavaScript code</returns>
        </member>
        <member name="M:LamestWebserver.JScriptBuilder.JSOperator.GetJsCode(LamestWebserver.SessionData,LamestWebserver.JScriptBuilder.CallingContext)">
            <inheritdoc />
        </member>
        <member name="T:LamestWebserver.JScriptBuilder.JSOperator.JSOperatorType">
            <summary>
            The Types of Operators supported in JSOperator
            </summary>
        </member>
        <member name="F:LamestWebserver.JScriptBuilder.JSOperator.JSOperatorType.Add">
            <summary>
            Addition
            </summary>
        </member>
        <member name="F:LamestWebserver.JScriptBuilder.JSOperator.JSOperatorType.Subtract">
            <summary>
            Subtraction
            </summary>
        </member>
        <member name="F:LamestWebserver.JScriptBuilder.JSOperator.JSOperatorType.Multiply">
            <summary>
            Multiplication
            </summary>
        </member>
        <member name="F:LamestWebserver.JScriptBuilder.JSOperator.JSOperatorType.Divide">
            <summary>
            Division
            </summary>
        </member>
        <member name="F:LamestWebserver.JScriptBuilder.JSOperator.JSOperatorType.Set">
            <summary>
            Setting to a Value
            </summary>
        </member>
        <member name="F:LamestWebserver.JScriptBuilder.JSOperator.JSOperatorType.Equals">
            <summary>
            Equality-Comparison
            </summary>
        </member>
        <member name="F:LamestWebserver.JScriptBuilder.JSOperator.JSOperatorType.Greater">
            <summary>
            Greater than
            </summary>
        </member>
        <member name="F:LamestWebserver.JScriptBuilder.JSOperator.JSOperatorType.Less">
            <summary>
            Less than
            </summary>
        </member>
        <member name="F:LamestWebserver.JScriptBuilder.JSOperator.JSOperatorType.GreaterOrEqual">
            <summary>
            Greater or Equal than
            </summary>
        </member>
        <member name="F:LamestWebserver.JScriptBuilder.JSOperator.JSOperatorType.LessOrEqual">
            <summary>
            Less or Equal than
            </summary>
        </member>
        <member name="F:LamestWebserver.JScriptBuilder.JSOperator.JSOperatorType.NotEquals">
            <summary>
            Not Equal to Value
            </summary>
        </member>
        <member name="T:LamestWebserver.JScriptBuilder.JSStringValue">
            <summary>
            A String literal Value in JavaScript
            </summary>
        </member>
        <member name="M:LamestWebserver.JScriptBuilder.JSStringValue.#ctor(System.String)">
            <summary>
            Constructs a new JSStringValue of a given string
            </summary>
            <param name="value">the string to set this value to</param>
        </member>
        <member name="P:LamestWebserver.JScriptBuilder.JSStringValue.Content">
            <inheritdoc />
        </member>
        <member name="M:LamestWebserver.JScriptBuilder.JSStringValue.GetJsCode(LamestWebserver.SessionData,LamestWebserver.JScriptBuilder.CallingContext)">
            <inheritdoc />
        </member>
        <member name="M:LamestWebserver.JScriptBuilder.JSStringValue.op_Implicit(System.String)~LamestWebserver.JScriptBuilder.JSStringValue">
            <summary>
            Casts a string to a JSStringValue
            </summary>
            <param name="value">the string being casted</param>
            <returns>the string as JSStringValue</returns>
        </member>
        <member name="T:LamestWebserver.JScriptBuilder.JSRawStringValue">
            <summary>
            A String literal Value in JavaScript without any processing to the string (other than '"' to '&quot;').
            </summary>
        </member>
        <member name="M:LamestWebserver.JScriptBuilder.JSRawStringValue.#ctor(System.String)">
            <summary>
            Constructs a new JSRawStringValue of a given string
            </summary>
            <param name="value">the string to set this value to</param>
        </member>
        <member name="P:LamestWebserver.JScriptBuilder.JSRawStringValue.Content">
            <inheritdoc />
        </member>
        <member name="M:LamestWebserver.JScriptBuilder.JSRawStringValue.GetJsCode(LamestWebserver.SessionData,LamestWebserver.JScriptBuilder.CallingContext)">
            <inheritdoc />
        </member>
        <member name="M:LamestWebserver.JScriptBuilder.JSRawStringValue.op_Implicit(System.String)~LamestWebserver.JScriptBuilder.JSRawStringValue">
            <summary>
            Casts a string to a JSRawStringValue
            </summary>
            <param name="value">the string being casted</param>
            <returns>the string as JSRawStringValue</returns>
        </member>
        <member name="T:LamestWebserver.JScriptBuilder.JSUnmaskedStringValue">
            <summary>
            Represents an already masked string value. A JSUnmaskedStringValue will not be encoded when processing.
            </summary>
        </member>
        <member name="M:LamestWebserver.JScriptBuilder.JSUnmaskedStringValue.#ctor(System.String)">
            <summary>
            Constructs a new JSUnmaskedStringValue.
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:LamestWebserver.JScriptBuilder.JSUnmaskedStringValue.GetJsCode(LamestWebserver.SessionData,LamestWebserver.JScriptBuilder.CallingContext)">
            <inheritdoc />
        </member>
        <member name="M:LamestWebserver.JScriptBuilder.JSUnmaskedStringValue.op_Implicit(System.String)~LamestWebserver.JScriptBuilder.JSUnmaskedStringValue">
            <summary>
            Casts a string to a JSUnmaskedStringValue
            </summary>
            <param name="value">the string being casted</param>
            <returns>the string as JSUnmaskedStringValue</returns>
        </member>
        <member name="T:LamestWebserver.JScriptBuilder.JSValue">
            <summary>
            A JavaScript value
            </summary>
        </member>
        <member name="F:LamestWebserver.JScriptBuilder.JSValue._content">
            <summary>
            The content of the Value
            </summary>
        </member>
        <member name="P:LamestWebserver.JScriptBuilder.JSValue.Content">
            <summary>
            Retrieves the Value
            </summary>
        </member>
        <member name="M:LamestWebserver.JScriptBuilder.JSValue.#ctor(System.Object)">
            <summary>
            Constructs a new JSValue from an Object. ToString will be Called.
            </summary>
            <param name="content">the object to read from</param>
        </member>
        <member name="M:LamestWebserver.JScriptBuilder.JSValue.#ctor(System.String)">
            <summary>
            Constructs a new JSValue from a string. If you want a string literal, use JSStringValue instead.
            </summary>
            <param name="content">the content of this value</param>
        </member>
        <member name="M:LamestWebserver.JScriptBuilder.JSValue.#ctor(System.Int32)">
            <summary>
            Constructs a new JSValue from an integer
            </summary>
            <param name="content">the content of this value</param>
        </member>
        <member name="M:LamestWebserver.JScriptBuilder.JSValue.#ctor(System.Boolean)">
            <summary>
            Constructs a new JSValue from a boolean value
            </summary>
            <param name="content">the content of this value</param>
        </member>
        <member name="M:LamestWebserver.JScriptBuilder.JSValue.#ctor(System.Double)">
            <summary>
            Constructs a new JSValue from a double
            </summary>
            <param name="content">the content of this value</param>
        </member>
        <member name="M:LamestWebserver.JScriptBuilder.JSValue.GetJsCode(LamestWebserver.SessionData,LamestWebserver.JScriptBuilder.CallingContext)">
            <inheritdoc />
        </member>
        <member name="M:LamestWebserver.JScriptBuilder.JSValue.Set(LamestWebserver.JScriptBuilder.IJSValue)">
            <inheritdoc />
        </member>
        <member name="P:LamestWebserver.JScriptBuilder.JSValue.CurrentBrowserURL">
            <summary>
            Returns the current browser URL (window.location)
            </summary>
        </member>
        <member name="T:LamestWebserver.JScriptBuilder.JSVariable">
            <summary>
            A JavaScript variable
            </summary>
        </member>
        <member name="F:LamestWebserver.JScriptBuilder.JSVariable._content">
            <summary>
            The name of this Variable
            </summary>
        </member>
        <member name="P:LamestWebserver.JScriptBuilder.JSVariable.Content">
            <summary>
            The name of this Variable
            </summary>
        </member>
        <member name="P:LamestWebserver.JScriptBuilder.JSVariable.Name">
            <summary>
            Retrieves the name of the JSVariable as JSValue.
            </summary>
        </member>
        <member name="M:LamestWebserver.JScriptBuilder.JSVariable.#ctor(System.String)">
            <summary>
            Constructs a new JSVariable
            </summary>
            <param name="name">the name of the variable</param>
        </member>
        <member name="M:LamestWebserver.JScriptBuilder.JSVariable.Set(LamestWebserver.JScriptBuilder.IJSValue)">
            <inheritdoc />
        </member>
        <member name="M:LamestWebserver.JScriptBuilder.JSVariable.IsEqualTo(LamestWebserver.JScriptBuilder.IJSValue)">
            <inheritdoc />
        </member>
        <member name="M:LamestWebserver.JScriptBuilder.JSVariable.IsNotEqualTo(LamestWebserver.JScriptBuilder.IJSValue)">
            <inheritdoc />
        </member>
        <member name="M:LamestWebserver.JScriptBuilder.JSVariable.GetJsCode(LamestWebserver.SessionData,LamestWebserver.JScriptBuilder.CallingContext)">
            <inheritdoc />
        </member>
        <member name="T:LamestWebserver.JScriptBuilder.JSFunctionCall">
            <summary>
            A JavaScript Function call
            </summary>
        </member>
        <member name="P:LamestWebserver.JScriptBuilder.JSFunctionCall.Content">
            <summary>
            The name of the Method to call
            </summary>
        </member>
        <member name="M:LamestWebserver.JScriptBuilder.JSFunctionCall.#ctor(System.String,LamestWebserver.JScriptBuilder.IJSValue[])">
            <summary>
            Constructs a new JavaScript functionCall
            </summary>
            <param name="methodName">the name of the Function</param>
            <param name="parameters">the parameters of the Function</param>
        </member>
        <member name="M:LamestWebserver.JScriptBuilder.JSFunctionCall.Set(LamestWebserver.JScriptBuilder.IJSValue)">
            <summary>
            Sets the resulting object to a value
            </summary>
            <param name="value">hte value to set to</param>
            <returns>A piece of JavaScript code</returns>
        </member>
        <member name="M:LamestWebserver.JScriptBuilder.JSFunctionCall.GetJsCode(LamestWebserver.SessionData,LamestWebserver.JScriptBuilder.CallingContext)">
            <inheritdoc />
        </member>
        <member name="M:LamestWebserver.JScriptBuilder.JSFunctionCall.SetInterval(LamestWebserver.JScriptBuilder.JSFunction,System.Int32)">
            <summary>
            Returns and starts an interval in which a function is called
            </summary>
            <param name="function">The function to start</param>
            <param name="milliseconds">The TimeSpan in Milliseconds at which the Function will be called</param>
            <returns>A piece of JavaScript code</returns>
        </member>
        <member name="M:LamestWebserver.JScriptBuilder.JSFunctionCall.ClearInterval(LamestWebserver.JScriptBuilder.JSVariable)">
            <summary>
            Stops an interval.
            </summary>
            <param name="variable">The Variable the Interval has been stored in</param>
            <returns>A piece of JavaScript code</returns>
        </member>
        <member name="M:LamestWebserver.JScriptBuilder.JSFunctionCall.SetInnerHTMLAsync(LamestWebserver.JScriptBuilder.IJSValue,System.String,LamestWebserver.JScriptBuilder.IJSPiece[])">
            <summary>
            Sets the innerHTML of an Element to the contents of a predefinded URL
            </summary>
            <param name="value">the element to set the new content to</param>
            <param name="URL">the URL where the new contents come from</param>
            <param name="executeOnComplete">the code to execute when the task has been completed</param>
            <returns>A piece of JavaScript code</returns>
        </member>
        <member name="M:LamestWebserver.JScriptBuilder.JSFunctionCall.SetOuterHTMLAsync(LamestWebserver.JScriptBuilder.IJSValue,System.String,LamestWebserver.JScriptBuilder.IJSPiece[])">
            <summary>
            Sets the outerHTML of an Element to the contents of a predefinded URL
            </summary>
            <param name="value">the element to set the new content to</param>
            <param name="URL">the URL where the new contents come from</param>
            <param name="executeOnComplete">the code to execute when the task has been completed</param>
            <returns>A piece of JavaScript code</returns>
        </member>
        <member name="M:LamestWebserver.JScriptBuilder.JSFunctionCall.EncodeURIComponent(LamestWebserver.JScriptBuilder.IJSValue)">
            <summary>
            Encodes a URI component to a formatted string.
            </summary>
            <param name="value">the value to encode</param>
            <returns>A piece of JavaScript code</returns>
        </member>
        <member name="M:LamestWebserver.JScriptBuilder.JSFunctionCall.NotifyAsync(System.String)">
            <summary>
            Requests a page from the predefinded URL. This can be used as Notification to the Server without any response.
            </summary>
            <param name="URL">The URL to request</param>
            <returns>A piece of JavaScript code</returns>
        </member>
        <member name="M:LamestWebserver.JScriptBuilder.JSFunctionCall.HideElementByID(System.String)">
            <summary>
            Hides a specified element.
            </summary>
            <param name="id">the id of the element</param>
            <returns>A piece of JavaScript code</returns>
        </member>
        <member name="M:LamestWebserver.JScriptBuilder.JSFunctionCall.DisplayElementByID(System.String)">
            <summary>
            Shows a specified element. (Sets it's display style to Block)
            </summary>
            <param name="id">the id of the element</param>
            <returns>A piece of JavaScript code</returns>
        </member>
        <member name="M:LamestWebserver.JScriptBuilder.JSFunctionCall.RemoveElementByID(System.String)">
            <summary>
            Removes a specified element from the current document.
            </summary>
            <param name="id">the id of the element</param>
            <returns>A piece of JavaScript code</returns>
        </member>
        <member name="T:LamestWebserver.JScriptBuilder.JSElementValue">
            <summary>
            A JavaScript Value of Type Element (representing a HTML Element)
            </summary>
        </member>
        <member name="M:LamestWebserver.JScriptBuilder.JSElementValue.#ctor(LamestWebserver.JScriptBuilder.IJSValue)">
            <summary>
            Constructs a new JSElementValue from a Value
            </summary>
            <param name="value">the value</param>
        </member>
        <member name="M:LamestWebserver.JScriptBuilder.JSElementValue.#ctor(System.String)">
            <summary>
            Constructs a new JSElementValue from a string
            </summary>
            <param name="value">the value</param>
        </member>
        <member name="F:LamestWebserver.JScriptBuilder.JSElementValue._content">
            <summary>
            The Name of this Element or the Function retrieving it
            </summary>
        </member>
        <member name="P:LamestWebserver.JScriptBuilder.JSElementValue.Content">
            <summary>
            The Name of this Element or the Function retrieving it
            </summary>
        </member>
        <member name="M:LamestWebserver.JScriptBuilder.JSElementValue.GetJsCode(LamestWebserver.SessionData,LamestWebserver.JScriptBuilder.CallingContext)">
            <inheritdoc />
        </member>
        <member name="M:LamestWebserver.JScriptBuilder.JSElementValue.Set(LamestWebserver.JScriptBuilder.IJSValue)">
            <inheritdoc />
        </member>
        <member name="P:LamestWebserver.JScriptBuilder.JSElementValue.InnerHTML">
            <summary>
            The 'innerHTML' attribute of this Element
            </summary>
        </member>
        <member name="P:LamestWebserver.JScriptBuilder.JSElementValue.InnerText">
            <summary>
            The 'innerText' attribute of this Element
            </summary>
        </member>
        <member name="P:LamestWebserver.JScriptBuilder.JSElementValue.Value">
            <summary>
            The 'value' attribute of this Element
            </summary>
        </member>
        <member name="P:LamestWebserver.JScriptBuilder.JSElementValue.Name">
            <summary>
            The 'name' attribute of this Element
            </summary>
        </member>
        <member name="P:LamestWebserver.JScriptBuilder.JSElementValue.ID">
            <summary>
            The 'id' attribute of this Element
            </summary>
        </member>
        <member name="P:LamestWebserver.JScriptBuilder.JSElementValue.Checked">
            <summary>
            The 'checked' attribute of this Element
            </summary>
        </member>
        <member name="P:LamestWebserver.JScriptBuilder.JSElementValue.ClassName">
            <summary>
            The 'className' attribute of this Element
            </summary>
        </member>
        <member name="P:LamestWebserver.JScriptBuilder.JSElementValue.OuterHTML">
            <summary>
            The 'outerHTML' attribute of this Element
            </summary>
        </member>
        <member name="P:LamestWebserver.JScriptBuilder.JSElementValue.OuterText">
            <summary>
            The 'outerText' attribute of this Element
            </summary>
        </member>
        <member name="P:LamestWebserver.JScriptBuilder.JSElementValue.FirstSelected">
            <summary>
            The 'selectedOptions[0].value' attribute of this Element
            </summary>
        </member>
        <member name="P:LamestWebserver.JScriptBuilder.JSElementValue.Show">
            <summary>
            Displays (display = 'block') this Element
            </summary>
        </member>
        <member name="P:LamestWebserver.JScriptBuilder.JSElementValue.Hide">
            <summary>
            Hides (display = 'none') this Element
            </summary>
        </member>
        <member name="P:LamestWebserver.JScriptBuilder.JSElementValue.Delete">
            <summary>
            Removes this Element from the page
            </summary>
        </member>
        <member name="P:LamestWebserver.JScriptBuilder.JSElementValue.Item(System.String)">
            <summary>
            A custom attribute of this Element
            </summary>
        </member>
        <member name="M:LamestWebserver.JScriptBuilder.JSElementValue.CustomParameter(System.String)">
            <summary>
            A custom attribute of this Element
            </summary>
        </member>
        <member name="T:LamestWebserver.JScriptBuilder.JSIf">
            <summary>
            A JavaScript If-Statement
            </summary>
        </member>
        <member name="M:LamestWebserver.JScriptBuilder.JSIf.#ctor(LamestWebserver.JScriptBuilder.IJSValue,LamestWebserver.JScriptBuilder.IJSPiece[])">
            <summary>
            Constructs an If-Statement from a boolean Expression and the executed Code if true
            </summary>
            <param name="booleanExpression">the boolean Expression that has to be true to execute the code</param>
            <param name="code">the code that is executed if the boolean Expression is true</param>
        </member>
        <member name="M:LamestWebserver.JScriptBuilder.JSIf.GetJsCode(LamestWebserver.SessionData,LamestWebserver.JScriptBuilder.CallingContext)">
            <inheritdoc />
        </member>
        <member name="T:LamestWebserver.JScriptBuilder.JSSwitch">
            <summary>
            A JavaScript Switch(-Case) Statement
            </summary>
        </member>
        <member name="M:LamestWebserver.JScriptBuilder.JSSwitch.#ctor(LamestWebserver.JScriptBuilder.JSValue)">
            <summary>
            Creates a new JSSwitch Object
            </summary>
            <param name="switchValue">the value to check cases for</param>
        </member>
        <member name="M:LamestWebserver.JScriptBuilder.JSSwitch.#ctor(LamestWebserver.JScriptBuilder.JSValue,LamestWebserver.JScriptBuilder.IJSPiece)">
            <summary>
            Creates a new JSSwitch Object
            </summary>
            <param name="switchValue">the value to check cases for</param>
            <param name="defaultCase">how to perform in the default case</param>
        </member>
        <member name="M:LamestWebserver.JScriptBuilder.JSSwitch.#ctor(LamestWebserver.JScriptBuilder.JSValue,LamestWebserver.JScriptBuilder.IJSPiece,System.Tuple{LamestWebserver.JScriptBuilder.IJSValue,LamestWebserver.JScriptBuilder.IJSPiece}[])">
            <summary>
            Creates a new JSSwitch Object
            </summary>
            <param name="switchValue">the value to check cases for</param>
            <param name="defaultCase">how to perform in the default case</param>
            <param name="cases">how to perform for certain values</param>
        </member>
        <member name="M:LamestWebserver.JScriptBuilder.JSSwitch.#ctor(LamestWebserver.JScriptBuilder.JSValue,System.Tuple{LamestWebserver.JScriptBuilder.IJSValue,LamestWebserver.JScriptBuilder.IJSPiece}[])">
            <summary>
            Creates a new JSSwitch Object
            </summary>
            <param name="switchValue">the value to check cases for</param>
            <param name="cases">how to perform for certain values</param>
        </member>
        <member name="M:LamestWebserver.JScriptBuilder.JSSwitch.AddCase(LamestWebserver.JScriptBuilder.IJSValue,LamestWebserver.JScriptBuilder.IJSPiece)">
            <summary>
            Adds a case to the switch-case block.
            </summary>
            <param name="value">the value of the case</param>
            <param name="code">the code to execute in this case</param>
        </member>
        <member name="M:LamestWebserver.JScriptBuilder.JSSwitch.GetJsCode(LamestWebserver.SessionData,LamestWebserver.JScriptBuilder.CallingContext)">
            <inheritdoc />
        </member>
        <member name="T:LamestWebserver.JScriptBuilder.JSElseIf">
            <summary>
            A JavaScript Else-If-Statement
            </summary>
        </member>
        <member name="M:LamestWebserver.JScriptBuilder.JSElseIf.#ctor(LamestWebserver.JScriptBuilder.IJSValue,LamestWebserver.JScriptBuilder.IJSPiece[])">
            <summary>
            Constructs an Else-If-Statement from a boolean Expression and the executed Code if true
            </summary>
            <param name="booleanExpression">the boolean Expression that has to be true to execute the code</param>
            <param name="code">the code that is executed if the boolean Expression is true</param>
        </member>
        <member name="M:LamestWebserver.JScriptBuilder.JSElseIf.GetJsCode(LamestWebserver.SessionData,LamestWebserver.JScriptBuilder.CallingContext)">
            <inheritdoc />
        </member>
        <member name="T:LamestWebserver.JScriptBuilder.JSElse">
            <summary>
            A JavaScript Else-Statement
            </summary>
        </member>
        <member name="M:LamestWebserver.JScriptBuilder.JSElse.#ctor(LamestWebserver.JScriptBuilder.IJSPiece[])">
            <summary>
            Constructs an Else-Statement from  the executed Code if true
            </summary>
            <param name="code">the code that is executed</param>
        </member>
        <member name="M:LamestWebserver.JScriptBuilder.JSElse.GetJsCode(LamestWebserver.SessionData,LamestWebserver.JScriptBuilder.CallingContext)">
            <inheritdoc />
        </member>
        <member name="T:LamestWebserver.JScriptBuilder.JSInlineIf">
            <summary>
            A JavaScript inline If-Statement
            </summary>
        </member>
        <member name="M:LamestWebserver.JScriptBuilder.JSInlineIf.#ctor(LamestWebserver.JScriptBuilder.IJSValue,LamestWebserver.JScriptBuilder.IJSValue,LamestWebserver.JScriptBuilder.IJSValue)">
            <summary>
            Constructs an Inline-If-Statement from a boolean Expression and the Values if true and if false
            </summary>
            <param name="booleanExpression">the boolean Expression</param>
            <param name="ifTrue">the value if true</param>
            <param name="ifFalse">the value if false</param>
        </member>
        <member name="P:LamestWebserver.JScriptBuilder.JSInlineIf.Content">
            <summary>
            Retrieves the whole Inline-If-Statement
            </summary>
        </member>
        <member name="M:LamestWebserver.JScriptBuilder.JSInlineIf.GetJsCode(LamestWebserver.SessionData,LamestWebserver.JScriptBuilder.CallingContext)">
            <inheritdoc />
        </member>
        <member name="M:LamestWebserver.JScriptBuilder.JSInlineIf.Set(LamestWebserver.JScriptBuilder.IJSValue)">
            <inheritdoc />
        </member>
        <member name="T:LamestWebserver.JScriptBuilder.JSWhileLoop">
            <summary>
            A JavaScript While-Loop
            </summary>
        </member>
        <member name="F:LamestWebserver.JScriptBuilder.JSWhileLoop.Pieces">
            <summary>
            The code in this Loop
            </summary>
        </member>
        <member name="F:LamestWebserver.JScriptBuilder.JSWhileLoop.BooleanExpression">
            <summary>
            The boolean expression for this Loop
            </summary>
        </member>
        <member name="M:LamestWebserver.JScriptBuilder.JSWhileLoop.#ctor(LamestWebserver.JScriptBuilder.IJSValue,LamestWebserver.JScriptBuilder.IJSPiece[])">
            <summary>
            Constructs a new JSWhileLoop
            </summary>
            <param name="booleanExpression">the boolean Expression that has to be true</param>
            <param name="code">the code to execute while the expression is true</param>
        </member>
        <member name="M:LamestWebserver.JScriptBuilder.JSWhileLoop.GetJsCode(LamestWebserver.SessionData,LamestWebserver.JScriptBuilder.CallingContext)">
            <inheritdoc />
        </member>
        <member name="T:LamestWebserver.JScriptBuilder.JSDoWhileLoop">
            <summary>
            A JavaScript Do-While-Loop
            </summary>
        </member>
        <member name="M:LamestWebserver.JScriptBuilder.JSDoWhileLoop.#ctor(LamestWebserver.JScriptBuilder.IJSValue,LamestWebserver.JScriptBuilder.IJSPiece[])">
            <summary>
            Constructs a new Do-While-Loop
            </summary>
            <param name="booleanExpression">the expression that has to be true to repeat the loop</param>
            <param name="code">the code to execute in the loop</param>
        </member>
        <member name="M:LamestWebserver.JScriptBuilder.JSDoWhileLoop.GetJsCode(LamestWebserver.SessionData,LamestWebserver.JScriptBuilder.CallingContext)">
            <inheritdoc />
        </member>
        <member name="T:LamestWebserver.JScriptBuilder.JSForLoop">
            <summary>
            A JavaScript For-Loop
            </summary>
        </member>
        <member name="M:LamestWebserver.JScriptBuilder.JSForLoop.#ctor(LamestWebserver.JScriptBuilder.IJSValue,LamestWebserver.JScriptBuilder.IJSPiece[])">
            <summary>
            Constructs a For-Loop iterating from Zero to the specified endValue
            </summary>
            <param name="endValue">the End-Value</param>
            <param name="code">the code to execute</param>
        </member>
        <member name="M:LamestWebserver.JScriptBuilder.JSForLoop.#ctor(LamestWebserver.JScriptBuilder.JSVariable,LamestWebserver.JScriptBuilder.IJSValue,LamestWebserver.JScriptBuilder.IJSPiece[])">
            <summary>
            Constructs a For-Loop iterating a Variable from Zero to the specified endValue
            </summary>
            <param name="variable">the Variable to iterate</param>
            <param name="endValue">the End-Value</param>
            <param name="code">the code to execute</param>
        </member>
        <member name="M:LamestWebserver.JScriptBuilder.JSForLoop.#ctor(LamestWebserver.JScriptBuilder.JSVariable,LamestWebserver.JScriptBuilder.IJSValue,LamestWebserver.JScriptBuilder.IJSValue,LamestWebserver.JScriptBuilder.IJSPiece[])">
            <summary>
            Constructs a For-Loop iterating a Variable from the specified startValue to the specified endValue
            </summary>
            <param name="variable">the Variable to iterate</param>
            <param name="startValue">the Start-Value</param>
            <param name="endValue">the End-Value</param>
            <param name="code">the code to execute</param>
        </member>
        <member name="M:LamestWebserver.JScriptBuilder.JSForLoop.#ctor(LamestWebserver.JScriptBuilder.JSVariable,LamestWebserver.JScriptBuilder.IJSValue,LamestWebserver.JScriptBuilder.IJSValue,LamestWebserver.JScriptBuilder.JSOperator.JSOperatorType,LamestWebserver.JScriptBuilder.IJSPiece,LamestWebserver.JScriptBuilder.IJSPiece[])">
            <summary>
            Constructs a For-Loop iterating a Variable from the specified startValue as long as the variable is within a certain relation with the endValue executing the given operation each step.
            </summary>
            <param name="variable">the Variable to iterate</param>
            <param name="startValue">the Start-Value</param>
            <param name="endValue">the End-Value</param>
            <param name="_operator">the relation the endValue stands in with the variable</param>
            <param name="stepOperation">the operation to execute each iteration</param>
            <param name="code">the code to execute</param>
        </member>
        <member name="M:LamestWebserver.JScriptBuilder.JSForLoop.#ctor(LamestWebserver.JScriptBuilder.JSVariable,LamestWebserver.JScriptBuilder.IJSValue,LamestWebserver.JScriptBuilder.IJSValue,LamestWebserver.JScriptBuilder.IJSPiece,LamestWebserver.JScriptBuilder.IJSPiece[])">
            <summary>
            Constructs a For-Loop iterating a Variable with a value as long as a booleanExpression is true by modifying something each iteration in the specified stepOperation and executing the given piece of code.
            </summary>
            <param name="variable">the variable</param>
            <param name="value">the start-value of the variable</param>
            <param name="booleanExpression">the boolean expression</param>
            <param name="stepOperation">the operation to execute each step</param>
            <param name="code">the code to execute inside the loop</param>
        </member>
        <member name="M:LamestWebserver.JScriptBuilder.JSForLoop.GetJsCode(LamestWebserver.SessionData,LamestWebserver.JScriptBuilder.CallingContext)">
            <inheritdoc />
        </member>
        <member name="T:LamestWebserver.NotificationService.INotificationHandler">
            <summary>
            An interface for notification based communication between client and server.
            </summary>
        </member>
        <member name="P:LamestWebserver.NotificationService.INotificationHandler.URL">
            <summary>
            The URL of the ResponseService
            </summary>
        </member>
        <member name="M:LamestWebserver.NotificationService.INotificationHandler.StopHandler">
            <summary>
            Stops and Unregisters the Handler
            </summary>
        </member>
        <member name="M:LamestWebserver.NotificationService.INotificationHandler.Notify(LamestWebserver.NotificationService.Notification)">
            <summary>
            Notifies all connected clients.
            </summary>
            <param name="notification">the notification to send</param>
        </member>
        <member name="T:LamestWebserver.NotificationService.Notification">
            <summary>
            A Notification for Communicating message based via WebSockets
            </summary>
        </member>
        <member name="F:LamestWebserver.NotificationService.Notification.NotificationType">
            <summary>
            The type of the current notification
            </summary>
        </member>
        <member name="F:LamestWebserver.NotificationService.Notification.NoReply">
            <summary>
            shall the client / server not reply to this notification?
            </summary>
        </member>
        <member name="M:LamestWebserver.NotificationService.Notification.#ctor(LamestWebserver.NotificationService.NotificationType)">
            <summary>
            Constructs a new Notification of the given type
            </summary>
            <param name="type"></param>
        </member>
        <member name="M:LamestWebserver.NotificationService.Notification.ToString">
            <summary>
            Returns the current notification as string (json)
            </summary>
            <returns>the current notification as string (json)</returns>
        </member>
        <member name="M:LamestWebserver.NotificationService.Notification.ToString(System.Collections.Generic.KeyValuePair{System.String,System.String}[])">
            <summary>
            Returns the current notification as string (json)
            </summary>
            <param name="args">the arguments listed in the message</param>
            <returns>the current notification as string (json)</returns>
        </member>
        <member name="M:LamestWebserver.NotificationService.Notification.GetNotification">
            <summary>
            Retrieves the current notification
            </summary>
            <returns>Returns the notification as string</returns>
        </member>
        <member name="M:LamestWebserver.NotificationService.Notification.ExecuteScript(System.String)">
            <summary>
            Creates a notification to execute a javascript piece of code in the client
            </summary>
            <param name="script">the script to execute</param>
            <returns>the specified notification</returns>
        </member>
        <member name="M:LamestWebserver.NotificationService.Notification.ExecuteScript(LamestWebserver.JScriptBuilder.IJSPiece)">
            <summary>
            Creates a notification to execute a javascript piece of code in the client
            </summary>
            <param name="piece">the script to execute</param>
            <returns>the specified notification</returns>
        </member>
        <member name="M:LamestWebserver.NotificationService.Notification.ReplaceDivWithContent(System.String,LamestWebserver.JScriptBuilder.IJSValue)">
            <summary>
            Creates a notification to replace a given div element identified by an id with the specific new content
            </summary>
            <param name="divId">the id of the div element</param>
            <param name="content">the content to replace it's contents with</param>
            <returns>the specified notification</returns>
        </member>
        <member name="M:LamestWebserver.NotificationService.Notification.ReplaceDivWithContent(System.String,System.String)">
            <summary>
            Creates a notification to replace a given div element identified by an id with the specific new content
            </summary>
            <param name="divId">the id of the div element</param>
            <param name="content">the content to replace it's contents with</param>
            <returns>the specified notification</returns>
        </member>
        <member name="M:LamestWebserver.NotificationService.Notification.ReplaceBodyWithContent(LamestWebserver.JScriptBuilder.IJSValue)">
            <summary>
            Creates a notification to replace the documents body with specific new content
            </summary>
            <param name="content">the content to replace the body with</param>
            <returns>the specified notification</returns>
        </member>
        <member name="M:LamestWebserver.NotificationService.Notification.ReplaceBodyWithContent(System.String)">
            <summary>
            Creates a notification to replace the documents body with specific new content
            </summary>
            <param name="content">the content to replace the body with</param>
            <returns>the specified notification</returns>
        </member>
        <member name="M:LamestWebserver.NotificationService.Notification.AddContentToDiv(System.String,LamestWebserver.JScriptBuilder.IJSValue)">
            <summary>
            Creates a notification to add the given content to a specified div
            </summary>
            <param name="divId">the div to add content to</param>
            <param name="content">the content to add</param>
            <returns>the specified notification</returns>
        </member>
        <member name="M:LamestWebserver.NotificationService.Notification.AddContentToDiv(System.String,System.String)">
            <summary>
            Creates a notification to add the given content to a specified div
            </summary>
            <param name="divId">the div to add content to</param>
            <param name="content">the content to add</param>
            <returns>the specified notification</returns>
        </member>
        <member name="M:LamestWebserver.NotificationService.Notification.ReloadPage">
            <summary>
            Creates a notification to reload the current page
            </summary>
            <returns>the specified notification</returns>
        </member>
        <member name="M:LamestWebserver.NotificationService.Notification.Redirect(LamestWebserver.JScriptBuilder.IJSValue)">
            <summary>
            Creates a notification to redirect the client to a new page
            </summary>
            <param name="newPageUrl">the url of the new page</param>
            <returns>the specified notification</returns>
        </member>
        <member name="M:LamestWebserver.NotificationService.Notification.Redirect(System.String)">
            <summary>
            Creates a notification to redirect the client to a new page
            </summary>
            <param name="newPageUrl">the url of the new page</param>
            <returns>the specified notification</returns>
        </member>
        <member name="M:LamestWebserver.NotificationService.Notification.Invalid">
            <summary>
            Creates a notification to tell that something went wrong
            </summary>
            <returns>the specified notification</returns>
        </member>
        <member name="M:LamestWebserver.NotificationService.Notification.Invalid(System.String)">
            <summary>
            Creates a notification to tell that something went wrong
            </summary>
            <param name="text">the description of what went wrong</param>
            <returns>the specified notification</returns>
        </member>
        <member name="M:LamestWebserver.NotificationService.Notification.LogNotification(LamestWebserver.NotificationService.Notification)">
            <summary>
            Parses a Notification to string for logging purposes
            </summary>
            <param name="notification">the notification to parse</param>
            <returns>the notification as string</returns>
        </member>
        <member name="T:LamestWebserver.NotificationService.KeepAliveNotification">
            <summary>
            A Notication to Keep the Connection alive
            </summary>
        </member>
        <member name="M:LamestWebserver.NotificationService.KeepAliveNotification.GetNotification">
            <inheritdoc />
        </member>
        <member name="T:LamestWebserver.NotificationService.InvalidNotification">
            <summary>
            A Notication to signalize invalid behaviour (please resend last msg)
            </summary>
        </member>
        <member name="M:LamestWebserver.NotificationService.InvalidNotification.GetNotification">
            <inheritdoc />
        </member>
        <member name="T:LamestWebserver.NotificationService.InvalidNotificationInfo">
            <summary>
            A Notication to signalize invalid behaviour with a description text (please resend last msg)
            </summary>
        </member>
        <member name="M:LamestWebserver.NotificationService.InvalidNotificationInfo.GetNotification">
            <inheritdoc />
        </member>
        <member name="T:LamestWebserver.NotificationService.ExecuteScriptNotification">
            <summary>
            A Notication to execute a given javascript on the client
            </summary>
        </member>
        <member name="M:LamestWebserver.NotificationService.ExecuteScriptNotification.GetNotification">
            <inheritdoc />
        </member>
        <member name="T:LamestWebserver.NotificationService.NotificationType">
            <summary>
            The type of the Notification
            </summary>
        </member>
        <member name="F:LamestWebserver.NotificationService.NotificationType.Acknowledge">
            <summary>
            Signalize that the last transfer was successful
            </summary>
        </member>
        <member name="F:LamestWebserver.NotificationService.NotificationType.KeepAlive">
            <summary>
            Kepps the connection open
            </summary>
        </member>
        <member name="F:LamestWebserver.NotificationService.NotificationType.Message">
            <summary>
            Transfers a message from the client to the server
            </summary>
        </member>
        <member name="F:LamestWebserver.NotificationService.NotificationType.Invalid">
            <summary>
            Transfers the information that something went wrong in the last message
            </summary>
        </member>
        <member name="F:LamestWebserver.NotificationService.NotificationType.ExecuteScript">
            <summary>
            Executes a javascript in the client
            </summary>
        </member>
        <member name="T:LamestWebserver.NotificationService.NotificationHandler">
            <summary>
            Provides a Notification Based System for Communicating via Websockets
            </summary>
        </member>
        <member name="F:LamestWebserver.NotificationService.NotificationHandler.DefaultMaximumLastMessageTime">
            <summary>
            The default time before a keepalive message is being sent.
            </summary>
        </member>
        <member name="F:LamestWebserver.NotificationService.NotificationHandler.MaximumLastMessageTime">
            <summary>
            The maximum time before a keepalive package is being sent.
            </summary>
        </member>
        <member name="M:LamestWebserver.NotificationService.NotificationHandler.StopAllNotificationHandlers">
            <summary>
            Stops all currently running NotificationHandlers
            </summary>
        </member>
        <member name="P:LamestWebserver.NotificationService.NotificationHandler.SendingFunction">
            <summary>
            The function used for sending messages to the server from the client
            </summary>
        </member>
        <member name="P:LamestWebserver.NotificationService.NotificationHandler.ID">
            <summary>
            The id of this NotificationHandler (for easier identification in the client)
            </summary>
        </member>
        <member name="P:LamestWebserver.NotificationService.NotificationHandler.ConnectedClients">
            <summary>
            The amount of currently connected clients.
            </summary>
        </member>
        <member name="F:LamestWebserver.NotificationService.NotificationHandler.HandlerThread">
            <summary>
            The thread that handles the keepalive sending
            </summary>
        </member>
        <member name="F:LamestWebserver.NotificationService.NotificationHandler.NotifyForKeepalives">
            <summary>
            Specifies whether the OnNotification Event shall also be called for keepalive messages - or only on messages carrying information.
            </summary>
        </member>
        <member name="E:LamestWebserver.NotificationService.NotificationHandler.OnNotification">
            <summary>
            This event is called whenever a client sends a notification
            </summary>
        </member>
        <member name="M:LamestWebserver.NotificationService.NotificationHandler.#ctor(System.String,System.Boolean,System.Net.IPEndPoint,System.Boolean,System.Nullable{System.TimeSpan})">
            <summary>
            Constructs a new NotificationHandler listening for websocket requests at a specified URL
            </summary>
            <param name="URL">the URL at which the Websocket Response will be available at</param>
            <param name="notifyForKeepalives">shall the OnNotification event be fired if the Notification is just a KeepAliveMessage</param>
            <param name="externalEndpoint">at which IP-Address and port is the server at for the client?</param>
            <param name="traceMessagesClient">shall the communication be logged in the client browser console? (for debugging)</param>
            <param name="maximumLastMessageTime">the maximum time at which the server decides not to sent a keepalive package after not hearing from the client. (null means DefaultMaximumLastMessageTime)</param>
        </member>
        <member name="P:LamestWebserver.NotificationService.NotificationHandler.ConnectionElement">
            <summary>
            The javascript code that handles the Notification based Communication to the server
            </summary>
        </member>
        <member name="M:LamestWebserver.NotificationService.NotificationHandler.ServerClients">
            <summary>
            The method which handles the sending of keepalive packages to the clients whenever the maximum time is reached.
            </summary>
        </member>
        <member name="M:LamestWebserver.NotificationService.NotificationHandler.StopHandler">
            <summary>
            Stops the NotificationHandler &amp; the handler thread; unregisters the page.
            </summary>
        </member>
        <member name="M:LamestWebserver.NotificationService.NotificationHandler.Notify(LamestWebserver.NotificationService.Notification)">
            <summary>
            Notify all connected clients.
            </summary>
            <param name="notification">the notification to send</param>
        </member>
        <member name="M:LamestWebserver.NotificationService.NotificationHandler.HandleResponse(LamestWebserver.NotificationService.NotificationResponse)">
            <summary>
            Handles Messages sent from the client
            </summary>
            <param name="response">the message from the client</param>
        </member>
        <member name="M:LamestWebserver.NotificationService.NotificationHandler.SendMessage(LamestWebserver.JScriptBuilder.IJSPiece)">
            <summary>
            Retrives JavaScript code to send a Message from the client to the server.
            </summary>
            <param name="messageGetter">The Method to get the Notification Contents from</param>
            <returns>A piece of JavaScript code</returns>
        </member>
        <member name="M:LamestWebserver.NotificationService.NotificationHandler.SendMessage(System.String)">
            <summary>
            Retrives JavaScript code to send a Message from the client to the server.
            </summary>
            <param name="message">the message to send as string</param>
            <returns>A piece of JavaScript code</returns>
        </member>
        <member name="T:LamestWebserver.NotificationService.NotificationResponse">
            <summary>
            The Response to a Notification from a client
            </summary>
        </member>
        <member name="F:LamestWebserver.NotificationService.NotificationResponse.IsMessage">
            <summary>
            Does the Reponse from the client contain a message?
            </summary>
        </member>
        <member name="F:LamestWebserver.NotificationService.NotificationResponse.Message">
            <summary>
            The message sent by the client (if any)
            </summary>
        </member>
        <member name="F:LamestWebserver.NotificationService.NotificationResponse.HandlerProxy">
            <summary>
            The Hanlder for the current connection
            </summary>
        </member>
        <member name="P:LamestWebserver.NotificationService.NotificationResponse.SessionData">
            <summary>
            The current SessionData
            </summary>
        </member>
        <member name="M:LamestWebserver.NotificationService.NotificationResponse.Reply(LamestWebserver.NotificationService.Notification)">
            <summary>
            Reply directly to the client who sent this message.
            </summary>
            <param name="notification">the Notification to send to the client</param>
        </member>
        <member name="M:LamestWebserver.NotificationService.NotificationResponse.ParseNotificationResponse(System.String,LamestWebserver.NotificationService.NotificationResponse,System.String)">
            <summary>
            Parses a Notification response from string
            </summary>
            <param name="input">the response string</param>
            <param name="response">the current response</param>
            <param name="URL">the url of the request</param>
        </member>
        <member name="M:LamestWebserver.NotificationService.NotificationResponse.GetValue(System.String)">
            <summary>
            Retrieves a value from the values the client sent.
            </summary>
            <param name="key">the key of the value</param>
            <returns>the value</returns>
        </member>
        <member name="M:LamestWebserver.NotificationService.NotificationResponse.LogNotification(LamestWebserver.NotificationService.NotificationResponse)">
            <summary>
            Parses the given notificationResponse to string to be used for logging purposes
            </summary>
            <param name="response">the notificationResponse</param>
            <returns>the notificationResponse as string</returns>
        </member>
        <member name="T:LamestWebserver.ProxyServices.ITransparentProxy">
            <summary>
            The interface for a Transparent Proxy
            </summary>
        </member>
        <member name="P:LamestWebserver.ProxyServices.ITransparentProxy.ProxyServerPort">
            <summary>
            The port at which the proxy will be available at
            </summary>
        </member>
        <member name="P:LamestWebserver.ProxyServices.ITransparentProxy.Gateway">
            <summary>
            the ipendpoint of the replicated service
            </summary>
        </member>
        <member name="M:LamestWebserver.ProxyServices.ITransparentProxy.Stop">
            <summary>
            Stops the transparent proxy
            </summary>
        </member>
        <member name="T:LamestWebserver.ProxyServices.TransparentProxy">
            <summary>
            A transparent proxy to redistribute other services locally or under different ports
            </summary>
        </member>
        <member name="P:LamestWebserver.ProxyServices.TransparentProxy.ProxyServerPort">
            <inheritdoc />
        </member>
        <member name="P:LamestWebserver.ProxyServices.TransparentProxy.Gateway">
            <inheritdoc />
        </member>
        <member name="M:LamestWebserver.ProxyServices.TransparentProxy.Stop">
            <inheritdoc />
        </member>
        <member name="M:LamestWebserver.ProxyServices.TransparentProxy.#ctor(System.Net.IPEndPoint,System.Int32,System.Byte[],System.Int32,System.Int32,System.Int32)">
            <summary>
            Constructs a new TranspartentProxy.
            </summary>
            <param name="gateway">the IPEndpoint of the replicated service</param>
            <param name="proxyServerPort">the port at which this service will be available at</param>
            <param name="response">the default response if the service is not available</param>
            <param name="timeout">the timeout at which to drop the connection to a client</param>
            <param name="gatewayTimeout">the timeout at which to expect the replicated service to be not available</param>
            <param name="packetSize">the size of a single packet that is forwarded</param>
            <exception cref="T:System.InvalidOperationException">Throws an exception if the port is currently blocked</exception>
        </member>
        <member name="T:LamestWebserver.HttpRequest">
            <summary>
            Represents a decoded HTTP Packet or is used for packing data into a HTTP Packet for sending
            </summary>
        </member>
        <member name="F:LamestWebserver.HttpRequest.Version">
            <summary>
            The HTTP Version of the Request
            </summary>
        </member>
        <member name="F:LamestWebserver.HttpRequest.ModifiedDate">
            <summary>
            if the request packet contains a modified date it is contained in here
            </summary>
        </member>
        <member name="F:LamestWebserver.HttpRequest.RequestUrl">
            <summary>
            The contents of the request package
            </summary>
        </member>
        <member name="F:LamestWebserver.HttpRequest.Cookies">
            <summary>
            The cookies, that were set in the request
            </summary>
        </member>
        <member name="F:LamestWebserver.HttpRequest.VariablesHttpHead">
            <summary>
            HEAD variables set or mentioned in the request
            </summary>
        </member>
        <member name="F:LamestWebserver.HttpRequest.VariablesHttpPost">
            <summary>
            POST variables set or mentioned in the request
            </summary>
        </member>
        <member name="F:LamestWebserver.HttpRequest.IsWebsocketUpgradeRequest">
            <summary>
            Is the sent package a upgradeRequest to a WebSocket?
            </summary>
        </member>
        <member name="F:LamestWebserver.HttpRequest.HttpType">
            <summary>
            the HTTP type of the request (GET, POST)
            </summary>
        </member>
        <member name="P:LamestWebserver.HttpRequest.RawRequest">
            <summary>
            Retrieves the raw request code.
            </summary>
        </member>
        <member name="F:LamestWebserver.HttpRequest.Stream">
            <summary>
            The current stream which is used for communicating.
            </summary>
        </member>
        <member name="F:LamestWebserver.HttpRequest.TcpClient">
            <summary>
            The current TcpClient which is used for communicating.
            </summary>
        </member>
        <member name="F:LamestWebserver.HttpRequest.IsIncompleteRequest">
            <summary>
            Is true if the browser just sent a request with declared but missing POST information
            </summary>
        </member>
        <member name="F:LamestWebserver.HttpRequest.Range">
            <summary>
            describes the range of bytes there are requested
            item1 = begin
            item2 = end
            is null when all bytes are requested
            </summary>
        </member>
        <member name="M:LamestWebserver.HttpRequest.Constructor(System.String@,System.String,System.IO.Stream)">
            <summary>
            The default constructor for a HTTP Request from string.
            if the version is null then please ignore the packet and wait for the next one to contain the POST values. this method will automatically stitch these packets together.
            </summary>
            <param name="input">the packet from the client decoded to string</param>
            <param name="lastPacket">the string contents of the last packet (Chrome POST packets are split in two packets)</param>
            <param name="stream">the stream at which the packet arrived (only used for sessionData)</param>
            <returns>the corresponding HTTP Packet</returns>
        </member>
        <member name="T:LamestWebserver.HttpType">
            <summary>
            The different kinds of HTTP Requests we allow
            </summary>
        </member>
        <member name="F:LamestWebserver.HttpType.Get">
            <summary>
            A GET Request
            </summary>
        </member>
        <member name="F:LamestWebserver.HttpType.Post">
            <summary>
            A POST Request containing values
            </summary>
        </member>
        <member name="T:LamestWebserver.Master">
            <summary>
            Contains Globally available and important methods for LamestWebServer
            </summary>
        </member>
        <member name="M:LamestWebserver.Master.DiscoverPages">
            <summary>
            Automatically discovers pages in the caller Assembly
            </summary>
        </member>
        <member name="M:LamestWebserver.Master.DiscoverPagesFromFile(System.String)">
            <summary>
            Automatically discovers pages in the specified assembly file
            <param name="filename">the assembly file path to load</param>
            </summary>
        </member>
        <member name="M:LamestWebserver.Master.DiscoverPagesFromDirectory(System.String)">
            <summary>
            Automatically discovers pages in the specified assembly-directory
            <param name="path">the assembly directory path to load</param>
            </summary>
        </member>
        <member name="M:LamestWebserver.Master.DiscoverPages(System.Reflection.Assembly,System.Action{System.String})">
            <summary>
            Automatically discovers pages in the specified Assembly
            </summary>
            <param name="asm">the assembly to discover pages in</param>
            <param name="onPageFound">the code to be executed on every page found (Parameter is the Name of the Type)</param>
        </member>
        <member name="T:LamestWebserver.Master.GetContents">
            <summary>
            The prototype for PageResponse Functions.
            </summary>
            <param name="data">the current SessionData</param>
            <returns>the response as string</returns>
        </member>
        <member name="T:LamestWebserver.Master.GetDataContents">
            <summary>
            The prototype for DataResponse Functions.
            </summary>
            <param name="data">The current SessionData.</param>
            <param name="contentType">The mime-contentType of the returned data.</param>
            <param name="encoding">The encoding of the returned response.</param>
            <returns>The response as byte array.</returns>
        </member>
        <member name="T:LamestWebserver.Master.GetDirectoryContents">
            <summary>
            The prototype for a response of a directory page from the server.
            </summary>
            <param name="data">The current SessionData.</param>
            <param name="subUrl">The sub-URL of this directory request.</param>
            <returns>The response as string.</returns>
        </member>
        <member name="T:LamestWebserver.Master.AddPageResponseFunction">
            <summary>
            The prototype for adding new pages to the servers.
            </summary>
            <param name="url">the URL</param>
            <param name="function">The code to execute.</param>
        </member>
        <member name="T:LamestWebserver.Master.AddDataResponseFunction">
            <summary>
            The prototype for adding new dataResponses to the servers.
            </summary>
            <param name="url">The URL.</param>
            <param name="function">The code to execute.</param>
        </member>
        <member name="T:LamestWebserver.Master.AddDirectoryFunction">
            <summary>
            The prototype for adding new directory pages to the servers.
            </summary>
            <param name="url">the url of the directory</param>
            <param name="function">the function to add</param>
        </member>
        <member name="T:LamestWebserver.Master.RemoveFunction">
            <summary>
            The prototype for removing a page from the server 
            </summary>
            <param name="url">the URL of the page</param>
        </member>
        <member name="E:LamestWebserver.Master.AddPageResponseEvent">
            <summary>
            The event, that raises if a page is added.
            </summary>
        </member>
        <member name="E:LamestWebserver.Master.RemovePageResponseEvent">
            <summary>
            The event, that raises if a page is removed.
            </summary>
        </member>
        <member name="E:LamestWebserver.Master.AddDataResponseEvent">
            <summary>
            The event, that raises if a page is added.
            </summary>
        </member>
        <member name="E:LamestWebserver.Master.RemoveDataResponseEvent">
            <summary>
            the event, that raises if a page is removed
            </summary>
        </member>
        <member name="E:LamestWebserver.Master.AddOneTimeFunctionEvent">
            <summary>
            The event, that raises if a page, which is only available for one request, is added.
            </summary>
        </member>
        <member name="E:LamestWebserver.Master.AddDirectoryFunctionEvent">
            <summary>
            The event, that raises if a directory page is added.
            </summary>
        </member>
        <member name="E:LamestWebserver.Master.RemoveDirectoryFunctionEvent">
            <summary>
            The event, thath raises if a directory page is removed.
            </summary>
        </member>
        <member name="M:LamestWebserver.Master.AddPageResponseToServer(System.String,LamestWebserver.Master.GetContents)">
            <summary>
            Adds an arbitrary response to the listening servers.
            </summary>
            <param name="url">The url of the page to add.</param>
            <param name="function">The code of the page.</param>
        </member>
        <member name="M:LamestWebserver.Master.RemovePageResponseFromServer(System.String)">
            <summary>
            Removes an arbitrary page response from the listening servers.
            </summary>
            <param name="url">the URL of the page to remove.</param>
        </member>
        <member name="M:LamestWebserver.Master.AddOneTimePageResponseToServer(System.String,LamestWebserver.Master.GetContents)">
            <summary>
            Adds a function to all listening servers, which will only be available once.
            </summary>
            <param name="url">the URL at which this page will be available.</param>
            <param name="function">the code to execute.</param>
        </member>
        <member name="M:LamestWebserver.Master.AddDataResponseToServer(System.String,LamestWebserver.Master.GetDataContents)">
            <summary>
            Adds an arbitrary data response to the listening servers.
            </summary>
            <param name="url">the url of the page to add.</param>
            <param name="function">the code of the data response.</param>
        </member>
        <member name="M:LamestWebserver.Master.RemoveDataResponseFromServer(System.String)">
            <summary>
            Removes an arbitrary data response from the listening servers.
            </summary>
            <param name="url">The URL of the data response to remove.</param>
        </member>
        <member name="M:LamestWebserver.Master.AddDirectoryPageToServer(System.String,LamestWebserver.Master.GetDirectoryContents)">
            <summary>
            Adds a directory function to all listening servers.
            </summary>
            <param name="url">The URL at which this directory page will be available.</param>
            <param name="function">The code to execute.</param>
        </member>
        <member name="M:LamestWebserver.Master.RemoveDirectoryPageFromServer(System.String)">
            <summary>
            Removes a directory function from all listening servers.
            </summary>
            <param name="url">The URL at which this directory page is available.</param>
        </member>
        <member name="F:LamestWebserver.Master.lwsLogoBase64">
            <summary>
            The LWS-Logo as Base64 string for HTML-Img-Elements
            </summary>
        </member>
        <member name="M:LamestWebserver.Master.GetErrorMsg(System.String,System.String)">
            <summary>
            Returns a LamestWebServer-style error message.
            </summary>
            <param name="title">The title of the error message.</param>
            <param name="message">The error message.</param>
            <returns>A complete html page as string.</returns>
        </member>
        <member name="M:LamestWebserver.Master.StartServer(System.Int32,System.String,System.Boolean)">
            <summary>
            Starts a new Webserver listening for pages to add &amp; remove.
            </summary>
            <param name="port">the port of the server</param>
            <param name="directory">the main web directory of the server (e.g. &quot;./web&quot;)</param>
            <param name="silent">shall the server print output to the console?</param>
        </member>
        <member name="M:LamestWebserver.Master.StopServers">
            <summary>
            Stops all running servers.
            </summary>
        </member>
        <member name="M:LamestWebserver.Master.StopServer(System.Int32)">
            <summary>
            Stops an arbitrary server. If it's the last one it stops everything server related (Threaded Worker, Notification Handlers)
            </summary>
            <param name="port">the port of the server to stop</param>
        </member>
        <member name="M:LamestWebserver.Master.AddWebsocketHandler(LamestWebserver.WebSocketCommunicationHandler)">
            <summary>
            Adds a WebSocketCommunicationHandler to all listening Servers.
            </summary>
            <param name="webSocketCommunicationHandler">the WebSocketCommunicationHandler</param>
        </member>
        <member name="M:LamestWebserver.Master.RemoveWebsocketHandler(System.String)">
            <summary>
            Removes a WebSocketCommunicationHandler from all listening Servers.
            </summary>
            <param name="URL">the URL of the WebSocketCommunicationHandler</param>
        </member>
        <member name="T:LamestWebserver.Security.Encryption">
            <summary>
            Provides basic functionality for encryption and decryption.
            </summary>
        </member>
        <member name="M:LamestWebserver.Security.Encryption.Encrypt(System.String,System.Byte[],System.Byte[])">
            <summary>
            Encrypts a given string with AES128 CounterMode.
            </summary>
            <param name="message">the message to encrypt</param>
            <param name="key">the key (32 bytes recommended)</param>
            <param name="iv">the iv (16 bytes)</param>
            <returns>the encrypted message as base64 encoded string</returns>
        </member>
        <member name="M:LamestWebserver.Security.Encryption.Decrypt(System.String,System.Byte[],System.Byte[])">
            <summary>
            Decrypts a given Base64 encoded string using AES128 in CounterMode
            </summary>
            <param name="message">the encrypted message</param>
            <param name="key">the key (32 bytes recommended)</param>
            <param name="iv">the iv (16 bytes)</param>
            <returns>the decrypted result as UTF8-string</returns>
        </member>
        <member name="M:LamestWebserver.Security.Encryption.Encrypt(System.Byte[],System.Byte[],System.Byte[])">
            <summary>
            Encrypts a given byte[] with AES128 CounterMode.
            </summary>
            <param name="message">the message to encrypt</param>
            <param name="key">the key (32 bytes recommended)</param>
            <param name="iv">the iv (16 bytes)</param>
            <returns>the encrypted message as byte[]</returns>
        </member>
        <member name="M:LamestWebserver.Security.Encryption.Decrypt(System.Byte[],System.Byte[],System.Byte[])">
            <summary>
            Decrypts a given byte[] using AES128 in CounterMode
            </summary>
            <param name="message">the encrypted message</param>
            <param name="key">the key (32 bytes recommended)</param>
            <param name="iv">the iv (16 bytes)</param>
            <returns>returns the decrypted result as byte[]</returns>
        </member>
        <member name="M:LamestWebserver.Security.Encryption.GetKey">
            <summary>
            Generates a secure 32 byte key.
            </summary>
            <returns>the key</returns>
        </member>
        <member name="M:LamestWebserver.Security.Encryption.GetIV">
            <summary>
            Generates a secure 16 byte initialization vector.
            </summary>
            <returns>the IV</returns>
        </member>
        <member name="T:LamestWebserver.Security.Password">
            <summary>
            A safe way to store passwords.
            (implements IXmlSerializable, ISerializable)
            </summary>
        </member>
        <member name="M:LamestWebserver.Security.Password.#ctor">
            <summary>
            Only used for deserialisation
            </summary>
        </member>
        <member name="M:LamestWebserver.Security.Password.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Only used for deserialization
            </summary>
            <param name="info">SerializationInfo</param>
            <param name="context">StreamingContext</param>
        </member>
        <member name="M:LamestWebserver.Security.Password.#ctor(System.String)">
            <summary>
            Constructs a new password object
            </summary>
            <param name="password">the password</param>
            <exception cref="T:System.InvalidOperationException">throws an exception is the password is null or empty</exception>
        </member>
        <member name="M:LamestWebserver.Security.Password.IsValid(System.String)">
            <summary>
            Checks whether a password matches this password
            </summary>
            <param name="password">the password to compare to</param>
            <returns></returns>
            <exception cref="T:System.InvalidOperationException">throws an exception if the password is null or empty</exception>
        </member>
        <member name="M:LamestWebserver.Security.Password.GetSchema">
            <inheritdoc />
        </member>
        <member name="M:LamestWebserver.Security.Password.ReadXml(System.Xml.XmlReader)">
            <inheritdoc />
        </member>
        <member name="M:LamestWebserver.Security.Password.WriteXml(System.Xml.XmlWriter)">
            <inheritdoc />
        </member>
        <member name="M:LamestWebserver.Security.Password.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <inheritdoc />
        </member>
        <member name="T:LamestWebserver.Synchronization.SynchronizedCollection`2">
            <summary>
            Provides synchronized access to an ICollection&lt;T&gt;.
            </summary>
            <typeparam name="T">The type of the Collection.</typeparam>
            <typeparam name="TCollectionType">The internal implementation of the Collection used.</typeparam>
        </member>
        <member name="P:LamestWebserver.Synchronization.SynchronizedCollection`2.InnerCollection">
            <summary>
            The internal Collection for unsynchronized access.
            </summary>
        </member>
        <member name="M:LamestWebserver.Synchronization.SynchronizedCollection`2.#ctor">
            <summary>
            Constructs a new SynchronizedCollection object and initializes the InnerCollection with it's default constructor.
            </summary>
        </member>
        <member name="M:LamestWebserver.Synchronization.SynchronizedCollection`2.#ctor(`1)">
            <summary>
            Constructs a new SynchronizedCollection.
            </summary>
            <param name="collection">the collection to use</param>
        </member>
        <member name="M:LamestWebserver.Synchronization.SynchronizedCollection`2.op_Implicit(LamestWebserver.Synchronization.SynchronizedCollection{`0,`1})~System.Boolean">
            <summary>
            Provides functionality like NullCheckable.
            </summary>
            <param name="obj">The current object.</param>
        </member>
        <member name="P:LamestWebserver.Synchronization.SynchronizedCollection`2.Count">
            <inheritdoc />
        </member>
        <member name="P:LamestWebserver.Synchronization.SynchronizedCollection`2.IsReadOnly">
            <inheritdoc />
        </member>
        <member name="M:LamestWebserver.Synchronization.SynchronizedCollection`2.Add(`0)">
            <inheritdoc />
        </member>
        <member name="M:LamestWebserver.Synchronization.SynchronizedCollection`2.Clear">
            <inheritdoc />
        </member>
        <member name="M:LamestWebserver.Synchronization.SynchronizedCollection`2.Contains(`0)">
            <inheritdoc />
        </member>
        <member name="M:LamestWebserver.Synchronization.SynchronizedCollection`2.CopyTo(`0[],System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:LamestWebserver.Synchronization.SynchronizedCollection`2.GetEnumerator">
            <inheritdoc />
        </member>
        <member name="M:LamestWebserver.Synchronization.SynchronizedCollection`2.Remove(`0)">
            <inheritdoc />
        </member>
        <member name="M:LamestWebserver.Synchronization.SynchronizedCollection`2.System#Collections#IEnumerable#GetEnumerator">
            <inheritdoc />
        </member>
        <member name="M:LamestWebserver.Synchronization.SynchronizedCollection`2.Equals(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:LamestWebserver.Synchronization.SynchronizedCollection`2.ToString">
            <inheritdoc />
        </member>
        <member name="T:LamestWebserver.Synchronization.SynchronizedDictionary`3">
            <summary>
            Provides synchronized access to an IDictionary&lt;TKey, TValue&gt;.
            </summary>
            <typeparam name="TKey">The type of the stored Keys.</typeparam>
            <typeparam name="TValue">The type of the stored Values.</typeparam>
            <typeparam name="TCollectionType">The internal implementation of the Dictionary used.</typeparam>
        </member>
        <member name="P:LamestWebserver.Synchronization.SynchronizedDictionary`3.InnerDictionary">
            <summary>
            The internal Dictionary for unsynchronized access.
            </summary>
        </member>
        <member name="M:LamestWebserver.Synchronization.SynchronizedDictionary`3.#ctor">
            <summary>
            Constructs a new SynchronizedDictionary object and initializes the InnerDictionary with it's default constructor.
            </summary>
        </member>
        <member name="M:LamestWebserver.Synchronization.SynchronizedDictionary`3.#ctor(`2)">
            <summary>
            Constructs a new SynchronizedDictionary object and initializes the InnerDictionary.
            </summary>
            <param name="dictionary">The value to initialize the InnerDictionary with.</param>
        </member>
        <member name="M:LamestWebserver.Synchronization.SynchronizedDictionary`3.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            A Deserialization constructor.
            </summary>
            <param name="info">The serialization info.</param>
            <param name="context">The streaming context.</param>
        </member>
        <member name="M:LamestWebserver.Synchronization.SynchronizedDictionary`3.op_Implicit(LamestWebserver.Synchronization.SynchronizedDictionary{`0,`1,`2})~System.Boolean">
            <summary>
            Provides functionality like NullCheckable.
            </summary>
            <param name="obj">The current object.</param>
        </member>
        <member name="P:LamestWebserver.Synchronization.SynchronizedDictionary`3.Item(`0)">
            <inheritdoc />
        </member>
        <member name="P:LamestWebserver.Synchronization.SynchronizedDictionary`3.Count">
            <inheritdoc />
        </member>
        <member name="P:LamestWebserver.Synchronization.SynchronizedDictionary`3.IsReadOnly">
            <inheritdoc />
        </member>
        <member name="P:LamestWebserver.Synchronization.SynchronizedDictionary`3.Keys">
            <inheritdoc />
        </member>
        <member name="P:LamestWebserver.Synchronization.SynchronizedDictionary`3.Values">
            <inheritdoc />
        </member>
        <member name="M:LamestWebserver.Synchronization.SynchronizedDictionary`3.Add(System.Collections.Generic.KeyValuePair{`0,`1})">
            <inheritdoc />
        </member>
        <member name="M:LamestWebserver.Synchronization.SynchronizedDictionary`3.Add(`0,`1)">
            <inheritdoc />
        </member>
        <member name="M:LamestWebserver.Synchronization.SynchronizedDictionary`3.Clear">
            <inheritdoc />
        </member>
        <member name="M:LamestWebserver.Synchronization.SynchronizedDictionary`3.Contains(System.Collections.Generic.KeyValuePair{`0,`1})">
            <inheritdoc />
        </member>
        <member name="M:LamestWebserver.Synchronization.SynchronizedDictionary`3.ContainsKey(`0)">
            <inheritdoc />
        </member>
        <member name="M:LamestWebserver.Synchronization.SynchronizedDictionary`3.CopyTo(System.Collections.Generic.KeyValuePair{`0,`1}[],System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:LamestWebserver.Synchronization.SynchronizedDictionary`3.GetEnumerator">
            <inheritdoc />
        </member>
        <member name="M:LamestWebserver.Synchronization.SynchronizedDictionary`3.Remove(System.Collections.Generic.KeyValuePair{`0,`1})">
            <inheritdoc />
        </member>
        <member name="M:LamestWebserver.Synchronization.SynchronizedDictionary`3.Remove(`0)">
            <inheritdoc />
        </member>
        <member name="M:LamestWebserver.Synchronization.SynchronizedDictionary`3.TryGetValue(`0,`1@)">
            <inheritdoc />
        </member>
        <member name="M:LamestWebserver.Synchronization.SynchronizedDictionary`3.System#Collections#IEnumerable#GetEnumerator">
            <inheritdoc />
        </member>
        <member name="M:LamestWebserver.Synchronization.SynchronizedDictionary`3.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <inheritdoc />
        </member>
        <member name="M:LamestWebserver.Synchronization.SynchronizedDictionary`3.GetSchema">
            <inheritdoc />
        </member>
        <member name="M:LamestWebserver.Synchronization.SynchronizedDictionary`3.ReadXml(System.Xml.XmlReader)">
            <inheritdoc />
        </member>
        <member name="M:LamestWebserver.Synchronization.SynchronizedDictionary`3.WriteXml(System.Xml.XmlWriter)">
            <inheritdoc />
        </member>
        <member name="M:LamestWebserver.Synchronization.SynchronizedDictionary`3.Equals(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:LamestWebserver.Synchronization.SynchronizedDictionary`3.ToString">
            <inheritdoc />
        </member>
        <member name="T:LamestWebserver.Synchronization.SynchronizedValue`1">
            <summary>
            Provides synchonized access to a variable.
            NOT NullCheckable, because SynchronizedValue&lt;bool&gt; would result in unexpected results when casting to bool.
            </summary>
            <typeparam name="T">The Type of the variable.</typeparam>
        </member>
        <member name="P:LamestWebserver.Synchronization.SynchronizedValue`1.Value">
            <summary>
            The synchronized Value.
            </summary>
        </member>
        <member name="M:LamestWebserver.Synchronization.SynchronizedValue`1.#ctor">
            <summary>
            Empty or Deserialition Constructor.
            </summary>
        </member>
        <member name="M:LamestWebserver.Synchronization.SynchronizedValue`1.#ctor(`0)">
            <summary>
            Constructs a new SynchronizedValue object and initializes the internal Value.
            </summary>
            <param name="value">The initial value.</param>
        </member>
        <member name="M:LamestWebserver.Synchronization.SynchronizedValue`1.op_Implicit(LamestWebserver.Synchronization.SynchronizedValue{`0})~`0">
            <summary>
            Reads from the Value synchronously.
            (You can easily get unsynchronized access using this cast if you set a variable 'T x' to this and then start using 'x' instead of this SynchronizedValue&lt;T&gt;)
            </summary>
            <param name="syncValue">The SynchronizedValue to read from.</param>
        </member>
        <member name="M:LamestWebserver.Synchronization.SynchronizedValue`1.Equals(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:LamestWebserver.Synchronization.SynchronizedValue`1.ToString">
            <inheritdoc />
        </member>
        <member name="M:LamestWebserver.Synchronization.SynchronizedValue`1.GetHashCode">
            <inheritdoc />
        </member>
        <member name="T:LamestWebserver.Synchronization.UsableMutexSlim">
            <summary>
            Just a simple UsableMutex with no handling for deadlocks - Only to use Mutexes with IDisposable.
            </summary>
        </member>
        <member name="M:LamestWebserver.Synchronization.UsableMutexSlim.Lock">
            <summary>
            Locks the mutex; IDisposable.
            </summary>
            <returns>an IDisposable object that releases the mutex on Dispose()</returns>
        </member>
        <member name="T:LamestWebserver.Synchronization.UsableMutexSlim.UsableSlimMutexLocker">
            <summary>
            Just a simple IDisposable Mutex lock/release.
            </summary>
        </member>
        <member name="M:LamestWebserver.Synchronization.UsableMutexSlim.UsableSlimMutexLocker.ReLock">
            <summary>
            Locks the internal Mutex again.
            </summary>
        </member>
        <member name="M:LamestWebserver.Synchronization.UsableMutexSlim.UsableSlimMutexLocker.Dispose">
            <inheritdoc />
        </member>
        <member name="T:LamestWebserver.Synchronization.UsableLocker">
            <summary>
            Locks and Releases a ILockable object using IDisposable.
            </summary>
        </member>
        <member name="M:LamestWebserver.Synchronization.UsableLocker.#ctor(LamestWebserver.Synchronization.ILockable)">
            <summary>
            Constructs a new UsableLocker
            </summary>
            <param name="obj">the ILockable object</param>
        </member>
        <member name="M:LamestWebserver.Synchronization.UsableLocker.ReLock">
            <summary>
            Locks the internal Mutex again.
            </summary>
        </member>
        <member name="M:LamestWebserver.Synchronization.UsableLocker.Dispose">
            <summary>
            Releases the internal Mutex.
            </summary>
        </member>
        <member name="M:LamestWebserver.Synchronization.UsableLocker.TryLock(LamestWebserver.Synchronization.ILockable,System.Action)">
            <summary>
            Executes code locking and releasing a given mutex before and after and passes exceptions through this behaviour.
            </summary>
            <param name="obj">the ILockable object</param>
            <param name="action">the code to execute</param>
        </member>
        <member name="T:LamestWebserver.Synchronization.UsableMutexLocker">
            <summary>
            Locks and Releases a Mutex via IDisposable.
            </summary>
        </member>
        <member name="M:LamestWebserver.Synchronization.UsableMutexLocker.#ctor(System.Threading.Mutex)">
            <summary>
            Creates a new UsableMutexLocker.
            </summary>
            <param name="mutex">the mutex to lock</param>
        </member>
        <member name="M:LamestWebserver.Synchronization.UsableMutexLocker.Dispose">
            <inheritdoc />
        </member>
        <member name="M:LamestWebserver.Synchronization.UsableMutexLocker.TryLock(System.Threading.Mutex,System.Action)">
            <summary>
            Executes code locking and releasing a given mutex before and after and passes exceptions through this behaviour.
            </summary>
            <param name="mutex">the mutex</param>
            <param name="action">the code to execute</param>
        </member>
        <member name="T:LamestWebserver.Synchronization.ILockable">
            <summary>
            A Lockable object
            </summary>
        </member>
        <member name="P:LamestWebserver.Synchronization.ILockable.Mutex">
            <summary>
            the mutex that is locked.
            </summary>
        </member>
        <member name="T:LamestWebserver.Synchronization.UsableLockSimple">
            <summary>
            Like a regular Mutex, but simplified, deadlock-safe (due to auto-releasing after a certain time) and disposable if Lock() is called, making it available in using statements.
            UsableLockSimple.Lock() is also available for sorted locking to prevent deadlocks.
            Attention: UsableLockSimple might retry actions if deadlocks occur or a certain operation takes to long. Keep that in mind.
            <para />
            Do not use this Synchronizer if you're experienced with multi-threading and expect it to work like a Mutex. This is a simplified Synchronizer to help unexperienced People to write multi-threaded applications.
            
            <example>
            using (usableLockSimple.Lock())
            {
                // Your Code.
            }
            </example>
            </summary>
        </member>
        <member name="F:LamestWebserver.Synchronization.UsableLockSimple.MutexWaitMillis">
            <summary>
            The milliseconds to wait for the mutex to be free.
            </summary>
        </member>
        <member name="F:LamestWebserver.Synchronization.UsableLockSimple.MutexSelfRelease">
            <summary>
            The milliseconds to wait for the mutex to expect a neverending method might have aquired it and just releasing it by yourself.
            </summary>
        </member>
        <member name="M:LamestWebserver.Synchronization.UsableLockSimple.#ctor">
            <summary>
            Constructs a new UsableLockSimple.
            </summary>
        </member>
        <member name="M:LamestWebserver.Synchronization.UsableLockSimple.HandleTimer">
            <summary>
            Checks if the lastLocked time is to far away, so that we should ignore the value of it and release the mutex
            </summary>
        </member>
        <member name="M:LamestWebserver.Synchronization.UsableLockSimple.StartTimer(System.Boolean)">
            <summary>
            Sets the current Time as lastLocked time if the execute value is true
            </summary>
            <param name="execute">is only executed if true - this value is passed through (like Mutex.WaitOne return value)</param>
            <returns>the execute value</returns>
        </member>
        <member name="M:LamestWebserver.Synchronization.UsableLockSimple.StopTimer">
            <summary>
            Sets the current Thread as not locked
            </summary>
        </member>
        <member name="M:LamestWebserver.Synchronization.UsableLockSimple.WaitOne">
            <summary>
            Locks the mutex.
            </summary>
            <returns>true if the mutex could be locked in time</returns>
        </member>
        <member name="M:LamestWebserver.Synchronization.UsableLockSimple.ReleaseMutex">
            <summary>
            Releases the mutex.
            </summary>
        </member>
        <member name="M:LamestWebserver.Synchronization.UsableLockSimple.Lock">
            <summary>
            Locks the innerMutex in a way, so that it can be used through a using statement (IDisposable)
            </summary>
            <returns></returns>
        </member>
        <member name="M:LamestWebserver.Synchronization.UsableLockSimple.Lock(LamestWebserver.Synchronization.UsableLockSimple[])">
            <summary>
            Is used to lock especially multiple mutexes in sorted order to prevent deadlocks
            </summary>
            <param name="mutexes">the UsableLockSimple-s to lock</param>
            <returns>a UsableMutliMutexLocker, that already locked the given mutexes</returns>
        </member>
        <member name="T:LamestWebserver.Synchronization.UsableMultiMutexLocker">
            <summary>
            A MutexLocker for multiple Mutexes
            </summary>
        </member>
        <member name="M:LamestWebserver.Synchronization.UsableMultiMutexLocker.#ctor(System.Threading.Mutex[])">
            <summary>
            constructs a new UsableMultiMutexLocker and already locks all given mutexes.
            </summary>
            <param name="mutexes">the mutexes to lock</param>
        </member>
        <member name="M:LamestWebserver.Synchronization.UsableMultiMutexLocker.Dispose">
            <summary>
            Releases all locked mutexes in opposite locking order.
            </summary>
        </member>
        <member name="T:LamestWebserver.Synchronization.UsableMultiUsableMutexLocker">
            <summary>
            A MutexLocker for multiple UsableLockSimple-s
            </summary>
        </member>
        <member name="M:LamestWebserver.Synchronization.UsableMultiUsableMutexLocker.#ctor(LamestWebserver.Synchronization.UsableLockSimple[])">
            <summary>
            constructs a new UsableMultiUsableMutexLocker and already locks all given mutexes.
            </summary>
            <param name="mutexes">the UsableLockSimple-s to lock</param>
        </member>
        <member name="M:LamestWebserver.Synchronization.UsableMultiUsableMutexLocker.Dispose">
            <summary>
            Releases all locked UsableLockSimple-s in opposite locking order.
            </summary>
        </member>
        <member name="T:LamestWebserver.Synchronization.MutexRetryException">
            <summary>
            This exception symbolizes, that a mutex could not be aquired in time and the Operation has been aborted.
            </summary>
        </member>
        <member name="T:LamestWebserver.Synchronization.UsableWriteLock">
            <summary>
            A safe and fast way to read and write from shared ressources without blocking everything.
            </summary>
        </member>
        <member name="M:LamestWebserver.Synchronization.UsableWriteLock.LockRead">
            <summary>
            Locks the WriteLock for reading
            </summary>
            <returns>An IDisposable Object to be used in a using statement</returns>
        </member>
        <member name="M:LamestWebserver.Synchronization.UsableWriteLock.LockWrite">
            <summary>
            Locks the WriteLock for Writing
            </summary>
            <returns>An IDisposable Object to be used in a using statement</returns>
        </member>
        <member name="M:LamestWebserver.Synchronization.UsableWriteLock.LockRead(LamestWebserver.Synchronization.UsableWriteLock[])">
            <summary>
            Locks a couple of UsableWriteLocks for Reading in order to prevent deadlocks.
            </summary>
            <param name="locks">the WriteLocks to lock</param>
            <returns>a multidisposer to release the locks in opposite order</returns>
        </member>
        <member name="M:LamestWebserver.Synchronization.UsableWriteLock.LockWrite(LamestWebserver.Synchronization.UsableWriteLock[])">
            <summary>
            Locks a couple of UsableWriteLocks for Writing in order to prevent deadlocks.
            </summary>
            <param name="locks">the WriteLocks to lock</param>
            <returns>a multidisposer to release the locks in opposite order</returns>
        </member>
        <member name="T:LamestWebserver.Synchronization.UsableWriteLock.UsableWriteLockDisposable_write">
            <summary>
            A helper class to be used in a using statement
            </summary>
        </member>
        <member name="M:LamestWebserver.Synchronization.UsableWriteLock.UsableWriteLockDisposable_write.Dispose">
            <summary>
            Releases the Semaphore
            </summary>
        </member>
        <member name="T:LamestWebserver.Synchronization.UsableWriteLock.UsableWriteLockDisposable_read">
            <summary>
            A helper class to be used in a using statement
            </summary>
        </member>
        <member name="M:LamestWebserver.Synchronization.UsableWriteLock.UsableWriteLockDisposable_read.Dispose">
            <summary>
            Releases the mutex and unsubscribes from the writeLock
            </summary>
        </member>
        <member name="T:LamestWebserver.Synchronization.UsableSemaphore">
            <summary>
            A wrapper class for a writeLock to be used in a using statement
            </summary>
        </member>
        <member name="M:LamestWebserver.Synchronization.UsableSemaphore.#ctor(System.Threading.SemaphoreSlim)">
            <summary>
            Constructs a new UsableSemaphore. The Semaphore is not locked and will not be locked until you call Lock().
            </summary>
            <param name="semaphore">the writeLock</param>
        </member>
        <member name="M:LamestWebserver.Synchronization.UsableSemaphore.Lock">
            <summary>
            Locks this Semaphore.
            </summary>
        </member>
        <member name="M:LamestWebserver.Synchronization.UsableSemaphore.Dispose">
            <summary>
            Releases this Semaphore.
            </summary>
        </member>
        <member name="T:LamestWebserver.Synchronization.MultiDisposer">
            <summary>
            A MultiDisposer disposes all given object on dispose.
            </summary>
        </member>
        <member name="M:LamestWebserver.Synchronization.MultiDisposer.#ctor(System.IDisposable[])">
            <summary>
            Creates a MultiDisposer.
            </summary>
            <param name="disposables">the IDisposable objects to dispose on dispose.</param>
        </member>
        <member name="M:LamestWebserver.Synchronization.MultiDisposer.Dispose">
            <summary>
            Disposes all given disposing objects in oposite order.
            </summary>
        </member>
        <member name="T:LamestWebserver.UI.CachedByDefault.CPageBuilder">
            <inheritdoc />
        </member>
        <member name="M:LamestWebserver.UI.CachedByDefault.CPageBuilder.#ctor(System.String,System.String)">
            <inheritdoc />
        </member>
        <member name="M:LamestWebserver.UI.CachedByDefault.CPageBuilder.#ctor(System.String,System.String,System.String,System.Func{LamestWebserver.SessionData,System.Boolean})">
            <inheritdoc />
        </member>
        <member name="M:LamestWebserver.UI.CachedByDefault.CPageBuilder.#ctor(System.String)">
            <inheritdoc />
        </member>
        <member name="T:LamestWebserver.UI.CachedByDefault.CLine">
            <inheritdoc />
        </member>
        <member name="M:LamestWebserver.UI.CachedByDefault.CLine.#ctor">
            <inheritdoc />
        </member>
        <member name="T:LamestWebserver.UI.CachedByDefault.CPlainText">
            <inheritdoc />
        </member>
        <member name="M:LamestWebserver.UI.CachedByDefault.CPlainText.#ctor(System.String)">
            <inheritdoc />
        </member>
        <member name="T:LamestWebserver.UI.CachedByDefault.CString">
            <inheritdoc />
        </member>
        <member name="M:LamestWebserver.UI.CachedByDefault.CString.#ctor(System.String)">
            <inheritdoc />
        </member>
        <member name="T:LamestWebserver.UI.CachedByDefault.CLink">
            <inheritdoc />
        </member>
        <member name="M:LamestWebserver.UI.CachedByDefault.CLink.#ctor(System.String,System.String,System.String)">
            <inheritdoc />
        </member>
        <member name="M:LamestWebserver.UI.CachedByDefault.CLink.#ctor(LamestWebserver.UI.HElement,System.String,System.String)">
            <inheritdoc />
        </member>
        <member name="M:LamestWebserver.UI.CachedByDefault.CLink.#ctor(System.String,LamestWebserver.UI.HElement[])">
            <inheritdoc />
        </member>
        <member name="T:LamestWebserver.UI.CachedByDefault.CImage">
            <inheritdoc />
        </member>
        <member name="M:LamestWebserver.UI.CachedByDefault.CImage.#ctor(System.String)">
            <inheritdoc />
        </member>
        <member name="T:LamestWebserver.UI.CachedByDefault.CText">
            <inheritdoc />
        </member>
        <member name="M:LamestWebserver.UI.CachedByDefault.CText.#ctor(System.String)">
            <inheritdoc />
        </member>
        <member name="T:LamestWebserver.UI.CachedByDefault.CTextBlock">
            <inheritdoc />
        </member>
        <member name="M:LamestWebserver.UI.CachedByDefault.CTextBlock.#ctor(System.String)">
            <inheritdoc />
        </member>
        <member name="M:LamestWebserver.UI.CachedByDefault.CTextBlock.#ctor(System.Object[])">
            <inheritdoc />
        </member>
        <member name="T:LamestWebserver.UI.CachedByDefault.CBold">
            <inheritdoc />
        </member>
        <member name="M:LamestWebserver.UI.CachedByDefault.CBold.#ctor(System.String)">
            <inheritdoc />
        </member>
        <member name="T:LamestWebserver.UI.CachedByDefault.CItalic">
            <inheritdoc />
        </member>
        <member name="M:LamestWebserver.UI.CachedByDefault.CItalic.#ctor(System.String)">
            <inheritdoc />
        </member>
        <member name="T:LamestWebserver.UI.CachedByDefault.CCrossedOut">
            <inheritdoc />
        </member>
        <member name="M:LamestWebserver.UI.CachedByDefault.CCrossedOut.#ctor(System.String)">
            <inheritdoc />
        </member>
        <member name="T:LamestWebserver.UI.CachedByDefault.CUnderlined">
            <inheritdoc />
        </member>
        <member name="M:LamestWebserver.UI.CachedByDefault.CUnderlined.#ctor(System.String)">
            <inheritdoc />
        </member>
        <member name="T:LamestWebserver.UI.CachedByDefault.CHeadline">
            <inheritdoc />
        </member>
        <member name="M:LamestWebserver.UI.CachedByDefault.CHeadline.#ctor(System.String,System.Int32)">
            <inheritdoc />
        </member>
        <member name="T:LamestWebserver.UI.CachedByDefault.CInput">
            <inheritdoc />
        </member>
        <member name="M:LamestWebserver.UI.CachedByDefault.CInput.#ctor(LamestWebserver.UI.HInput.EInputType,System.String,System.String)">
            <inheritdoc />
        </member>
        <member name="T:LamestWebserver.UI.CachedByDefault.CSingleSelector">
            <inheritdoc />
        </member>
        <member name="M:LamestWebserver.UI.CachedByDefault.CSingleSelector.#ctor(System.String,System.Collections.Generic.List{System.Tuple{System.String,System.String}},System.Int32,System.Boolean)">
            <inheritdoc />
        </member>
        <member name="T:LamestWebserver.UI.CachedByDefault.CTextInput">
            <inheritdoc />
        </member>
        <member name="M:LamestWebserver.UI.CachedByDefault.CTextInput.#ctor(System.String,System.String,System.String)">
            <inheritdoc />
        </member>
        <member name="T:LamestWebserver.UI.CachedByDefault.CPasswordInput">
            <inheritdoc />
        </member>
        <member name="M:LamestWebserver.UI.CachedByDefault.CPasswordInput.#ctor(System.String,System.String)">
            <inheritdoc />
        </member>
        <member name="T:LamestWebserver.UI.CachedByDefault.CRadioButton">
            <inheritdoc />
        </member>
        <member name="M:LamestWebserver.UI.CachedByDefault.CRadioButton.#ctor(System.String,System.String,System.String,System.Boolean)">
            <inheritdoc />
        </member>
        <member name="T:LamestWebserver.UI.CachedByDefault.CCheckBox">
            <inheritdoc />
        </member>
        <member name="M:LamestWebserver.UI.CachedByDefault.CCheckBox.#ctor(System.String,System.String,System.String,System.Boolean)">
            <inheritdoc />
        </member>
        <member name="T:LamestWebserver.UI.CachedByDefault.CContainer">
            <inheritdoc />
        </member>
        <member name="M:LamestWebserver.UI.CachedByDefault.CContainer.#ctor(LamestWebserver.UI.HElement[])">
            <inheritdoc />
        </member>
        <member name="M:LamestWebserver.UI.CachedByDefault.CContainer.#ctor(System.Collections.Generic.IEnumerable{LamestWebserver.UI.HElement})">
            <inheritdoc />
        </member>
        <member name="T:LamestWebserver.UI.CachedByDefault.CInlineContainer">
            <inheritdoc />
        </member>
        <member name="M:LamestWebserver.UI.CachedByDefault.CInlineContainer.#ctor(LamestWebserver.UI.HElement[])">
            <inheritdoc />
        </member>
        <member name="T:LamestWebserver.UI.CachedByDefault.CQuote">
            <inheritdoc />
        </member>
        <member name="M:LamestWebserver.UI.CachedByDefault.CQuote.#ctor(System.String,System.String,LamestWebserver.UI.HElement[])">
            <inheritdoc />
        </member>
        <member name="T:LamestWebserver.UI.CachedByDefault.CForm">
            <inheritdoc />
        </member>
        <member name="M:LamestWebserver.UI.CachedByDefault.CForm.#ctor(System.String)">
            <inheritdoc />
        </member>
        <member name="M:LamestWebserver.UI.CachedByDefault.CForm.#ctor(System.String,System.Boolean,System.String,System.Tuple{System.String,System.String}[])">
            <inheritdoc />
        </member>
        <member name="T:LamestWebserver.UI.CachedByDefault.CPanel">
            <inheritdoc />
        </member>
        <member name="M:LamestWebserver.UI.CachedByDefault.CPanel.#ctor(System.String,LamestWebserver.UI.HElement[])">
            <inheritdoc />
        </member>
        <member name="T:LamestWebserver.UI.CachedByDefault.CButton">
            <inheritdoc />
        </member>
        <member name="M:LamestWebserver.UI.CachedByDefault.CButton.#ctor(System.String,LamestWebserver.UI.HButton.EButtonType,System.String,System.String)">
            <inheritdoc />
        </member>
        <member name="M:LamestWebserver.UI.CachedByDefault.CButton.#ctor(System.String,System.String,System.String)">
            <inheritdoc />
        </member>
        <member name="T:LamestWebserver.UI.CachedByDefault.CDropDownMenu">
            <inheritdoc />
        </member>
        <member name="M:LamestWebserver.UI.CachedByDefault.CDropDownMenu.#ctor(System.String,System.Int32,System.Boolean,System.Tuple{System.String,System.String}[])">
            <inheritdoc />
        </member>
        <member name="M:LamestWebserver.UI.CachedByDefault.CDropDownMenu.#ctor(System.String,System.Tuple{System.String,System.String}[])">
            <inheritdoc />
        </member>
        <member name="T:LamestWebserver.UI.CachedByDefault.CList">
            <inheritdoc />
        </member>
        <member name="M:LamestWebserver.UI.CachedByDefault.CList.#ctor(LamestWebserver.UI.HList.EListType)">
            <inheritdoc />
        </member>
        <member name="M:LamestWebserver.UI.CachedByDefault.CList.#ctor(LamestWebserver.UI.HList.EListType,System.Object[])">
            <inheritdoc />
        </member>
        <member name="M:LamestWebserver.UI.CachedByDefault.CList.#ctor(LamestWebserver.UI.HList.EListType,System.Collections.Generic.IEnumerable{System.Object})">
            <inheritdoc />
        </member>
        <member name="T:LamestWebserver.UI.CachedByDefault.CTable">
            <inheritdoc />
        </member>
        <member name="M:LamestWebserver.UI.CachedByDefault.CTable.#ctor(System.Collections.Generic.IEnumerable{System.Collections.Generic.IEnumerable{System.Object}})">
            <inheritdoc />
        </member>
        <member name="M:LamestWebserver.UI.CachedByDefault.CTable.#ctor(System.Collections.Generic.IEnumerable{System.Object}[])">
            <inheritdoc />
        </member>
        <member name="T:LamestWebserver.UI.CachedByDefault.CScript">
            <inheritdoc />
        </member>
        <member name="M:LamestWebserver.UI.CachedByDefault.CScript.#ctor(System.String)">
            <inheritdoc />
        </member>
        <member name="M:LamestWebserver.UI.CachedByDefault.CScript.#ctor(LamestWebserver.UI.ScriptCollection.ScriptFuction,System.Object[])">
            <inheritdoc />
        </member>
        <member name="T:LamestWebserver.UI.CachedByDefault.CScriptLink">
            <inheritdoc />
        </member>
        <member name="M:LamestWebserver.UI.CachedByDefault.CScriptLink.#ctor(System.String)">
            <inheritdoc />
        </member>
        <member name="T:LamestWebserver.UI.CachedByDefault.CCanvas">
            <inheritdoc />
        </member>
        <member name="M:LamestWebserver.UI.CachedByDefault.CCanvas.#ctor">
            <inheritdoc />
        </member>
        <member name="T:LamestWebserver.UI.CachedByDefault.CTextArea">
            <inheritdoc />
        </member>
        <member name="M:LamestWebserver.UI.CachedByDefault.CTextArea.#ctor(System.String,System.Nullable{System.UInt32},System.Nullable{System.UInt32})">
            <inheritdoc />
        </member>
        <member name="T:LamestWebserver.UI.CachedByDefault.CIframe">
            <inheritdoc />
        </member>
        <member name="M:LamestWebserver.UI.CachedByDefault.CIframe.#ctor(System.String)">
            <inheritdoc />
        </member>
        <member name="M:LamestWebserver.UI.HLinkSearchBox.GetContent(LamestWebserver.SessionData)">
            <inheritdoc />
        </member>
        <member name="M:LamestWebserver.UI.HLinkSearchBox.GetResponse(LamestWebserver.SessionData)">
            <summary>
            Retrieves the response-functions answer to the browser in a usable format.
            </summary>
            <param name="sessionData">the current sessionData</param>
            <returns>the responded message</returns>
        </member>
        <member name="M:LamestWebserver.UI.HSearchBox.GetContent(LamestWebserver.SessionData)">
            <inheritdoc />
        </member>
        <member name="M:LamestWebserver.UI.HSearchBox.GetResponse(LamestWebserver.SessionData)">
            <summary>
            Retrieves the response-functions answer to the browser in a usable format.
            </summary>
            <param name="sessionData">the current sessionData</param>
            <returns>the responded message</returns>
        </member>
        <member name="T:LamestWebserver.UI.HMultipleValuesButton">
            <summary>
            A button that cycles through multiple distinct states on click.
            </summary>
        </member>
        <member name="M:LamestWebserver.UI.HMultipleValuesButton.GetContent(LamestWebserver.SessionData)">
            <inheritdoc />
        </member>
        <member name="T:LamestWebserver.UI.ExtentionMethods">
            <summary>
            Contains Extention Methods for LamestWebserver.UI.
            </summary>
        </member>
        <member name="M:LamestWebserver.UI.ExtentionMethods.ToHElement(System.String)">
            <summary>
            Wrapps a string inside a HString.
            </summary>
            <param name="s">the string</param>
            <returns>the string as HElement</returns>
        </member>
        <member name="M:LamestWebserver.UI.ExtentionMethods.ToHElement(System.Int32)">
            <summary>
            Casts an int to string contained in a HString.
            </summary>
            <param name="i">the int</param>
            <returns>the int as HElement</returns>
        </member>
        <member name="M:LamestWebserver.UI.ExtentionMethods.ToHElement(System.Object)">
            <summary>
            Casts an object to string contained in a HString.
            </summary>
            <param name="obj">the object.</param>
            <returns>the object as HElement</returns>
        </member>
        <member name="T:LamestWebserver.UI.PageBuilder">
            <summary>
            A Container for a complete WebPage with html, head and body tags.
            Can also be used as direct response if inherited well.
            </summary>
        </member>
        <member name="F:LamestWebserver.UI.PageBuilder.getContentMethod">
            <summary>
            a function pointer to the executed method on GetContent(ISessionIdentificator sessionData)
            </summary>
        </member>
        <member name="F:LamestWebserver.UI.PageBuilder.PageTitle">
            <summary>
            the title of this page
            </summary>
        </member>
        <member name="P:LamestWebserver.UI.PageBuilder.URL">
            <summary>
            the URL at which this page is / will be available at
            </summary>
        </member>
        <member name="F:LamestWebserver.UI.PageBuilder.StylesheetLinks">
            <summary>
            Path to the stylesheets.
            </summary>
        </member>
        <member name="F:LamestWebserver.UI.PageBuilder.Scripts">
            <summary>
            javascript code directly bound into the page code
            </summary>
        </member>
        <member name="F:LamestWebserver.UI.PageBuilder.ScriptLinks">
            <summary>
            path to javascript code files
            </summary>
        </member>
        <member name="F:LamestWebserver.UI.PageBuilder.AdditionalHeadArguments">
            <summary>
            additional lines added to the "head" segment of the page
            </summary>
        </member>
        <member name="F:LamestWebserver.UI.PageBuilder.Favicon">
            <summary>
            The icon to display
            </summary>
        </member>
        <member name="F:LamestWebserver.UI.PageBuilder.StylesheetCode">
            <summary>
            CSS code directly bound into the page code
            </summary>
        </member>
        <member name="M:LamestWebserver.UI.PageBuilder.#ctor(System.String,System.String)">
            <summary>
            Creates a new PageBuilder and registers it at the server for a specified url
            </summary>
            <param name="pagetitle">The window title.</param>
            <param name="URL">the URL at which to register this page</param>
        </member>
        <member name="M:LamestWebserver.UI.PageBuilder.#ctor(System.String,System.String,System.String,System.Func{LamestWebserver.SessionData,System.Boolean})">
            <summary>
            Creates a page builder and registers it as the server for a specified URL. If the conditionalCode returns false the page will not be parsed and the user will be refered to the referalURL
            </summary>
            <param name="title">The window title.</param>
            <param name="URL">the URL at which to register this page</param>
            <param name="referalURL">the URL at which to refer if the conditionalCode returns false</param>
            <param name="conditionalCode">the conditionalCode</param>
        </member>
        <member name="M:LamestWebserver.UI.PageBuilder.#ctor(System.String)">
            <summary>
            Creates a new PageBuilder, but does _NOT_ register it at the server for a specified url
            </summary>
            <param name="title">The title of this window.</param>
        </member>
        <member name="M:LamestWebserver.UI.PageBuilder.GetTagHead(System.String)">
            <inheritdoc />
        </member>
        <member name="M:LamestWebserver.UI.PageBuilder.BuildContent(LamestWebserver.SessionData)">
            <summary>
            The method which is called to parse this element to string
            </summary>
            <param name="sessionData">the current sessionData</param>
            <returns>the contents as string</returns>
        </member>
        <member name="M:LamestWebserver.UI.PageBuilder.GetContent(LamestWebserver.SessionData)">
            <summary>
            The method used to grab contents as string to be registered as page for the server.
            </summary>
            <param name="sessionData">the current sessionData</param>
            <returns>the contents as string</returns>
        </member>
        <member name="M:LamestWebserver.UI.PageBuilder.RemoveFromServer">
            <summary>
            via this method you can "unregister" this pages url (if this pageBuilder is registered) at the server.
            </summary>
        </member>
        <member name="T:LamestWebserver.UI.HElement">
            <summary>
            A HTML Element
            </summary>
        </member>
        <member name="F:LamestWebserver.UI.HElement.ID">
            <summary>
            the ID of this element
            </summary>
        </member>
        <member name="F:LamestWebserver.UI.HElement.Name">
            <summary>
            the Name of this element
            </summary>
        </member>
        <member name="F:LamestWebserver.UI.HElement.Class">
            <summary>
            the class of this element
            </summary>
        </member>
        <member name="F:LamestWebserver.UI.HElement.Style">
            <summary>
            the style attribute of this element
            </summary>
        </member>
        <member name="F:LamestWebserver.UI.HElement.Title">
            <summary>
            the mouseover text and title attribute of this element
            </summary>
        </member>
        <member name="M:LamestWebserver.UI.HElement.GetContent(LamestWebserver.SessionData)">
            <summary>
            the method used to parse the element to string correctly
            </summary>
            <param name="sessionData">sessionData of the currentUser</param>
            <returns></returns>
        </member>
        <member name="M:LamestWebserver.UI.HElement.op_Multiply(LamestWebserver.UI.HElement,LamestWebserver.SessionData)">
            <summary>
            element.GetContent(sessionData)
            </summary>
            <returns>element.GetContent(sessionData)</returns>
        </member>
        <member name="M:LamestWebserver.UI.HElement.ToString">
            <summary>
            Parses this element to string
            </summary>
            <returns>this element as string</returns>
        </member>
        <member name="M:LamestWebserver.UI.HElement.op_Implicit(System.String)~LamestWebserver.UI.HElement">
            <summary>
            casts a string to a HPlainText element
            </summary>
            <param name="s"></param>
        </member>
        <member name="M:LamestWebserver.UI.HElement.op_Explicit(LamestWebserver.UI.HElement)~System.String">
            <summary>
            Parses an element to string
            </summary>
            <param name="element">the element</param>
        </member>
        <member name="M:LamestWebserver.UI.HElement.op_Addition(LamestWebserver.UI.HElement,LamestWebserver.UI.HElement)">
            <summary>
            Adds two elements to be one HMultipleElements object
            </summary>
            <param name="a">the first HElement</param>
            <param name="b">the second HElement</param>
            <returns>a HMultipleElements object</returns>
        </member>
        <member name="M:LamestWebserver.UI.HElement.IsStaticResponse(System.String,LamestWebserver.Caching.ECachingType,System.Text.StringBuilder)">
            <summary>
            Returns true if the HElement returns a static response.
            <paramref name="key">The key of the cache entry if cacheable.</paramref>
            <paramref name="defaultCachingType">The default CachingType to refer to.</paramref>
            <paramref name="response">The StringBuilder to attatch the response to.</paramref>
            </summary>
        </member>
        <member name="T:LamestWebserver.UI.HCacheableElement">
            <summary>
            A HElement inheriting the default IsCacheable response for a static response.
            </summary>
        </member>
        <member name="M:LamestWebserver.UI.HCacheableElement.IsStaticResponse(System.String,LamestWebserver.Caching.ECachingType,System.Text.StringBuilder)">
            <inheritdoc />
        </member>
        <member name="T:LamestWebserver.UI.HSelectivelyCacheableElement">
            <summary>
            A HElement inheriting a IsCacheable response for a response that could be cachable or not cacheable.
            </summary>
        </member>
        <member name="F:LamestWebserver.UI.HSelectivelyCacheableElement.CachingType">
            <summary>
            Is thie response cacheable?
            </summary>
        </member>
        <member name="M:LamestWebserver.UI.HSelectivelyCacheableElement.IsStaticResponse(System.String,LamestWebserver.Caching.ECachingType,System.Text.StringBuilder)">
            <inheritdoc />
        </member>
        <member name="M:LamestWebserver.UI.HSelectivelyCacheableElement.SetCacheable(LamestWebserver.Caching.ECachingType)">
            <summary>
            Sets the current HSelectivelyCacheableElement cacheable.
            </summary>
            <param name="cachingType">The CachingType to set. (ECachingType.Cacheable by default)</param>
            <returns>Returns the current HSelectivelyCacheableElement.</returns>
        </member>
        <member name="T:LamestWebserver.UI.HNewLine">
            <summary>
            A br element used for line breaks in HTML
            </summary>
        </member>
        <member name="M:LamestWebserver.UI.HNewLine.GetContent(LamestWebserver.SessionData)">
            <summary>
            This Method parses the current element to string
            </summary>
            <param name="sessionData">the current ISessionIdentificator</param>
            <returns>the element as string</returns>
        </member>
        <member name="T:LamestWebserver.UI.HLine">
            <summary>
            A hr element used to display a hoizontal line
            </summary>
        </member>
        <member name="M:LamestWebserver.UI.HLine.GetContent(LamestWebserver.SessionData)">
            <summary>
            This Method parses the current element to string
            </summary>
            <param name="sessionData">the current ISessionIdentificator</param>
            <returns>the element as string</returns>
        </member>
        <member name="T:LamestWebserver.UI.HPlainText">
            <summary>
            The contents of this element will directly be copied into the final html document.
            </summary>
        </member>
        <member name="F:LamestWebserver.UI.HPlainText.Text">
            <summary>
            The text to copy to the HTML document
            </summary>
        </member>
        <member name="M:LamestWebserver.UI.HPlainText.#ctor(System.String)">
            <summary>
            Constructs a new By-Copy-Element. The contents will only be copied into the final HTML code.
            </summary>
            <param name="text">the text to copy into the final HTML code</param>
        </member>
        <member name="M:LamestWebserver.UI.HPlainText.GetContent(LamestWebserver.SessionData)">
            <summary>
            returns the given text
            </summary>
            <param name="sessionData">the current ISessionIdentificator</param>
            <returns>the element as string</returns>
        </member>
        <member name="T:LamestWebserver.UI.HString">
            <summary>
            Copies the given text to the final HTML-Response - html encoded.
            </summary>
        </member>
        <member name="M:LamestWebserver.UI.HString.#ctor(System.String)">
            <summary>
            Creates a new HEncodedString containing the given text.
            </summary>
            <param name="text"></param>
        </member>
        <member name="M:LamestWebserver.UI.HString.GetContent(LamestWebserver.SessionData)">
            <inheritdoc />
        </member>
        <member name="T:LamestWebserver.UI.HMultipleElements">
            <summary>
            Combines multiple HElements without using a div to a single HElement object
            </summary>
        </member>
        <member name="F:LamestWebserver.UI.HMultipleElements.Elements">
            <summary>
            The elements to display
            </summary>
        </member>
        <member name="M:LamestWebserver.UI.HMultipleElements.#ctor(LamestWebserver.UI.HElement[])">
            <summary>
            Constructs a new HMultipleElements containing the given elements
            </summary>
            <param name="elements">the elements to add</param>
        </member>
        <member name="M:LamestWebserver.UI.HMultipleElements.#ctor(System.Collections.Generic.IEnumerable{LamestWebserver.UI.HElement})">
            <summary>
            Constructs a new HMultipleElements containing the given elements
            </summary>
            <param name="elements">the elements to add</param>
        </member>
        <member name="M:LamestWebserver.UI.HMultipleElements.GetContent(LamestWebserver.SessionData)">
            <inheritdoc />
        </member>
        <member name="M:LamestWebserver.UI.HMultipleElements.op_Addition(LamestWebserver.UI.HMultipleElements,LamestWebserver.UI.HElement)">
            <summary>
            Adds elements to the current multiple element
            </summary>
            <param name="thisElement">one multipleElements object</param>
            <param name="otherElement">some HElement</param>
            <returns>the MultipleElements object containing the other multipleElements object</returns>
        </member>
        <member name="M:LamestWebserver.UI.HMultipleElements.op_Implicit(LamestWebserver.UI.HMultipleElements)~System.String">
            <summary>
            Casts a HMultipleElements object to string
            </summary>
            <param name="multipleElements">the elements to cast</param>
            <returns>the elements as string</returns>
        </member>
        <member name="M:LamestWebserver.UI.HMultipleElements.GetCachedContents(System.String,LamestWebserver.Caching.ECachingType,System.Text.StringBuilder)">
            <summary>
            Retrieves cached contents for nested elements.
            </summary>
            <paramref name="key">The cache key of the container.</paramref>
            <paramref name="defaultCachingType">The default CachingType to refer to.</paramref>
            <paramref name="response">The StringBuilder to attatch the response to.</paramref>
        </member>
        <member name="M:LamestWebserver.UI.HMultipleElements.IsStaticResponse(System.String,LamestWebserver.Caching.ECachingType,System.Text.StringBuilder)">
            <inheritdoc />
        </member>
        <member name="T:LamestWebserver.UI.HLink">
            <summary>
            Represents an "a" element used for links
            </summary>
        </member>
        <member name="M:LamestWebserver.UI.HLink.#ctor(System.String,System.String,System.String)">
            <summary>
            Creates a new Link Element
            </summary>
            <param name="text">The Text of the Link</param>
            <param name="href">The URL this link points to</param>
            <param name="onclick">the Javasctipt action executed when clicking on this link</param>
        </member>
        <member name="M:LamestWebserver.UI.HLink.#ctor(LamestWebserver.UI.HElement,System.String,System.String)">
            <summary>
            Creates a new Link Element
            </summary>
            <param name="element">The Element inside the Link</param>
            <param name="href">The URL this link points to</param>
            <param name="onclick">the Javasctipt action executed when clicking on this link</param>
        </member>
        <member name="M:LamestWebserver.UI.HLink.#ctor(System.String,LamestWebserver.UI.HElement[])">
            <summary>
            Creates a new Link Element
            </summary>
            <param name="href">The URL this link points to</param>
            <param name="elements">The Elements inside the Link</param>
        </member>
        <member name="M:LamestWebserver.UI.HLink.GetTagHead(System.String)">
            <inheritdoc />
        </member>
        <member name="T:LamestWebserver.UI.HImage">
            <summary>
            A img element representing an image in html
            </summary>
        </member>
        <member name="F:LamestWebserver.UI.HImage.DescriptionTags">
            <summary>
            Additional attributes added to this tag
            </summary>
        </member>
        <member name="M:LamestWebserver.UI.HImage.#ctor(System.String)">
            <summary>
            Creates an Image
            </summary>
            <param name="source">the URL where the image is located at</param>
        </member>
        <member name="M:LamestWebserver.UI.HImage.GetContent(LamestWebserver.SessionData)">
            <summary>
            This Method parses the current element to string
            </summary>
            <param name="sessionData">the current ISessionIdentificator</param>
            <returns>the element as string</returns>
        </member>
        <member name="T:LamestWebserver.UI.HText">
            <summary>
            A "p" tag, representing a textblock
            </summary>
        </member>
        <member name="F:LamestWebserver.UI.HText.DescriptionTags">
            <summary>
            Additional attributes to add to this HTML-Tag
            </summary>
        </member>
        <member name="F:LamestWebserver.UI.HText.Text">
            <summary>
            The text to display
            </summary>
        </member>
        <member name="M:LamestWebserver.UI.HText.#ctor(System.String)">
            <summary>
            Constructs a TextBlock
            </summary>
            <param name="text">the Text displayed</param>
        </member>
        <member name="M:LamestWebserver.UI.HText.GetContent(LamestWebserver.SessionData)">
            <summary>
            This Method parses the current element to string
            </summary>
            <param name="sessionData">the current ISessionIdentificator</param>
            <returns>the element as string</returns>
        </member>
        <member name="T:LamestWebserver.UI.HTextBlock">
            <summary>
            A "p" tag, representing a textblock. You can add HTexts seamlessly to an HTextBlock - only the text inside will be displayed
            </summary>
        </member>
        <member name="M:LamestWebserver.UI.HTextBlock.#ctor(System.String)">
            <summary>
            Constructs a TextBlock
            </summary>
            <param name="text">the Text displayed</param>
        </member>
        <member name="M:LamestWebserver.UI.HTextBlock.#ctor(System.Object[])">
            <summary>
            Constructs a new TextBlock
            </summary>
            <param name="texts">will be a HText if string, will be itself if HElement, else will be HText of .ToString() text</param>
        </member>
        <member name="T:LamestWebserver.UI.HBold">
            <summary>
            A "b" tag, representing bold text
            </summary>
        </member>
        <member name="F:LamestWebserver.UI.HBold.Text">
            <summary>
            The Text to display
            </summary>
        </member>
        <member name="M:LamestWebserver.UI.HBold.#ctor(System.String)">
            <summary>
            Constructs a new HBold
            </summary>
            <param name="text">the text</param>
        </member>
        <member name="M:LamestWebserver.UI.HBold.GetContent(LamestWebserver.SessionData)">
            <inheritdoc />
        </member>
        <member name="T:LamestWebserver.UI.HItalic">
            <summary>
            A "i" tag, representing italic text
            </summary>
        </member>
        <member name="F:LamestWebserver.UI.HItalic.Text">
            <summary>
            The Text to display
            </summary>
        </member>
        <member name="M:LamestWebserver.UI.HItalic.#ctor(System.String)">
            <summary>
            Constructs a new HItalic
            </summary>
            <param name="text">the text</param>
        </member>
        <member name="M:LamestWebserver.UI.HItalic.GetContent(LamestWebserver.SessionData)">
            <inheritdoc />
        </member>
        <member name="T:LamestWebserver.UI.HCrossedOut">
            <summary>
            A "del" tag, representing crossed out text
            </summary>
        </member>
        <member name="F:LamestWebserver.UI.HCrossedOut.Text">
            <summary>
            The Text to display
            </summary>
        </member>
        <member name="M:LamestWebserver.UI.HCrossedOut.#ctor(System.String)">
            <summary>
            Constructs a new HBold
            </summary>
            <param name="text">the text</param>
        </member>
        <member name="M:LamestWebserver.UI.HCrossedOut.GetContent(LamestWebserver.SessionData)">
            <inheritdoc />
        </member>
        <member name="T:LamestWebserver.UI.HUnderlined">
            <summary>
            A "u" tag, representing underlined out text
            </summary>
        </member>
        <member name="F:LamestWebserver.UI.HUnderlined.Text">
            <summary>
            The Text to display
            </summary>
        </member>
        <member name="M:LamestWebserver.UI.HUnderlined.#ctor(System.String)">
            <summary>
            Constructs a new HBold
            </summary>
            <param name="text">the text</param>
        </member>
        <member name="M:LamestWebserver.UI.HUnderlined.GetContent(LamestWebserver.SessionData)">
            <inheritdoc />
        </member>
        <member name="T:LamestWebserver.UI.HHeadline">
            <summary>
            A h(1-6) tag in html (h1 by default) representing a Headline
            </summary>
        </member>
        <member name="F:LamestWebserver.UI.HHeadline.Text">
            <summary>
            The Text displayed in this Headline
            </summary>
        </member>
        <member name="F:LamestWebserver.UI.HHeadline.DescriptionTags">
            <summary>
            Additional attributes added to this element
            </summary>
        </member>
        <member name="F:LamestWebserver.UI.HHeadline._level">
            <summary>
            The level of this headline (1-6)
            </summary>
        </member>
        <member name="M:LamestWebserver.UI.HHeadline.#ctor(System.String,System.Int32)">
            <summary>
            Constructs a new Headline
            </summary>
            <param name="text">the text of this headline</param>
            <param name="level">the level of this headline</param>
        </member>
        <member name="M:LamestWebserver.UI.HHeadline.GetContent(LamestWebserver.SessionData)">
            <summary>
            This Method parses the current element to string
            </summary>
            <param name="sessionData">the current ISessionIdentificator</param>
            <returns>the element as string</returns>
        </member>
        <member name="T:LamestWebserver.UI.HInput">
            <summary>
            A input tag representing all kinds of Input Elements
            </summary>
        </member>
        <member name="F:LamestWebserver.UI.HInput.InputType">
            <summary>
            The Type of the input element
            </summary>
        </member>
        <member name="F:LamestWebserver.UI.HInput.Value">
            <summary>
            The Value of the input element
            </summary>
        </member>
        <member name="F:LamestWebserver.UI.HInput.DescriptionTags">
            <summary>
            Additional attributes added to the tag
            </summary>
        </member>
        <member name="M:LamestWebserver.UI.HInput.#ctor(LamestWebserver.UI.HInput.EInputType,System.String,System.String)">
            <summary>
            Constructs a new Input Element
            </summary>
            <param name="inputType">the type of the input element</param>
            <param name="name">the Name of the HTML element</param>
            <param name="value">the predefined value of this input element</param>
        </member>
        <member name="M:LamestWebserver.UI.HInput.GetContent(LamestWebserver.SessionData)">
            <summary>
            This Method parses the current element to string
            </summary>
            <param name="sessionData">the current ISessionIdentificator</param>
            <returns>the element as string</returns>
        </member>
        <member name="T:LamestWebserver.UI.HInput.EInputType">
            <summary>
            Contains all kinds of valid HTML Input Elements
            </summary>
        </member>
        <member name="F:LamestWebserver.UI.HInput.EInputType.button">
            <summary>
            A button
            </summary>
        </member>
        <member name="F:LamestWebserver.UI.HInput.EInputType.checkbox">
            <summary>
            A checkbox
            </summary>
        </member>
        <member name="F:LamestWebserver.UI.HInput.EInputType.color">
            <summary>
            A ColorPicker
            </summary>
        </member>
        <member name="F:LamestWebserver.UI.HInput.EInputType.date">
            <summary>
            A Date Input
            </summary>
        </member>
        <member name="F:LamestWebserver.UI.HInput.EInputType.datetime">
            <summary>
            A date and time input
            </summary>
        </member>
        <member name="F:LamestWebserver.UI.HInput.EInputType.datetime_local">
            <summary>
            A date and time input for local time
            </summary>
        </member>
        <member name="F:LamestWebserver.UI.HInput.EInputType.email">
            <summary>
            An Email Input
            </summary>
        </member>
        <member name="F:LamestWebserver.UI.HInput.EInputType.file">
            <summary>
            A file selector
            </summary>
        </member>
        <member name="F:LamestWebserver.UI.HInput.EInputType.hidden">
            <summary>
            A hidden name-value-pair
            </summary>
        </member>
        <member name="F:LamestWebserver.UI.HInput.EInputType.image">
            <summary>
            An image
            </summary>
        </member>
        <member name="F:LamestWebserver.UI.HInput.EInputType.month">
            <summary>
            A month selector
            </summary>
        </member>
        <member name="F:LamestWebserver.UI.HInput.EInputType.number">
            <summary>
            A numeric input
            </summary>
        </member>
        <member name="F:LamestWebserver.UI.HInput.EInputType.password">
            <summary>
            a password input (not displaying the contents entered as text)
            </summary>
        </member>
        <member name="F:LamestWebserver.UI.HInput.EInputType.radio">
            <summary>
            A radio button
            </summary>
        </member>
        <member name="F:LamestWebserver.UI.HInput.EInputType.range">
            <summary>
            An input for values within a given range
            </summary>
        </member>
        <member name="F:LamestWebserver.UI.HInput.EInputType.reset">
            <summary>
            A reset button
            </summary>
        </member>
        <member name="F:LamestWebserver.UI.HInput.EInputType.search">
            <summary>
            A search element
            </summary>
        </member>
        <member name="F:LamestWebserver.UI.HInput.EInputType.submit">
            <summary>
            A submit button
            </summary>
        </member>
        <member name="F:LamestWebserver.UI.HInput.EInputType.tel">
            <summary>
            A tel input
            </summary>
        </member>
        <member name="F:LamestWebserver.UI.HInput.EInputType.text">
            <summary>
            A single line textfield (use HTextArea or JSTextArea for multiline Textfields)
            </summary>
        </member>
        <member name="F:LamestWebserver.UI.HInput.EInputType.time">
            <summary>
            A Time input
            </summary>
        </member>
        <member name="F:LamestWebserver.UI.HInput.EInputType.url">
            <summary>
            A url input
            </summary>
        </member>
        <member name="F:LamestWebserver.UI.HInput.EInputType.week">
            <summary>
            A week input
            </summary>
        </member>
        <member name="T:LamestWebserver.UI.HSingleSelector">
            <summary>
            A list of radio-buttons of which only one can be selected at a time.
            </summary>
        </member>
        <member name="F:LamestWebserver.UI.HSingleSelector.DescriptionTags">
            <summary>
            Additional attributes to be added to the items
            </summary>
        </member>
        <member name="M:LamestWebserver.UI.HSingleSelector.#ctor(System.String,System.Collections.Generic.List{System.Tuple{System.String,System.String}},System.Int32,System.Boolean)">
            <summary>
            Constructs a new HSingleSelector
            </summary>
            <param name="name">the name of the resulting value</param>
            <param name="nameValuePairs">a list of tuples of the selectableItems and their representative value</param>
            <param name="selectedIndex">the selected value of the radioButtons</param>
            <param name="newLineAfterSelection">shall there be a line after each option?</param>
        </member>
        <member name="M:LamestWebserver.UI.HSingleSelector.GetContent(LamestWebserver.SessionData)">
            <inheritdoc />
        </member>
        <member name="T:LamestWebserver.UI.HTextInput">
            <summary>
            A Text input field.
            </summary>
        </member>
        <member name="M:LamestWebserver.UI.HTextInput.#ctor(System.String,System.String,System.String)">
            <inheritdoc />
            <param name="name">the name of the submitted value</param>
            <param name="value">the default value</param>
            <param name="placeholderText">the placeholder to display when no text has been entered.</param>
        </member>
        <member name="M:LamestWebserver.UI.HTextInput.GetContent(LamestWebserver.SessionData)">
            <inheritdoc />
        </member>
        <member name="T:LamestWebserver.UI.HPasswordInput">
            <summary>
            A Password-Text input field.
            </summary>
        </member>
        <member name="M:LamestWebserver.UI.HPasswordInput.#ctor(System.String,System.String)">
            <inheritdoc />
        </member>
        <member name="T:LamestWebserver.UI.HRadioButton">
            <summary>
            A simple Radiobutton.
            </summary>
        </member>
        <member name="M:LamestWebserver.UI.HRadioButton.#ctor(System.String,System.String,System.String,System.Boolean)">
            <summary>
            Constructs a new HRadioButton.
            </summary>
            <param name="name">the name of the retrived value</param>
            <param name="value">the value to retrive</param>
            <param name="text">the displayed text (or null if none)</param>
            <param name="_checked">is it checked by default?</param>
        </member>
        <member name="M:LamestWebserver.UI.HRadioButton.GetContent(LamestWebserver.SessionData)">
            <inheritdoc />
        </member>
        <member name="T:LamestWebserver.UI.HCheckBox">
            <summary>
            A simple checkbox.
            </summary>
        </member>
        <member name="M:LamestWebserver.UI.HCheckBox.#ctor(System.String,System.String,System.String,System.Boolean)">
            <summary>
            Constructs a new HCheckbox.
            </summary>
            <param name="name">the name of the retrived value</param>
            <param name="value">the value to retrive</param>
            <param name="text">the displayed text (or null if none)</param>
            <param name="_checked">is it checked by default?</param>
        </member>
        <member name="T:LamestWebserver.UI.HContainer">
            <summary>
            A div element representing a container
            </summary>
        </member>
        <member name="M:LamestWebserver.UI.HContainer.#ctor(System.String)">
            <summary>
            Sets the HTML Tag.
            </summary>
            <param name="tag">the HTML Tag of this element.</param>
        </member>
        <member name="M:LamestWebserver.UI.HContainer.#ctor(LamestWebserver.UI.HElement[])">
            <summary>
            Adds all listed objects into the container.
            </summary>
            <param name="elements">the elements to add</param>
        </member>
        <member name="M:LamestWebserver.UI.HContainer.#ctor(System.Collections.Generic.IEnumerable{LamestWebserver.UI.HElement})">
            <summary>
            Adds all listed objects into the container.
            </summary>
            <param name="elements">the elements to add</param>
        </member>
        <member name="M:LamestWebserver.UI.HContainer.#ctor(System.String,LamestWebserver.UI.HElement[])">
            <summary>
            Adds all listed objects into the container.
            </summary>
            <param name="tag">the html tag of this element.</param>
            <param name="elements">the elements to add</param>
        </member>
        <member name="F:LamestWebserver.UI.HContainer.Elements">
            <summary>
            A list of all contained elements
            </summary>
        </member>
        <member name="F:LamestWebserver.UI.HContainer.Text">
            <summary>
            The text contained in this element
            </summary>
        </member>
        <member name="F:LamestWebserver.UI.HContainer.DescriptionTags">
            <summary>
            Additional attributes added to the tag
            </summary>
        </member>
        <member name="P:LamestWebserver.UI.HContainer.Tag">
            <summary>
            The HTML Tag of this Element.
            </summary>
        </member>
        <member name="M:LamestWebserver.UI.HContainer.AddElement(LamestWebserver.UI.HElement)">
            <summary>
            Adds an element to the element list
            </summary>
            <param name="element">the element</param>
        </member>
        <member name="M:LamestWebserver.UI.HContainer.GetTagHead(System.String)">
            <summary>
            Retrieves the Tag Head for the corresponding HTML element.
            </summary>
            <param name="additionalParams">additional things to add to the head.</param>
            <returns>Returns the Tag Head as string.</returns>
        </member>
        <member name="M:LamestWebserver.UI.HContainer.GetContent(LamestWebserver.SessionData)">
            <summary>
            This Method parses the current element to string
            </summary>
            <param name="sessionData">the current ISessionIdentificator</param>
            <returns>the element as string</returns>
        </member>
        <member name="M:LamestWebserver.UI.HContainer.AddElements(System.Collections.Generic.IEnumerable{LamestWebserver.UI.HElement})">
            <summary>
            Adds a bunch of elements to the element list
            </summary>
            <param name="list">a list of elements</param>
        </member>
        <member name="M:LamestWebserver.UI.HContainer.AddElements(LamestWebserver.UI.HElement[])">
            <summary>
            adds a bunch of elements to the elementlist
            </summary>
            <param name="list">a few elements</param>
        </member>
        <member name="M:LamestWebserver.UI.HContainer.GetCachedContents(System.String,LamestWebserver.Caching.ECachingType,System.Text.StringBuilder)">
            <summary>
            Retrieves cached contents for nested elements.
            </summary>
            <paramref name="key">The cache key of the container.</paramref>
            <paramref name="defaultCachingType">The default CachingType to refer to.</paramref>
            <paramref name="response">The StringBuilder to attatch the response to.</paramref>
        </member>
        <member name="M:LamestWebserver.UI.HContainer.IsStaticResponse(System.String,LamestWebserver.Caching.ECachingType,System.Text.StringBuilder)">
            <inheritdoc />
        </member>
        <member name="T:LamestWebserver.UI.HInlineContainer">
            <summary>
            A container for inline elements - represented by a span-HTML tag
            </summary>
        </member>
        <member name="M:LamestWebserver.UI.HInlineContainer.#ctor(LamestWebserver.UI.HElement[])">
            <summary>
            Constructs a new inline container containing the given elements.
            </summary>
            <param name="elements">the contained elements</param>
        </member>
        <member name="T:LamestWebserver.UI.HQuote">
            <summary>
            A 'blockquote' tag - representing a quote.
            </summary>
        </member>
        <member name="F:LamestWebserver.UI.HQuote.Source">
            <summary>
            The source of the Quote
            </summary>
        </member>
        <member name="M:LamestWebserver.UI.HQuote.#ctor(System.String,System.String,LamestWebserver.UI.HElement[])">
            <summary>
            Creates a new HQuote object
            </summary>
            <param name="text">the quoted text</param>
            <param name="source">the source of the quote</param>
            <param name="elements">the contained elements</param>
        </member>
        <member name="M:LamestWebserver.UI.HQuote.GetTagHead(System.String)">
            <inheritdoc />
        </member>
        <member name="T:LamestWebserver.UI.HForm">
            <summary>
            A form element used for sending contents via POST to the server
            </summary>
        </member>
        <member name="F:LamestWebserver.UI.HForm.Action">
            <summary>
            The URL which will be called when submitting this form
            </summary>
        </member>
        <member name="M:LamestWebserver.UI.HForm.#ctor(System.String)">
            <summary>
            Constructs a new Form pointing to the given action when submitted
            </summary>
            <param name="action">the URL to load when submitted</param>
        </member>
        <member name="M:LamestWebserver.UI.HForm.#ctor(System.String,System.String,System.Func{LamestWebserver.SessionData,System.Boolean})">
            <summary>
            redirects if the conditional code returns true and executes other code if the conditional code returns false
            </summary>
            <param name="redirectURLifTRUE">the url to redirect to if the conditionalCode returns true</param>
            <param name="redirectURLifFALSE">the url to redirect to if the conditionalCode returns false</param>
            <param name="conditionalCode">the conditional code</param>
        </member>
        <member name="M:LamestWebserver.UI.HForm.#ctor(System.String,System.Boolean,System.String,System.Tuple{System.String,System.String}[])">
            <summary>
            creates a form containing a few values which are added to elements. It can also contain a submit button.
            </summary>
            <param name="action">the URL to load when submitted</param>
            <param name="addSubmitButton">shall there be a submit button?</param>
            <param name="buttontext">if yes: what should the text on the submit button say?</param>
            <param name="values">additional values to set in the form as invisible parameters</param>
        </member>
        <member name="M:LamestWebserver.UI.HForm.GetTagHead(System.String)">
            <inheritdoc />
        </member>
        <member name="T:LamestWebserver.UI.HPanel">
            <summary>
            A 'fieldset' tag - a panel contining multiple inputs / elements
            </summary>
        </member>
        <member name="F:LamestWebserver.UI.HPanel.Legend">
            <summary>
            The title of the panel.
            </summary>
        </member>
        <member name="M:LamestWebserver.UI.HPanel.#ctor(System.String,LamestWebserver.UI.HElement[])">
            <summary>
            Creates a new HFieldSet object
            <param name="legend">the displayed name of the panel</param>
            <param name="elements">the contained elements</param>
            </summary>
        </member>
        <member name="M:LamestWebserver.UI.HPanel.GetTagHead(System.String)">
            <inheritdoc />
        </member>
        <member name="T:LamestWebserver.UI.HButton">
            <summary>
            A button tag representing a button
            </summary>
        </member>
        <member name="M:LamestWebserver.UI.HButton.#ctor(System.String,LamestWebserver.UI.HButton.EButtonType,System.String,System.String)">
            <summary>
            Creates a button. SUBMIT BUTTONS SHOULDN'T HAVE A HREF!
            </summary>
            <param name="text">the text of the button.</param>
            <param name="type">the button type according to http standards.</param>
            <param name="href">the destination of this button. SUBMIT BUTTONS SHOULDN'T HAVE A HREF!</param>
            <param name="onclick"></param>
        </member>
        <member name="M:LamestWebserver.UI.HButton.#ctor(System.String,System.String,System.String)">
            <summary>
            Creates a button.
            </summary>
            <param name="text">the text of the button.</param>
            <param name="href">the destination of this button. SUBMIT BUTTONS SHOULDN'T HAVE A HREF!</param>
            <param name="onclick">the executed javascript-code on clicking the button.</param>
        </member>
        <member name="M:LamestWebserver.UI.HButton.GetTagHead(System.String)">
            <inheritdoc />
        </member>
        <member name="T:LamestWebserver.UI.HButton.EButtonType">
            <summary>
            The type of a button
            </summary>
        </member>
        <member name="F:LamestWebserver.UI.HButton.EButtonType.button">
            <summary>
            A button which is only a button
            </summary>
        </member>
        <member name="F:LamestWebserver.UI.HButton.EButtonType.reset">
            <summary>
            A button which resets the form it lives in
            </summary>
        </member>
        <member name="F:LamestWebserver.UI.HButton.EButtonType.submit">
            <summary>
            A button which submits the form it lives in
            </summary>
        </member>
        <member name="T:LamestWebserver.UI.HDropDownMenu">
            <summary>
            a select element representing a DropDownMenu
            </summary>
        </member>
        <member name="F:LamestWebserver.UI.HDropDownMenu.DescriptionTags">
            <summary>
            Additional attributes added to the tag
            </summary>
        </member>
        <member name="F:LamestWebserver.UI.HDropDownMenu.Size">
            <summary>
            The amount of entries displayed if not expanded
            </summary>
        </member>
        <member name="F:LamestWebserver.UI.HDropDownMenu.MultipleSelectable">
            <summary>
            does the dropdownmenu allow multiple selections?
            </summary>
        </member>
        <member name="F:LamestWebserver.UI.HDropDownMenu.Disabled">
            <summary>
            is the dropdownmenu disabled for the user?
            </summary>
        </member>
        <member name="F:LamestWebserver.UI.HDropDownMenu.SelectedIndexes">
            <summary>
            the selectedIndexes
            </summary>
        </member>
        <member name="M:LamestWebserver.UI.HDropDownMenu.#ctor(System.String,System.Int32,System.Boolean,System.Tuple{System.String,System.String}[])">
            <summary>
            Constructs a new DropDownMenu element
            </summary>
            <param name="name">the name of the element (for forms)</param>
            <param name="size">The amount of entries displayed if not expanded</param>
            <param name="multipleSelectable">does the dropdownmenu allow multiple selections?</param>
            <param name="textValuePairsToDisplay">All possibly selectable items as a tuple (Text displayed for the user, Value presented to form)</param>
        </member>
        <member name="M:LamestWebserver.UI.HDropDownMenu.#ctor(System.String,System.Tuple{System.String,System.String}[])">
            <summary>
            Constructs a new DropDownMenu element
            </summary>
            <param name="name">the name of the element (for forms)</param>
            <param name="textValuePairsToDisplay">All possibly selectable items as a tuple (Text displayed for the user, Value presented to form)</param>
        </member>
        <member name="M:LamestWebserver.UI.HDropDownMenu.SelectByValue(System.String)">
            <summary>
            Selects an item based on the value given to it.
            Unselects everything else if !multipleSelectable.
            DOES NOT THROW AN EXCEPTION IF NO MATCHING INDEX HAS BEEN FOUND!
            </summary>
            <param name="value">the value to look for</param>
            <returns>this element for inline use.</returns>
        </member>
        <member name="M:LamestWebserver.UI.HDropDownMenu.SelectByText(System.String)">
            <summary>
            Selects an item based on the text given to it.
            Unselects everything else if !multipleSelectable.
            DOES NOT THROW AN EXCEPTION IF NO MATCHING INDEX HAS BEEN FOUND!
            </summary>
            <param name="text">the text to look for</param>
            <returns>this element for inline use.</returns>
        </member>
        <member name="M:LamestWebserver.UI.HDropDownMenu.GetContent(LamestWebserver.SessionData)">
            <summary>
            This Method parses the current element to string
            </summary>
            <param name="sessionData">the current ISessionIdentificator</param>
            <returns>the element as string</returns>
        </member>
        <member name="T:LamestWebserver.UI.HList">
            <summary>
            A ol or ul tag representing an ordered or unordered list
            </summary>
        </member>
        <member name="F:LamestWebserver.UI.HList.SetListStyleToElements">
            <summary>
            If true adds "display: list-item;" at the start of every subitem Style property.
            </summary>
        </member>
        <member name="M:LamestWebserver.UI.HList.#ctor(LamestWebserver.UI.HList.EListType)">
            <summary>
            Constructs a new List Element
            </summary>
            <param name="listType">the type of the list</param>
        </member>
        <member name="M:LamestWebserver.UI.HList.#ctor(LamestWebserver.UI.HList.EListType,System.Object[])">
            <summary>
            Constructs a new List Element
            </summary>
            <param name="listType">the type of the list</param>
            <param name="elements">the contents of the list</param>
        </member>
        <member name="M:LamestWebserver.UI.HList.#ctor(LamestWebserver.UI.HList.EListType,System.Collections.Generic.IEnumerable{System.Object})">
            <summary>
            Constructs a new List Element
            </summary>
            <param name="listType">the type of the list</param>
            <param name="elements">the contents of the list</param>
        </member>
        <member name="M:LamestWebserver.UI.HList.GetTagHead(System.String)">
            <inheritdoc />
        </member>
        <member name="M:LamestWebserver.UI.HList.IsEmpty">
            <summary>
            Returns true if there are no elements in this List.
            </summary>
            <returns>Returns true if there are no elements in this List.</returns>
        </member>
        <member name="T:LamestWebserver.UI.HList.EListType">
            <summary>
            The type of the list
            </summary>
        </member>
        <member name="F:LamestWebserver.UI.HList.EListType.OrderedList">
            <summary>
            A numerically ordered list
            </summary>
        </member>
        <member name="F:LamestWebserver.UI.HList.EListType.UnorderedList">
            <summary>
            A unordered list
            </summary>
        </member>
        <member name="T:LamestWebserver.UI.HTable">
            <summary>
            A table Element representing a table
            </summary>
        </member>
        <member name="F:LamestWebserver.UI.HTable.TableHeader">
            <summary>
            The table header displayed on top of the table rows.
            </summary>
        </member>
        <member name="F:LamestWebserver.UI.HTable.DescriptionTags">
            <summary>
            Additional attributes to be added to this node
            </summary>
        </member>
        <member name="M:LamestWebserver.UI.HTable.#ctor(System.Collections.Generic.IEnumerable{System.Collections.Generic.IEnumerable{System.Object}})">
            <summary>
            Constructs a new Table containing the given elements
            </summary>
            <param name="elements">the contained elements</param>
        </member>
        <member name="M:LamestWebserver.UI.HTable.#ctor(System.Collections.Generic.IEnumerable{System.Object}[])">
            <summary>
            Constructs a new Table containing the given data
            </summary>
            <param name="data">the contents of this table</param>
        </member>
        <member name="M:LamestWebserver.UI.HTable.GetContent(LamestWebserver.SessionData)">
            <summary>
            This Method parses the current element to string
            </summary>
            <param name="sessionData">the current ISessionIdentificator</param>
            <returns>the element as string</returns>
        </member>
        <member name="T:LamestWebserver.UI.HTag">
            <summary>
            Represents a custom tag
            </summary>
        </member>
        <member name="F:LamestWebserver.UI.HTag.HasContent">
            <summary>
            if false, the element won't have a start and end tag but will only consist of a single tag (like img)
            </summary>
        </member>
        <member name="F:LamestWebserver.UI.HTag.TagName">
            <summary>
            the name of the tag
            </summary>
        </member>
        <member name="F:LamestWebserver.UI.HTag.Elements">
            <summary>
            A list of all contained elements
            </summary>
        </member>
        <member name="F:LamestWebserver.UI.HTag.Text">
            <summary>
            The text contained in this element
            </summary>
        </member>
        <member name="F:LamestWebserver.UI.HTag.DescriptionTags">
            <summary>
            Additional attributes added to the tag
            </summary>
        </member>
        <member name="M:LamestWebserver.UI.HTag.AddElement(LamestWebserver.UI.HElement)">
            <summary>
            Adds an element to the element list
            </summary>
            <param name="element">the element</param>
        </member>
        <member name="M:LamestWebserver.UI.HTag.#ctor(System.String,System.String,System.Boolean,System.String)">
            <summary>
            Constructs a new custom tag
            </summary>
            <param name="tagName">the name of the custom tag</param>
            <param name="descriptionTags">Additional attributs</param>
            <param name="hasContent">if false, the element won't have a start and end tag but will only consist of a single tag (like img)</param>
            <param name="text">the contatined text in this element</param>
        </member>
        <member name="M:LamestWebserver.UI.HTag.#ctor(System.String,System.String,System.String)">
            <summary>
            Constructs a new custom tag
            </summary>
            <param name="tagName">the name of the custom tag</param>
            <param name="descriptionTags">Additional attributes</param>
            <param name="text">the contatined text in this element (or null if no content)</param>
        </member>
        <member name="M:LamestWebserver.UI.HTag.GetContent(LamestWebserver.SessionData)">
            <summary>
            This Method parses the current element to string
            </summary>
            <param name="sessionData">the current ISessionIdentificator</param>
            <returns>the element as string</returns>
        </member>
        <member name="T:LamestWebserver.UI.HScript">
            <summary>
            A script element representing embedded JavaScript-Code
            </summary>
        </member>
        <member name="M:LamestWebserver.UI.HScript.#ctor(System.String)">
            <summary>
            generates a static script (not the ones that need ISessionIdentificator or the SSID)
            </summary>
        </member>
        <member name="M:LamestWebserver.UI.HScript.#ctor(LamestWebserver.UI.ScriptCollection.ScriptFuction,System.Object[])">
            <summary>
            generates a runtime defined script (like the ones, that need ISessionIdentificator or the SSID)
            </summary>
        </member>
        <member name="M:LamestWebserver.UI.HScript.GetContent(LamestWebserver.SessionData)">
            <summary>
            This Method parses the current element to string
            </summary>
            <param name="sessionData">the current ISessionIdentificator</param>
            <returns>the element as string</returns>
        </member>
        <member name="T:LamestWebserver.UI.HScriptLink">
            <summary>
            Represents a script element pointing to a script-file which has to be loaded as well
            </summary>
        </member>
        <member name="F:LamestWebserver.UI.HScriptLink.URL">
            <summary>
            The URL of the script file
            </summary>
        </member>
        <member name="M:LamestWebserver.UI.HScriptLink.#ctor(System.String)">
            <summary>
            Constructs a new linking Script element
            </summary>
            <param name="URL">the url of the script to load</param>
        </member>
        <member name="M:LamestWebserver.UI.HScriptLink.GetContent(LamestWebserver.SessionData)">
            <summary>
            This Method parses the current element to string
            </summary>
            <param name="sessionData">the current ISessionIdentificator</param>
            <returns>the element as string</returns>
        </member>
        <member name="T:LamestWebserver.UI.HCanvas">
            <summary>
            A canvas element used for complex rendering
            </summary>
        </member>
        <member name="M:LamestWebserver.UI.HCanvas.GetContent(LamestWebserver.SessionData)">
            <summary>
            This Method parses the current element to string
            </summary>
            <param name="sessionData">the current ISessionIdentificator</param>
            <returns>the element as string</returns>
        </member>
        <member name="T:LamestWebserver.UI.HTextArea">
            <summary>
            A textarea element - basically a multiline textbox
            </summary>
        </member>
        <member name="F:LamestWebserver.UI.HTextArea.Cols">
            <summary>
            The amount columns dispalyed
            </summary>
        </member>
        <member name="F:LamestWebserver.UI.HTextArea.Rows">
            <summary>
            The amount rows dispalyed
            </summary>
        </member>
        <member name="F:LamestWebserver.UI.HTextArea.Value">
            <summary>
            The predefined value
            </summary>
        </member>
        <member name="F:LamestWebserver.UI.HTextArea.DescriptionTags">
            <summary>
            Additional attributes added to this tag
            </summary>
        </member>
        <member name="M:LamestWebserver.UI.HTextArea.#ctor(System.String,System.Nullable{System.UInt32},System.Nullable{System.UInt32})">
            <summary>
            Constructs a new textarea element
            </summary>
            <param name="value">the default value of this textarea</param>
            <param name="cols">the amount of columns displayed</param>
            <param name="rows">the amount of rows displayed</param>
        </member>
        <member name="M:LamestWebserver.UI.HTextArea.GetContent(LamestWebserver.SessionData)">
            <summary>
            This Method parses the current element to string
            </summary>
            <param name="sessionData">the current ISessionIdentificator</param>
            <returns>the element as string</returns>
        </member>
        <member name="T:LamestWebserver.UI.HIframe">
            <summary>
            A "p" tag, representing a textblock
            </summary>
        </member>
        <member name="F:LamestWebserver.UI.HIframe.DescriptionTags">
            <summary>
            Additional attributes to add to this HTML-Tag
            </summary>
        </member>
        <member name="F:LamestWebserver.UI.HIframe.Source">
            <summary>
            The source to display
            </summary>
        </member>
        <member name="F:LamestWebserver.UI.HIframe.SourceHtml">
            <summary>
            The HTML-Content to display
            </summary>
        </member>
        <member name="F:LamestWebserver.UI.HIframe.SandboxAttribute">
            <summary>
            The HTML5 sandbox attribute for iframes. null if nonexistent. SandboxMode.enabled no specific attribute.
            </summary>
        </member>
        <member name="M:LamestWebserver.UI.HIframe.#ctor(System.String)">
            <summary>
            Constructs a TextBlock
            </summary>
            <param name="text">the Text displayed</param>
        </member>
        <member name="M:LamestWebserver.UI.HIframe.GetContent(LamestWebserver.SessionData)">
            <summary>
            This Method parses the current element to string
            </summary>
            <param name="sessionData">the current ISessionIdentificator</param>
            <returns>the element as string</returns>
        </member>
        <member name="T:LamestWebserver.UI.HIframe.SandboxMode">
            <summary>
            Represents the HTML5 Sandbox attributes to an iframe.
            </summary>
        </member>
        <member name="T:LamestWebserver.UI.HRuntimeCode">
            <summary>
            Non-static content, which is computed every request
            </summary>
        </member>
        <member name="F:LamestWebserver.UI.HRuntimeCode.RuntimeCode">
            <summary>
            the code to execute
            </summary>
        </member>
        <member name="M:LamestWebserver.UI.HRuntimeCode.#ctor(System.Func{LamestWebserver.SessionData,System.String})">
            <summary>
            Creates non-static content, which is computed every request
            </summary>
            <param name="runtimeCode">The code to execute every request</param>
        </member>
        <member name="M:LamestWebserver.UI.HRuntimeCode.GetContent(LamestWebserver.SessionData)">
            <summary>
            This Method parses the current element to string
            </summary>
            <param name="sessionData">the current ISessionIdentificator</param>
            <returns>the element as string</returns>
        </member>
        <member name="M:LamestWebserver.UI.HRuntimeCode.GetConditionalRuntimeCode(System.Func{LamestWebserver.SessionData,System.String},System.Func{LamestWebserver.SessionData,System.String},System.Func{LamestWebserver.SessionData,System.Boolean})">
            <summary>
            returns a conditional non-static piece of code, which is computed every request if conditionalCode returns true, codeIfTRUE is executed, if it returns false, codeIfFALSE is executed
            </summary>
            <param name="codeIfTRUE">The code to execute if conditionalCode returns TRUE</param>
            <param name="codeIfFALSE">The code to execute if conditionalCode returns FALSE</param>
            <param name="conditionalCode">The Conditional code</param>
            <returns>returns a HRuntimeCode : HElement</returns>
        </member>
        <member name="M:LamestWebserver.UI.HRuntimeCode.GetConditionalRuntimeCode(LamestWebserver.UI.HElement,LamestWebserver.UI.HElement,System.Func{LamestWebserver.SessionData,System.Boolean})">
            <summary>
            returns a conditional non-static HElement, which is computed every request if conditionalCode returns true, elementIfTRUE is returned, if it returns false, elementIfFALSE is returned
            </summary>
            <param name="elementIfTRUE"></param>
            <param name="elementIfFALSE"></param>
            <param name="conditionalCode">The Conditional code</param>
            <returns>returns a HRuntimeCode : HElement</returns>
        </member>
        <member name="T:LamestWebserver.UI.HSyncronizedRuntimeCode">
            <summary>
            Non-static content, which is computed every request AND SYNCRONIZED
            </summary>
        </member>
        <member name="F:LamestWebserver.UI.HSyncronizedRuntimeCode.runtimeCode">
            <summary>
            the code to execute
            </summary>
        </member>
        <member name="M:LamestWebserver.UI.HSyncronizedRuntimeCode.#ctor(System.Func{LamestWebserver.SessionData,System.String})">
            <summary>
            Creates non-static content, which is computed every request AND SYNCRONIZED
            </summary>
            <param name="runtimeCode">The code to execute every request</param>
        </member>
        <member name="M:LamestWebserver.UI.HSyncronizedRuntimeCode.GetContent(LamestWebserver.SessionData)">
            <summary>
            This Method parses the current element to string
            </summary>
            <param name="sessionData">the current ISessionIdentificator</param>
            <returns>the element as string</returns>
        </member>
        <member name="M:LamestWebserver.UI.HSyncronizedRuntimeCode.getConditionalRuntimeCode(System.Func{LamestWebserver.SessionData,System.String},System.Func{LamestWebserver.SessionData,System.String},System.Func{LamestWebserver.SessionData,System.Boolean})">
            <summary>
            returns a conditional non-static piece of code, which is computed every request if conditionalCode returns true, codeIfTRUE is executed, if it returns false, codeIfFALSE is executed AND SYNCRONIZED
            </summary>
            <param name="codeIfTRUE">The code to execute if conditionalCode returns TRUE</param>
            <param name="codeIfFALSE">The code to execute if conditionalCode returns FALSE</param>
            <param name="conditionalCode">The Conditional code</param>
            <returns>returns a HRuntimeCode : HElement</returns>
        </member>
        <member name="M:LamestWebserver.UI.HSyncronizedRuntimeCode.getConditionalRuntimeCode(LamestWebserver.UI.HElement,LamestWebserver.UI.HElement,System.Func{LamestWebserver.SessionData,System.Boolean})">
            <summary>
            returns a conditional non-static HElement, which is computed every request if conditionalCode returns true, elementIfTRUE is returned, if it returns false, elementIfFALSE is returned AND SYNCRONIZED
            </summary>
            <param name="elementIfTRUE"></param>
            <param name="elementIfFALSE"></param>
            <param name="conditionalCode">The Conditional code</param>
            <returns>returns a HRuntimeCode : HElement</returns>
        </member>
        <member name="T:LamestWebserver.UI.HCachePool">
            <summary>
            Provides functionality to dynamically cache HElements
            (if CachingType in HSelectivelyCacheableElement is set to ECachingType.Cacheable for all elements or subelements that should be cached).
            </summary>
        </member>
        <member name="M:LamestWebserver.UI.HCachePool.#ctor(LamestWebserver.UI.HElement,LamestWebserver.IURLIdentifyable,System.Int32)">
            <summary>
            Constructs a new HCachePool which provides functionality to cache contained HElements easily
            (if CachingType in HSelectivelyCacheableElement is set to ECachingType.Cacheable for all elements or subelements that should be cached).
            </summary>
            <param name="containedElement">The contained Element to dynamically cache.</param>
            <param name="currentResponse">The current Page.</param>
            <param name="cachePoolIndex">The index of this HCachePool on this page (if you have multiple HCachePools on the same page).</param>
        </member>
        <member name="M:LamestWebserver.UI.HCachePool.GetContent(LamestWebserver.SessionData)">
            <inheritdoc />
        </member>
        <member name="M:LamestWebserver.UI.HCachePool.IsStaticResponse(System.String,LamestWebserver.Caching.ECachingType,System.Text.StringBuilder)">
            <inheritdoc />
        </member>
        <member name="T:LamestWebserver.UI.ScriptCollection">
            <summary>
            Contains some default JavaScript functions.
            </summary>
        </member>
        <member name="T:LamestWebserver.UI.ScriptCollection.ScriptFuction">
            <summary>
            A prototype for a script-function code piece.
            </summary>
            <param name="sessionData">the current sessionData</param>
            <param name="arguments">the arguments</param>
        </member>
        <member name="M:LamestWebserver.UI.ScriptCollection.GetPageReloadWithFullPostInMilliseconds(LamestWebserver.SessionData,System.Object[])">
            <summary>
            Reloads the current page in X milliseconds redirecting all HTTP-POST values to the new page. parameters: { int milliseconds }
            </summary>
            <inheritdoc />
        </member>
        <member name="M:LamestWebserver.UI.ScriptCollection.GetPageReloadInMilliseconds(LamestWebserver.SessionData,System.Object[])">
            <summary>
            Reloads the current page in X milliseconds. parameters: { int milliseconds }
            </summary>
            <param name="sessionData">the current sessionData</param>
            <param name="arguments">the arguments</param>
        </member>
        <member name="M:LamestWebserver.UI.ScriptCollection.GetPageReferalToXInMilliseconds(LamestWebserver.SessionData,System.Object[])">
            <summary>
            Redirects to the page X in Y milliseconds. parameters: { string newPageUrl, int milliseconds }
            </summary>
            <param name="sessionData">the current sessionData</param>
            <param name="arguments">the arguments</param>
        </member>
        <member name="M:LamestWebserver.UI.ScriptCollection.GetPageReferalToX(LamestWebserver.SessionData,System.Object[])">
            <summary>
            Redirects to the page X . parameters: { string newPageUrl }
            </summary>
            <param name="sessionData">the current sessionData</param>
            <param name="arguments">the arguments</param>
        </member>
        <member name="M:LamestWebserver.UI.ScriptCollection.GetPageReferalWithFullPostInMilliseconds(LamestWebserver.SessionData,System.Object[])">
            <summary>
            Redirects to the page X in Y milliseconds redirecting all HTTP-POST values to the new page. parameters: { string newPageUrl, int milliseconds }
            </summary>
            <param name="sessionData">the current sessionData</param>
            <param name="arguments">the arguments</param>
        </member>
        <member name="T:LamestWebserver.PageFiller">
            <summary>
            A page response on the basis of a special formatted html document
            </summary>
        </member>
        <member name="P:LamestWebserver.PageFiller.URL">
            <summary>
            the URL, this page reads from before parsing into
            </summary>
        </member>
        <member name="F:LamestWebserver.PageFiller.File">
            <summary>
            The file to load and process to display the page.
            </summary>
        </member>
        <member name="F:LamestWebserver.PageFiller.ReplaceHrefs">
            <summary>
            Replace the HREFs on this Page to include the sessionID
            </summary>
        </member>
        <member name="M:LamestWebserver.PageFiller.#ctor(System.String,System.String)">
            <summary>
            The constructor for a PageFiller
            </summary>
            <param name="URL">the url this page will be available at</param>
            <param name="file">the file to load and process from local storage</param>
        </member>
        <member name="M:LamestWebserver.PageFiller.RemoveFromServer">
            <summary>
            A Method to remove this page from the server
            </summary>
        </member>
        <member name="M:LamestWebserver.PageFiller.ProcessData(LamestWebserver.HttpSessionData,System.String@)">
            <summary>
            the method which is called when the response is requested for this page
            </summary>
            <param name="sessionData">the current sessionData</param>
            <param name="output">the page to return</param>
        </member>
        <member name="M:LamestWebserver.PageFiller.SetValue(System.String,System.String,System.String@)">
            <summary>
            sets a value in the document
            </summary>
            <param name="key">the key of the value</param>
            <param name="value">the value to set</param>
            <param name="output">the current page input</param>
        </member>
        <member name="T:LamestWebserver.IURLIdentifyable">
            <summary>
            A Page referencable by URL
            </summary>
        </member>
        <member name="P:LamestWebserver.IURLIdentifyable.URL">
            <summary>
            The URL of this Page
            </summary>
        </member>
        <member name="T:LamestWebserver.ResponseCoreImplementation">
            <summary>
            Simplifies implementation of IURLIdentifyables.
            </summary>
        </member>
        <member name="P:LamestWebserver.ResponseCoreImplementation.URL">
            <inheritdoc />
        </member>
        <member name="M:LamestWebserver.ResponseCoreImplementation.#ctor(System.String)">
            <summary>
            Creates a new ResponseCoreImplementation element.
            </summary>
            <param name="URL">The URL of the Response.</param>
        </member>
        <member name="M:LamestWebserver.ResponseCoreImplementation.LamestWebserver#RequestHandlers#DebugView#IDebugRespondable#GetDebugResponseNode">
            <inheritdoc />
        </member>
        <member name="M:LamestWebserver.ResponseCoreImplementation.GetDebugViewResponse(LamestWebserver.SessionData)">
            <summary>
            The response for the DebugView for this Response.
            </summary>
            <param name="sessionData">The current SessionData.</param>
            <returns>Returns a HElement containing the Response.</returns>
        </member>
        <member name="M:LamestWebserver.ResponseCoreImplementation.UpdateDebugResponseData(System.Exception,System.TimeSpan,LamestWebserver.HttpRequest,LamestWebserver.HttpResponse)">
            <inheritdoc />
        </member>
        <member name="T:LamestWebserver.PageResponse">
            <summary>
            A abstract class for directly responding with a string to the client request.
            </summary>
        </member>
        <member name="M:LamestWebserver.PageResponse.#ctor(System.String,System.Boolean)">
            <summary>
            Constructs (and also registers if you want to) a new Page Response.
            </summary>
            <param name="URL">The URL of this page.</param>
            <param name="register">Shall this page automatically be registered?</param>
        </member>
        <member name="M:LamestWebserver.PageResponse.RemoveFromServer">
            <summary>
            This method removes the current page from the server (as URL identifyable object)
            </summary>
        </member>
        <member name="M:LamestWebserver.PageResponse.GetContents(LamestWebserver.SessionData)">
            <summary>
            A direct answer to the client as string.
            </summary>
            <param name="sessionData">The current SessionData.</param>
            <returns>The response.</returns>
        </member>
        <member name="T:LamestWebserver.SyncronizedPageResponse">
            <summary>
            A syncronized direct response as string to the client request
            </summary>
        </member>
        <member name="M:LamestWebserver.SyncronizedPageResponse.#ctor(System.String,System.Boolean)">
            <summary>
            Constructs a new SyncronizedPageResponse and registers it if specified at the given URL
            </summary>
            <param name="URL">the URL of this Page</param>
            <param name="register">shall this page be automatically registered?</param>
        </member>
        <member name="M:LamestWebserver.SyncronizedPageResponse.GetContents(LamestWebserver.SessionData)">
            <summary>
            A direct answer to the client as string
            </summary>
            <param name="sessionData">the current sessionData</param>
            <returns>the response</returns>
        </member>
        <member name="T:LamestWebserver.ElementResponse">
            <summary>
            A direct response as HElement to the client request
            </summary>
        </member>
        <member name="M:LamestWebserver.ElementResponse.#ctor(System.String,System.Boolean)">
            <summary>
            Constructs a new ElementResponse and registers it if specified at the given URL
            </summary>
            <param name="URL">the URL of this page</param>
            <param name="register">shall this page be automatically registered?</param>
        </member>
        <member name="M:LamestWebserver.ElementResponse.RemoveFromServer">
            <summary>
            This method is used to remove the current page from the server (as URL identifyable object)
            </summary>
        </member>
        <member name="M:LamestWebserver.ElementResponse.GetElement(LamestWebserver.SessionData)">
            <summary>
            A direct answer to the clients request as HElement
            </summary>
            <param name="sessionData">the current sessionData</param>
            <returns>the response</returns>
        </member>
        <member name="T:LamestWebserver.SyncronizedElementResponse">
            <summary>
            A syncronized direct response as HElement to the clients request
            </summary>
        </member>
        <member name="M:LamestWebserver.SyncronizedElementResponse.#ctor(System.String,System.Boolean)">
            <summary>
            Constructs a new SyncronizedElementResponse and registers it if specified at the given URL
            </summary>
            <param name="URL">the URL of this page</param>
            <param name="register">shall this page be automatically registered at the server?</param>
        </member>
        <member name="M:LamestWebserver.SyncronizedElementResponse.GetElement(LamestWebserver.SessionData)">
            <summary>
            The direct pre-syncronized response to the clients request as HElement
            </summary>
            <param name="sessionData">the current sessionData</param>
            <returns>the response</returns>
        </member>
        <member name="T:LamestWebserver.DirectoryResponse">
            <summary>
            A direct response as string to the client directory / directory item request
            </summary>
        </member>
        <member name="P:LamestWebserver.DirectoryResponse.URL">
            <inheritdoc />
        </member>
        <member name="M:LamestWebserver.DirectoryResponse.#ctor(System.String,System.Boolean)">
            <summary>
            Constructs a new Directory Response object
            </summary>
            <param name="URL">the URLL of the directory</param>
            <param name="register">shall this directory be automatically registered at the server?</param>
        </member>
        <member name="M:LamestWebserver.DirectoryResponse.GetContent(LamestWebserver.SessionData,System.String)">
            <summary>
            Retrieves the content of this Directory as string to the response
            </summary>
            <param name="sessionData">the current SessionData</param>
            <param name="subUrl">the requested Sub-URL of the request</param>
            <returns></returns>
        </member>
        <member name="M:LamestWebserver.DirectoryResponse.RemoveFromServer">
            <summary>
            Removes this DirectoryResponse from the Server.
            </summary>
        </member>
        <member name="M:LamestWebserver.DirectoryResponse.LamestWebserver#RequestHandlers#DebugView#IDebugRespondable#GetDebugResponseNode">
            <inheritdoc />
        </member>
        <member name="M:LamestWebserver.DirectoryResponse.GetDebugViewResponse(LamestWebserver.SessionData)">
            <summary>
            The response for the DebugView for this Response.
            </summary>
            <param name="sessionData">The current SessionData.</param>
            <returns>Returns a HElement containing the Response.</returns>
        </member>
        <member name="M:LamestWebserver.DirectoryResponse.UpdateDebugResponseData(System.Exception,System.TimeSpan,System.String,LamestWebserver.HttpRequest,LamestWebserver.HttpResponse)">
            <inheritdoc />
        </member>
        <member name="T:LamestWebserver.DirectoryElementResponse">
            <summary>
            A direct response as HElement to the client directory / directory item request
            </summary>
        </member>
        <member name="M:LamestWebserver.DirectoryElementResponse.#ctor(System.String,System.Boolean)">
            <summary>
            Constructs a new Directory Element Response object
            </summary>
            <param name="URL">the URLL of the directory</param>
            <param name="register">shall this directory be automatically registered at the server?</param>
        </member>
        <member name="M:LamestWebserver.DirectoryElementResponse.GetContent(LamestWebserver.SessionData,System.String)">
            <inheritdoc />
        </member>
        <member name="M:LamestWebserver.DirectoryElementResponse.GetResponse(LamestWebserver.SessionData,System.String)">
            <summary>
            Retrieves the content of this Directory as HElement to the response
            </summary>
            <param name="sessionData">the current SessionData</param>
            <param name="subUrl">the requested Sub-URL of the request</param>
            <returns>A HElement as response.</returns>
        </member>
        <member name="T:LamestWebserver.DirectoryJsonResponse">
            <summary>
            A direct response as serializable object that will be serialized to JSON before being returned to the client directory / directory item request
            </summary>
        </member>
        <member name="M:LamestWebserver.DirectoryJsonResponse.#ctor(System.String,System.Boolean)">
            <summary>
            Constructs a new Directory Element Response object
            </summary>
            <param name="URL">the URLL of the directory</param>
            <param name="register">shall this directory be automatically registered at the server?</param>
        </member>
        <member name="M:LamestWebserver.DirectoryJsonResponse.GetContent(LamestWebserver.SessionData,System.String)">
            <inheritdoc />
        </member>
        <member name="M:LamestWebserver.DirectoryJsonResponse.GetResponse(LamestWebserver.SessionData,System.String)">
            <summary>
            Retrieves the content of this Directory as serializable object to the response.
            </summary>
            <param name="sessionData">the current SessionData</param>
            <param name="subUrl">the requested Sub-URL of the request</param>
            <returns>A serializable object.</returns>
        </member>
        <member name="T:LamestWebserver.CachedResponse">
            <summary>
            An automatically caching derivate of ElementResponse.
            </summary>
        </member>
        <member name="F:LamestWebserver.CachedResponse.StartingStringBuilderSize">
            <summary>
            The default size of a response.
            </summary>
        </member>
        <member name="M:LamestWebserver.CachedResponse.#ctor(System.String,System.Boolean)">
            <summary>
            Constructs a new CachedResponse.
            </summary>
            <param name="URL">The URL to register at.</param>
            <param name="register">Shall this page already be registered?</param>
        </member>
        <member name="M:LamestWebserver.CachedResponse.GetElement(LamestWebserver.SessionData)">
            <summary>
            Retrieves the auto-cached Element and it's subelements 
            (if CachingType in HSelectivelyCacheableElement is set to ECachingType.Cacheable for all elements or subelements that should be cached).
            </summary>
            <param name="sessionData">The current SessionData.</param>
            <returns></returns>
        </member>
        <member name="M:LamestWebserver.CachedResponse.GetContents(LamestWebserver.SessionData)">
            <summary>
            Returns a HElement that contains the contents of the requested page.
            </summary>
            <param name="sessionData">The current SessionData.</param>
            <returns>Returns a HElement that contains the contents of the requested page.</returns>
        </member>
        <member name="M:LamestWebserver.CachedResponse.RemoveFromServer">
            <inheritdoc />
        </member>
        <member name="T:LamestWebserver.DataResponse">
            <summary>
            Inherit from this class to allow for replying to request with data (byte[]).
            </summary>
        </member>
        <member name="M:LamestWebserver.DataResponse.#ctor(System.String,System.Boolean)">
            <summary>
            Creates a new ResponseCoreImplementation element.
            </summary>
            <param name="URL">The URL of the Response.</param>
        </member>
        <member name="M:LamestWebserver.DataResponse.GetDataContents(LamestWebserver.HttpSessionData,System.String@,System.Text.Encoding@)">
            <summary>
            The method that is called for every request to this URL.
            </summary>
            <param name="sessionData">The current SessionData.</param>
            <param name="contentType">The ContentType of the retrieved Data.</param>
            <param name="encoding">The Encoding / CharSet of the retrieved data.</param>
            <returns>The requested data as byte[].</returns>
        </member>
        <member name="M:LamestWebserver.DataResponse.RemoveFromServer">
            <summary>
            This method is used to remove the current data response from the server (as URL identifyable object)
            </summary>
        </member>
        <member name="T:LamestWebserver.JsonResponse">
            <summary>
            Inherit from this class to allow for replying to request with objects which will be serialized to JSON. Please make sure your objects are serializable.
            </summary>
        </member>
        <member name="M:LamestWebserver.JsonResponse.#ctor(System.String,System.Boolean)">
            <summary>
            Creates a new ResponseCoreImplementation element.
            </summary>
            <param name="URL">The URL of the Response.</param>
        </member>
        <member name="M:LamestWebserver.JsonResponse.GetResponseAsJson(LamestWebserver.HttpSessionData,System.String@,System.Text.Encoding@)">
            <summary>
            The internal method that is called for every request to this URL.
            </summary>
            <param name="sessionData">The current SessionData.</param>
            <param name="contentType">The ContentType of the retrieved Data.</param>
            <param name="encoding">The Encoding / CharSet of the retrieved data.</param>
            <returns>The requested data as byte[].</returns>
        </member>
        <member name="M:LamestWebserver.JsonResponse.GetResponse(LamestWebserver.HttpSessionData)">
            <summary>
            The method called for every request to this URL.
            </summary>
            <param name="sessionData"></param>
            <returns>Returns the requested *serializable* object</returns>
        </member>
        <member name="M:LamestWebserver.JsonResponse.RemoveFromServer">
            <summary>
            This method is used to remove the current data response from the server (as URL identifyable object)
            </summary>
        </member>
        <member name="T:LamestWebserver.InstantPageResponse">
            <summary>
            This Helper-Class is Used to quickly define new pages at the server
            </summary>
        </member>
        <member name="M:LamestWebserver.InstantPageResponse.AddInstantPageResponse(System.String,LamestWebserver.Master.GetContents)">
            <summary>
            adds a page to the server, that executes the given code
            </summary>
        </member>
        <member name="M:LamestWebserver.InstantPageResponse.AddOneTimeInstantPageResponse(LamestWebserver.Master.GetContents,System.Boolean)">
            <summary>
            adds a temporary page to the server, that executes the given code (only available for ONE request)
            </summary>
            <param name="code">the code to execute</param>
            <param name="instantlyRemove">runtime code should instantly remove these - constructors should not remove, since then they'll be gone the next compile</param>
            <returns>the name at which this temporary page will be available at.</returns>
        </member>
        <member name="M:LamestWebserver.InstantPageResponse.AddTimedRedirect(System.String,System.String,System.Int32,System.String,System.Boolean)">
            <summary>
            adds a page to the server, that redirects to "destinationURL" in X milliseconds
            </summary>
        </member>
        <member name="M:LamestWebserver.InstantPageResponse.AddRedirect(System.String,System.String,System.Boolean)">
            <summary>
            adds a page to the server, that redirects to "destinationURL"
            </summary>
        </member>
        <member name="M:LamestWebserver.InstantPageResponse.AddRedirectWithCode(System.String,System.String,System.Action{LamestWebserver.HttpSessionData},System.Boolean)">
            <summary>
            adds a page to the server, that redirects to "destinationURL" and executes the given code
            </summary>
        </member>
        <member name="M:LamestWebserver.InstantPageResponse.AddConditionalRedirect(System.String,System.String,System.String,System.Func{LamestWebserver.HttpSessionData,System.Boolean},System.Boolean)">
            <summary>
            adds a page to the server, that redirects to "destinationURLifTRUE" if the conditional code returns true and redirects to "destinationURLifFALSE" if the conditional code returns false
            </summary>
        </member>
        <member name="M:LamestWebserver.InstantPageResponse.AddRedirectOrCode(System.String,System.String,LamestWebserver.Master.GetContents,System.Func{LamestWebserver.HttpSessionData,System.Boolean},System.Boolean)">
            <summary>
            adds a page to the server, that redirects if the conditional code returns true and executes other code if the conditional code returns false
            </summary>
        </member>
        <member name="M:LamestWebserver.InstantPageResponse.AddOneTimeRedirect(System.String,System.Boolean,System.Boolean)">
            <summary>
            adds a temporary page to the server, that redirects to "destinationURL" (only available for ONE request)
            </summary>
            <param name="destinationURL">the desired URL to reach</param>
            <param name="instantlyRemove">runtime code should instantly remove these - constructors should not remove, since then they'll be gone the next compile</param>
            <param name="copyPOST">specifies whether all POST values given should be copied throughout the whole redirecting process</param>
            <returns>the name at which this temporary page will be available at.</returns>
        </member>
        <member name="M:LamestWebserver.InstantPageResponse.AddOneTimeRedirectWithCode(System.String,System.Boolean,System.Action{LamestWebserver.HttpSessionData},System.Boolean)">
            <summary>
            adds a temporary page to the server, that redirects to "destinationURL" and executes the given code (only available for ONE request)
            </summary>
            <param name="destinationURL">the desired URL to reach</param>
            <param name="instantlyRemove">runtime code should instantly remove these - constructors should not remove, since then they'll be gone the next compile</param>
            <param name="action">the code to execute</param>
            <param name="copyPOST">specifies whether all POST values given should be copied throughout the whole redirecting process</param>
        </member>
        <member name="M:LamestWebserver.InstantPageResponse.AddOneTimeTimedRedirect(System.String,System.String,System.Int32,System.Boolean,System.Boolean)">
            <summary>
            adds a temporary page to the server, that redirects to "destinationURL" in X milliseconds (only available for ONE request)
            </summary>
            <param name="destinationURL">the desired URL to reach</param>
            <param name="message">the message to display</param>
            <param name="milliseconds">the amount of milliseconds to wait before redirecting</param>
            <param name="instantlyRemove">runtime code should instantly remove these - constructors should not remove, since then they'll be gone the next compile</param>
            <param name="copyPOST">specifies whether all POST values given should be copied throughout the whole redirecting process</param>
            <returns>the name at which this temporary page will be available at.</returns>
        </member>
        <member name="M:LamestWebserver.InstantPageResponse.AddOneTimeConditionalRedirect(System.String,System.String,System.Boolean,System.Func{LamestWebserver.HttpSessionData,System.Boolean},System.Boolean)">
            <summary>
            adds a temporary page to the server, that redirects to "destinationURLifTRUE" if the conditional code returns true and redirects to "destinationURLifFALSE" if the conditional code returns false (only available for ONE request)
            </summary>
            <param name="destinationURLifTRUE">the desired URL to reach if the code returns true</param>
            <param name="destinationURLifFALSE">the desired URL to reach if the code returns false</param>
            <param name="instantlyRemove">runtime code should instantly remove these - constructors should not remove, since then they'll be gone the next compile</param>
            <param name="conditionalCode">the conditional code to execute</param>
            <param name="copyPOST">specifies whether all POST values given should be copied throughout the whole redirecting process</param>
            <returns>the name at which this temporary page will be available at.</returns>
        </member>
        <member name="M:LamestWebserver.InstantPageResponse.AddOneTimeRedirectOrCode(System.String,LamestWebserver.Master.GetContents,System.Boolean,System.Func{LamestWebserver.HttpSessionData,System.Boolean},System.Boolean)">
            <summary>
            adds a temporary page to the server, that redirects if the conditional code returns true and executes other code if the conditional code returns false (only available for ONE request)
            </summary>
            <param name="destinationURLifTRUE">the desired URL to reach if the conditional code returns true</param>
            <param name="codeIfFALSE">the code to be executed if the conditional code returns false</param>
            <param name="instantlyRemove">runtime code should instantly remove these - constructors should not remove, since then they'll be gone the next compile</param>
            <param name="conditionalCode">the conditional code to execute</param>
            <param name="copyPOST">specifies whether all POST values given should be copied throughout the whole redirecting process</param>
            <returns>the name at which this temporary page will be available at.</returns>
        </member>
        <member name="M:LamestWebserver.InstantPageResponse.GenerateRedirectCode(System.String,LamestWebserver.SessionData,System.Boolean)">
            <summary>
            quickly generates a redirecting html page
            </summary>
            <param name="destinationURL">the desired url to reach</param>
            <param name="sessionData">the current SessionData</param>
            <param name="copyPOST">shall the POST-Values be copied?</param>
            <returns>the page as string</returns>
        </member>
        <member name="M:LamestWebserver.InstantPageResponse.GenerateRedirectInMillisecondsCode(System.String,System.String,System.Int32,LamestWebserver.HttpSessionData,System.Boolean)">
            <summary>
            quickly generates a redirecting html page that waits a few milliseconds and displays a message
            </summary>
            <param name="destinationURL">the desired url to reach</param>
            <param name="message">the message to display</param>
            <param name="milliseconds">the amount of milliseconds to wait</param>
            <param name="sessionData">the current SessionData</param>
            <param name="copyPOST">shall the POST-Values be copied?</param>
            <returns>the page as string</returns>
        </member>
        <member name="T:LamestWebserver.SessionContainer">
            <summary>
            Here you can find all the Global SessionID related methods and fields
            </summary>
        </member>
        <member name="P:LamestWebserver.SessionContainer.GlobalDefaultCachingType">
            <summary>
            The default CachingType for Pages and Elements without a specific CachingType.
            </summary>
        </member>
        <member name="F:LamestWebserver.SessionContainer.SessionIdRereferencingMode">
            <summary>
            The mode for SessionID recreation.
            </summary>
        </member>
        <member name="T:LamestWebserver.SessionContainer.ESessionIdRereferencingMode">
            <summary>
            Contains the available SessionID recreation modes
            </summary>
        </member>
        <member name="F:LamestWebserver.SessionContainer.ESessionIdRereferencingMode.Keep">
            <summary>
            Keeps the SessionID for a specific session.
            </summary>
        </member>
        <member name="F:LamestWebserver.SessionContainer.ESessionIdRereferencingMode.AlwaysRenew">
            <summary>
            always renews the sessionID during every newly processed page
            </summary>
        </member>
        <member name="F:LamestWebserver.SessionContainer.SessionIdTransmissionType">
            <summary>
            The mode for sessionId transmission
            </summary>
        </member>
        <member name="T:LamestWebserver.SessionContainer.ESessionIdTransmissionType">
            <summary>
            Contains all available modes for sessionId transmission
            </summary>
        </member>
        <member name="F:LamestWebserver.SessionContainer.ESessionIdTransmissionType.Cookie">
            <summary>
            Transmitts the SessionID via Cookie
            </summary>
        </member>
        <member name="F:LamestWebserver.SessionContainer.UserVariableHashMapSize">
            <summary>
            The default size of the HashMaps for UserGlobal-Variables
            </summary>
        </member>
        <member name="F:LamestWebserver.SessionContainer.UserHashMapSize">
            <summary>
            The default size of the HashMap containing the User
            </summary>
        </member>
        <member name="F:LamestWebserver.SessionContainer.MaxUsers">
            <summary>
            The maximum count of users being online at one time
            </summary>
        </member>
        <member name="F:LamestWebserver.SessionContainer.UserInfo.lastPullUtcTime">
            <summary>
            The utc time this info was retrieved the last time.
            </summary>
        </member>
        <member name="M:LamestWebserver.SessionContainer.GetSSIDforUser(System.String,System.Boolean@,LamestWebserver.SessionContainer.UserInfo@)">
            <summary>
            This method also creates a user if none exists!
            </summary>
            <param name="user">the current user</param>
            <param name="isNewSSID">has a new ssid been created or are we reusing the old one</param>
            <param name="userInfo">the UserInfo of the retrieved User</param>
            <returns></returns>
        </member>
        <member name="M:LamestWebserver.SessionContainer.GenerateUnusedHash">
            <summary>
            generates a 128 bit AES hash that is not used in pagenames
            </summary>
            <returns></returns>
        </member>
        <member name="T:LamestWebserver.HttpSessionData">
            <summary>
            Contains all Session dependent Information
            </summary>
        </member>
        <member name="F:LamestWebserver.HttpSessionData.SetCookies">
            <summary>
            Cookies to set in the client browser
            </summary>
        </member>
        <member name="P:LamestWebserver.HttpSessionData.RawHttpPacket">
            <summary>
            the raw packet sent to the server
            </summary>
        </member>
        <member name="P:LamestWebserver.HttpSessionData.Cookies">
            <summary>
            The cookies sent by the client to the server
            </summary>
        </member>
        <member name="P:LamestWebserver.HttpSessionData.HttpPacket">
            <summary>
            HttpPacket of the original Request.
            </summary>
        </member>
        <member name="P:LamestWebserver.HttpSessionData.Stream">
            <summary>
            Stream of the original Request.
            </summary>
        </member>
        <member name="F:LamestWebserver.HttpSessionData.RemoteEndpoint">
            <summary>
            The remoteEndpoint (if any) of the original Request.
            </summary>
        </member>
        <member name="F:LamestWebserver.HttpSessionData.LocalEndpoint">
            <summary>
            The remoteEndpoint (if any) of the original Request.
            </summary>
        </member>
        <member name="M:LamestWebserver.HttpSessionData.RegisterUser(System.String)">
            <summary>
            Registers the user and assigns a SSID
            </summary>
            <param name="userName">the User to register</param>
            <returns>the SSID for the user</returns>
        </member>
        <member name="M:LamestWebserver.HttpSessionData.ForceGetNextSsid">
            <summary>
            _FORCES_ to get a new SSID for the current user if needed for higher level security (call before building the site)
            </summary>
            <returns>the new ssid</returns>
        </member>
        <member name="M:LamestWebserver.HttpSessionData.LogoutUser">
            <summary>
            deletes the registration of the current user.
            </summary>
        </member>
        <member name="T:LamestWebserver.WebServer">
            <summary>
            A Webserver. The central unit in LamestWebserver.
            </summary>
        </member>
        <member name="F:LamestWebserver.WebServer.CurrentClientRemoteEndpoint">
            <summary>
            The IP and Port of the currently Connected Client.
            </summary>
        </member>
        <member name="P:LamestWebserver.WebServer.ServerCount">
            <summary>
            The number of currently running servers.
            </summary>
        </member>
        <member name="F:LamestWebserver.WebServer.PageResponseStorageHashMapSize">
            <summary>
            The size of the Page Response AVLTree-Hashmap. This is not the maximum amount this Hashmap can handle.
            </summary>
        </member>
        <member name="F:LamestWebserver.WebServer.DataResponseStorageHashMapSize">
            <summary>
            The size of the Data Response AVLTree-Hashmap. This is not the maximum amount this Hashmap can handle.
            </summary>
        </member>
        <member name="M:LamestWebserver.WebServer.AddDependentWebsever(LamestWebserver.WebServer)">
            <summary>
            Add a webserver to be closed (IDisposable.Dispose()) whenever this webserver is closed. 
            </summary>
            <param name="webserver">The webserver to close with this one.</param>
        </member>
        <member name="F:LamestWebserver.WebServer.OneTimePageResponsesStorageQueueSize">
            <summary>
            The maximum amount of items in the One Time Page Response Queue (QueuedAVLTree).
            </summary>
        </member>
        <member name="F:LamestWebserver.WebServer.WebSocketResponsePageStorageHashMapSize">
            <summary>
            The size of the Websocket Response AVLTree-Hashmap. This is not the maximum amount this Hashmap can handle.
            </summary>
        </member>
        <member name="F:LamestWebserver.WebServer.DirectoryResponseStorageHashMapSize">
            <summary>
            The size of the Directory Response AVLTree-Hashmap. This is not the maximum amount this Hashmap can handle.
            </summary>
        </member>
        <member name="F:LamestWebserver.WebServer.RequestMaxPacketSize">
            <summary>
            The size that is read from the networkStream for each request.
            </summary>
        </member>
        <member name="F:LamestWebserver.WebServer.ResponseDefaultStringLength">
            <summary>
            The size that is set as starting StringBuilder capacity for a HttpResponse.
            </summary>
        </member>
        <member name="P:LamestWebserver.WebServer.Certificate">
            <summary>
            SSL Certificate. server will use ssl if certificate not null.
            <para /> If the webserver does not respond after including your certificate, it might not be loaded or set up correctly.
            Consider the LamestWebserver log output `ServerHandler.StartHandler();`.
            </summary>
        </member>
        <member name="F:LamestWebserver.WebServer.BlockInsecureConnections">
            <summary>
            Shall the server answer in plain HTTP if no certificate is provided or if the authentication fails?
            <para /> If this is set to true and your Certificate is not set up correctly, the webserver will not respond at all to the clients.
            </summary>
        </member>
        <member name="P:LamestWebserver.WebServer.EnabledSslProtocols">
            <summary>
            Enabled SSL Protocols supported by the server.
            </summary>
        </member>
        <member name="F:LamestWebserver.WebServer.RequestHandler">
            <summary>
            The RequestHandler used in this Webserver instance.
            </summary>
        </member>
        <member name="F:LamestWebserver.WebServer.RequireUnsafeMemory">
            <summary>
            If enabled will provide callers with a fresh FlushableMemoryPool.
            </summary>
        </member>
        <member name="M:LamestWebserver.WebServer.#ctor(System.Int32,System.String,System.Security.Cryptography.X509Certificates.X509Certificate2,System.Security.Authentication.SslProtocols)">
            <summary>
            Starts a new Webserver and adds the folder and default components to the CurrentRequestHandler. If you are just adding a server listening on another port as well - just use a different constructor.
            </summary>
            <param name="port">The port to listen to</param>
            <param name="folder">a folder to read from (can be null)</param>
            <param name="certificate">The ssl certificate for https (if null: connection will be http; if set will only be https)
            <para /> If the webserver does not respond after including your certificate, it might not be loaded or set up correctly.
            Consider looking at the LamestWebserver Logger output.</param>
            <param name="enabledSslProtocols">The available ssl protocols if the connection is https.</param>
        </member>
        <member name="M:LamestWebserver.WebServer.#ctor(System.Int32,LamestWebserver.RequestHandlers.RequestHandler,System.Security.Cryptography.X509Certificates.X509Certificate2,System.Security.Authentication.SslProtocols)">
            <summary>
            Starts a new Webserver on a specified RequestHandler.
            </summary>
            <param name="port">The port to listen to.</param>
            <param name="requestHandler">The RequestHandler to use. If null, RequestHandler.CurrentRequestHandler will be used.</param>
            <param name="certificate">The ssl certificate for https (if null: connection will be http; if set will only be https)
            <para /> If the webserver does not respond after including your certificate, it might not be loaded or set up correctly.
            Consider looking at the LamestWebserver Logger output.</param>
            <param name="enabledSslProtocols">The available ssl protocols if the connection is https.</param>
        </member>
        <member name="M:LamestWebserver.WebServer.#ctor(System.Int32,System.Security.Cryptography.X509Certificates.X509Certificate2,System.Security.Authentication.SslProtocols)">
            <summary>
            Starts a new Webserver listening to all previously added Responses.
            </summary>
            <param name="port">the port to listen to</param>
            <param name="certificate">The ssl certificate for https (if null: connection will be http; if set will only be https)
            <para /> If the webserver does not respond after including your certificate, it might not be loaded or set up correctly.
            Consider looking at the LamestWebserver Logger output.</param>
            <param name="enabledSslProtocols">The available ssl protocols if the connection is https.</param>
        </member>
        <member name="M:LamestWebserver.WebServer.Stop">
            <inheritdoc />
        </member>
        <member name="M:LamestWebserver.WebServer.HandleClient(System.Net.Sockets.TcpClient,System.Net.Sockets.NetworkStream)">
            <inheritdoc />
        </member>
        <member name="M:LamestWebserver.WebServer.GetEncoding(System.String)">
            <summary>
            Source: http://stackoverflow.com/questions/3825390/effective-way-to-find-any-files-encoding
            Determines a text file's encoding by analyzing its byte order mark (BOM).
            Defaults to ASCII when detection of the text file's endianness fails.
            </summary>
            <param name="filename">The text file to analyze.</param>
            <returns>The detected encoding.</returns>
        </member>
        <member name="F:LamestWebserver.WebServer.ErrorMsgContainSessionData">
            <summary>
            Shall the ErrorMsg contain the current SessionData if possible?
            </summary>
        </member>
        <member name="F:LamestWebserver.WebServer.EncryptErrorMsgs">
            <summary>
            Shall exception-messages be encrypted?
            </summary>
        </member>
        <member name="P:LamestWebserver.WebServer.ErrorMsgKey">
            <summary>
            The Key for the exception-message encryption.
            </summary>
        </member>
        <member name="P:LamestWebserver.WebServer.ErrorMsgIV">
            <summary>
            The IV for the exception-message encryption.
            </summary>
        </member>
        <member name="M:LamestWebserver.WebServer.GetErrorMsg(System.Exception,LamestWebserver.SessionData,System.String)">
            <summary>
            Retrieves an error message
            </summary>
            <param name="exception">the exception that happened</param>
            <param name="sessionData">the sessionData (can be null)</param>
            <param name="httpPacket">the http-request</param>
            <returns>a nice error message</returns>
        </member>
        <member name="T:LamestWebserver.ServerHandler">
            <summary>
            Provides functionality to overview running servers and logs
            </summary>
        </member>
        <member name="M:LamestWebserver.ServerHandler.StartHandler(System.Boolean)">
            <summary>
            Starts the IO-Loop for handling the server and showing logs.
            </summary>
        </member>
        <member name="M:LamestWebserver.ServerHandler.StopHandler">
            <summary>
            Stops the Handler and all running Servers.
            </summary>
        </member>
        <member name="M:LamestWebserver.ServerHandler.LogMessage(System.String)">
            <summary>
            Logs a message to the ServerLog
            </summary>
            <param name="message">the message to log</param>
        </member>
        <member name="T:LamestWebserver.WebServices.Generators.RequesterWebServiceTemplate">
            <summary>
            Class to produce the template output
            </summary>
        </member>
        <member name="M:LamestWebserver.WebServices.Generators.RequesterWebServiceTemplate.TransformText">
            <summary>
            Create the template output
            </summary>
        </member>
        <member name="F:LamestWebserver.WebServices.Generators.RequesterWebServiceTemplate.Namespace">
            <summary>
            The name of the Namespace to build this class in.
            </summary>
        </member>
        <member name="F:LamestWebserver.WebServices.Generators.RequesterWebServiceTemplate.ClassName">
            <summary>
            The name of the Class to inherit from.
            </summary>
        </member>
        <member name="F:LamestWebserver.WebServices.Generators.RequesterWebServiceTemplate.AssemblyNameSpace">
            <summary>
            The name of the Namespace that the type to inherit from is defined in.
            </summary>
        </member>
        <member name="F:LamestWebserver.WebServices.Generators.RequesterWebServiceTemplate.ClassType">
            <summary>
            The Type of the Class to inherit from.
            </summary>
        </member>
        <member name="T:LamestWebserver.WebServices.Generators.RequesterWebServiceTemplateBase">
            <summary>
            Base class for this transformation
            </summary>
        </member>
        <member name="P:LamestWebserver.WebServices.Generators.RequesterWebServiceTemplateBase.GenerationEnvironment">
            <summary>
            The string builder that generation-time code is using to assemble generated output
            </summary>
        </member>
        <member name="P:LamestWebserver.WebServices.Generators.RequesterWebServiceTemplateBase.Errors">
            <summary>
            The error collection for the generation process
            </summary>
        </member>
        <member name="P:LamestWebserver.WebServices.Generators.RequesterWebServiceTemplateBase.indentLengths">
            <summary>
            A list of the lengths of each indent that was added with PushIndent
            </summary>
        </member>
        <member name="P:LamestWebserver.WebServices.Generators.RequesterWebServiceTemplateBase.CurrentIndent">
            <summary>
            Gets the current indent we use when adding lines to the output
            </summary>
        </member>
        <member name="P:LamestWebserver.WebServices.Generators.RequesterWebServiceTemplateBase.Session">
            <summary>
            Current transformation session
            </summary>
        </member>
        <member name="M:LamestWebserver.WebServices.Generators.RequesterWebServiceTemplateBase.Write(System.String)">
            <summary>
            Write text directly into the generated output
            </summary>
        </member>
        <member name="M:LamestWebserver.WebServices.Generators.RequesterWebServiceTemplateBase.WriteLine(System.String)">
            <summary>
            Write text directly into the generated output
            </summary>
        </member>
        <member name="M:LamestWebserver.WebServices.Generators.RequesterWebServiceTemplateBase.Write(System.String,System.Object[])">
            <summary>
            Write formatted text directly into the generated output
            </summary>
        </member>
        <member name="M:LamestWebserver.WebServices.Generators.RequesterWebServiceTemplateBase.WriteLine(System.String,System.Object[])">
            <summary>
            Write formatted text directly into the generated output
            </summary>
        </member>
        <member name="M:LamestWebserver.WebServices.Generators.RequesterWebServiceTemplateBase.Error(System.String)">
            <summary>
            Raise an error
            </summary>
        </member>
        <member name="M:LamestWebserver.WebServices.Generators.RequesterWebServiceTemplateBase.Warning(System.String)">
            <summary>
            Raise a warning
            </summary>
        </member>
        <member name="M:LamestWebserver.WebServices.Generators.RequesterWebServiceTemplateBase.PushIndent(System.String)">
            <summary>
            Increase the indent
            </summary>
        </member>
        <member name="M:LamestWebserver.WebServices.Generators.RequesterWebServiceTemplateBase.PopIndent">
            <summary>
            Remove the last indent that was added with PushIndent
            </summary>
        </member>
        <member name="M:LamestWebserver.WebServices.Generators.RequesterWebServiceTemplateBase.ClearIndent">
            <summary>
            Remove any indentation
            </summary>
        </member>
        <member name="T:LamestWebserver.WebServices.Generators.RequesterWebServiceTemplateBase.ToStringInstanceHelper">
            <summary>
            Utility class to produce culture-oriented representation of an object as a string.
            </summary>
        </member>
        <member name="P:LamestWebserver.WebServices.Generators.RequesterWebServiceTemplateBase.ToStringInstanceHelper.FormatProvider">
            <summary>
            Gets or sets format provider to be used by ToStringWithCulture method.
            </summary>
        </member>
        <member name="M:LamestWebserver.WebServices.Generators.RequesterWebServiceTemplateBase.ToStringInstanceHelper.ToStringWithCulture(System.Object)">
            <summary>
            This is called from the compile/run appdomain to convert objects within an expression block to a string
            </summary>
        </member>
        <member name="P:LamestWebserver.WebServices.Generators.RequesterWebServiceTemplateBase.ToStringHelper">
            <summary>
            Helper to produce culture-oriented representation of an object as a string
            </summary>
        </member>
        <member name="T:LamestWebserver.WebServices.Generators.WebServiceImplementationGenerator">
            <summary>
            Generates WebService Implementations from the WebService Implementation Templates.
            </summary>
        </member>
        <member name="M:LamestWebserver.WebServices.Generators.WebServiceImplementationGenerator.GetWebServiceLocalImplementation``1(LamestWebserver.WebServices.WebServiceHandler)">
            <summary>
            Compiles, builds and retrieves an instance of a local WebServiceImplementation inherited from the given type belonging to the given WebServiceHandler.
            </summary>
            <typeparam name="T">The type to inherit from.</typeparam>
            <param name="webServiceHandler">The corresponding WebServiceHandler.</param>
            <returns>An object of the local WebService.</returns>
        </member>
        <member name="M:LamestWebserver.WebServices.Generators.WebServiceImplementationGenerator.GetWebServiceLocalImplementation(System.Type,LamestWebserver.WebServices.WebServiceHandler)">
            <summary>
            Compiles, builds and retrieves an instance of a local WebServiceImplementation inherited from the given type belonging to the given WebServiceHandler.
            </summary>
            <param name="type">The type to inherit from.</param>
            <param name="webServiceHandler">The corresponding WebServiceHandler.</param>
            <returns>An object of the local WebService.</returns>
        </member>
        <member name="M:LamestWebserver.WebServices.Generators.WebServiceImplementationGenerator.GetWebServiceRequestImplementation``1(LamestWebserver.WebServices.WebServiceHandler)">
            <summary>
            Compiles, builds and retrieves an instance of a remote WebServiceImplementation inherited from the given type belonging to the given WebServiceHandler.
            </summary>
            <typeparam name="T">The type to inherit from.</typeparam>
            <param name="webServiceHandler">The corresponding WebServiceHandler.</param>
            <returns>An object of the remote WebService.</returns>
        </member>
        <member name="M:LamestWebserver.WebServices.Generators.WebServiceImplementationGenerator.GetWebServiceRequestImplementation(System.Type,LamestWebserver.WebServices.WebServiceHandler)">
            <summary>
            Compiles, builds and retrieves an instance of a remote WebServiceImplementation inherited from the given type belonging to the given WebServiceHandler.
            </summary>
            <param name="type">The type to inherit from.</param>
            <param name="webServiceHandler">The corresponding WebServiceHandler.</param>
            <returns>An object of the remote WebService.</returns>
        </member>
        <member name="M:LamestWebserver.WebServices.Generators.WebServiceImplementationGenerator.CompileAndBuildObject(System.String,System.Type,System.String,LamestWebserver.WebServices.WebServiceHandler)">
            <summary>
            Compiles a piece of code and builds an instance of the given type.
            </summary>
            <param name="code">The code to compile.</param>
            <param name="type">The baseType of the 'typeName' type.</param>
            <param name="typeName">The type to retrieve &amp; build an instance of from the compiled code.</param>
            <param name="webServiceHandler">The current WebServiceHandler.</param>
            <returns>Returns the instance of the given type.</returns>
        </member>
        <member name="M:LamestWebserver.WebServices.Generators.WebServiceImplementationGenerator.GetWebServiceLocalImplementationName``1">
            <summary>
            Retrieves the Name of a local WebService that would derive from the given type.
            </summary>
            <typeparam name="T">The type to derive a WebService from.</typeparam>
            <returns>Returns the name of the type as string.</returns>
        </member>
        <member name="M:LamestWebserver.WebServices.Generators.WebServiceImplementationGenerator.GetWebServiceLocalImplementationName(System.Type)">
            <summary>
            Retrieves the Name of a local WebService that would derive from the given type.
            </summary>
            <param name="type">The type to derive a WebService from.</param>
            <returns>Returns the name of the type as string.</returns>
        </member>
        <member name="M:LamestWebserver.WebServices.Generators.WebServiceImplementationGenerator.GetWebServiceLocalImplementationNamespace">
            <summary>
            Retrieves the namespace of a local WebService.
            </summary>
            <returns>Returns the name of the namespace of a local WebService.</returns>
        </member>
        <member name="M:LamestWebserver.WebServices.Generators.WebServiceImplementationGenerator.GetWebServiceRequestImplementationName``1">
            <summary>
            Retrieves the Name of a remote WebService that would derive from the given type.
            </summary>
            <typeparam name="T">The type to derive a WebService from.</typeparam>
            <returns>Returns the name of the type as string.</returns>
        </member>
        <member name="M:LamestWebserver.WebServices.Generators.WebServiceImplementationGenerator.GetWebServiceRequestImplementationName(System.Type)">
            <summary>
            Retrieves the Name of a remote WebService that would derive from the given type.
            </summary>
            <param name="type">The type to derive a WebService from.</param>
            <returns>Returns the name of the type as string.</returns>
        </member>
        <member name="M:LamestWebserver.WebServices.Generators.WebServiceImplementationGenerator.GetWebServiceRequestImplementationNamespace">
            <summary>
            Retrieves the namespace of a remote WebService.
            </summary>
            <returns>Returns the name of the namespace of a remote WebService.</returns>
        </member>
        <member name="T:LamestWebserver.WebServices.Generators.LocalWebServiceTemplate">
            <summary>
            Class to produce the template output
            </summary>
        </member>
        <member name="M:LamestWebserver.WebServices.Generators.LocalWebServiceTemplate.TransformText">
            <summary>
            Create the template output
            </summary>
        </member>
        <member name="F:LamestWebserver.WebServices.Generators.LocalWebServiceTemplate.Namespace">
            <summary>
            The name of the Namespace to build this class in.
            </summary>
        </member>
        <member name="F:LamestWebserver.WebServices.Generators.LocalWebServiceTemplate.ClassName">
            <summary>
            The name of the Class to inherit from.
            </summary>
        </member>
        <member name="F:LamestWebserver.WebServices.Generators.LocalWebServiceTemplate.AssemblyNameSpace">
            <summary>
            The name of the Namespace that the type to inherit from is defined in.
            </summary>
        </member>
        <member name="F:LamestWebserver.WebServices.Generators.LocalWebServiceTemplate.ClassType">
            <summary>
            The Type of the Class to inherit from.
            </summary>
        </member>
        <member name="T:LamestWebserver.WebServices.Generators.LocalWebServiceTemplateBase">
            <summary>
            Base class for this transformation
            </summary>
        </member>
        <member name="P:LamestWebserver.WebServices.Generators.LocalWebServiceTemplateBase.GenerationEnvironment">
            <summary>
            The string builder that generation-time code is using to assemble generated output
            </summary>
        </member>
        <member name="P:LamestWebserver.WebServices.Generators.LocalWebServiceTemplateBase.Errors">
            <summary>
            The error collection for the generation process
            </summary>
        </member>
        <member name="P:LamestWebserver.WebServices.Generators.LocalWebServiceTemplateBase.indentLengths">
            <summary>
            A list of the lengths of each indent that was added with PushIndent
            </summary>
        </member>
        <member name="P:LamestWebserver.WebServices.Generators.LocalWebServiceTemplateBase.CurrentIndent">
            <summary>
            Gets the current indent we use when adding lines to the output
            </summary>
        </member>
        <member name="P:LamestWebserver.WebServices.Generators.LocalWebServiceTemplateBase.Session">
            <summary>
            Current transformation session
            </summary>
        </member>
        <member name="M:LamestWebserver.WebServices.Generators.LocalWebServiceTemplateBase.Write(System.String)">
            <summary>
            Write text directly into the generated output
            </summary>
        </member>
        <member name="M:LamestWebserver.WebServices.Generators.LocalWebServiceTemplateBase.WriteLine(System.String)">
            <summary>
            Write text directly into the generated output
            </summary>
        </member>
        <member name="M:LamestWebserver.WebServices.Generators.LocalWebServiceTemplateBase.Write(System.String,System.Object[])">
            <summary>
            Write formatted text directly into the generated output
            </summary>
        </member>
        <member name="M:LamestWebserver.WebServices.Generators.LocalWebServiceTemplateBase.WriteLine(System.String,System.Object[])">
            <summary>
            Write formatted text directly into the generated output
            </summary>
        </member>
        <member name="M:LamestWebserver.WebServices.Generators.LocalWebServiceTemplateBase.Error(System.String)">
            <summary>
            Raise an error
            </summary>
        </member>
        <member name="M:LamestWebserver.WebServices.Generators.LocalWebServiceTemplateBase.Warning(System.String)">
            <summary>
            Raise a warning
            </summary>
        </member>
        <member name="M:LamestWebserver.WebServices.Generators.LocalWebServiceTemplateBase.PushIndent(System.String)">
            <summary>
            Increase the indent
            </summary>
        </member>
        <member name="M:LamestWebserver.WebServices.Generators.LocalWebServiceTemplateBase.PopIndent">
            <summary>
            Remove the last indent that was added with PushIndent
            </summary>
        </member>
        <member name="M:LamestWebserver.WebServices.Generators.LocalWebServiceTemplateBase.ClearIndent">
            <summary>
            Remove any indentation
            </summary>
        </member>
        <member name="T:LamestWebserver.WebServices.Generators.LocalWebServiceTemplateBase.ToStringInstanceHelper">
            <summary>
            Utility class to produce culture-oriented representation of an object as a string.
            </summary>
        </member>
        <member name="P:LamestWebserver.WebServices.Generators.LocalWebServiceTemplateBase.ToStringInstanceHelper.FormatProvider">
            <summary>
            Gets or sets format provider to be used by ToStringWithCulture method.
            </summary>
        </member>
        <member name="M:LamestWebserver.WebServices.Generators.LocalWebServiceTemplateBase.ToStringInstanceHelper.ToStringWithCulture(System.Object)">
            <summary>
            This is called from the compile/run appdomain to convert objects within an expression block to a string
            </summary>
        </member>
        <member name="P:LamestWebserver.WebServices.Generators.LocalWebServiceTemplateBase.ToStringHelper">
            <summary>
            Helper to produce culture-oriented representation of an object as a string
            </summary>
        </member>
        <member name="T:LamestWebserver.WebServices.IWebService">
            <summary>
            This interface marks the a type as LamestWebserver WebService.
            </summary>
        </member>
        <member name="T:LamestWebserver.WebServices.WebServiceAttribute">
            <summary>
            An Attribute Associated with the WebService Host.
            </summary>
        </member>
        <member name="T:LamestWebserver.WebServices.WebServiceIgnore">
            <summary>
            This Attribute specifies to Ignore a specific public method, property or field.
            </summary>
        </member>
        <member name="T:LamestWebserver.WebServices.WebServiceException">
            <summary>
            An abstract Exception type for grouping WebServiceExceptions.
            </summary>
        </member>
        <member name="M:LamestWebserver.WebServices.WebServiceException.#ctor">
            <inheritdoc />
        </member>
        <member name="M:LamestWebserver.WebServices.WebServiceException.#ctor(System.String)">
            <inheritdoc />
        </member>
        <member name="M:LamestWebserver.WebServices.WebServiceException.#ctor(System.String,System.Exception)">
            <inheritdoc />
        </member>
        <member name="M:LamestWebserver.WebServices.WebServiceException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <inheritdoc />
        </member>
        <member name="T:LamestWebserver.WebServices.RemoteException">
            <summary>
            An Exception for failed remote operations.
            </summary>
        </member>
        <member name="M:LamestWebserver.WebServices.RemoteException.#ctor">
            <inheritdoc />
        </member>
        <member name="M:LamestWebserver.WebServices.RemoteException.#ctor(System.String)">
            <inheritdoc />
        </member>
        <member name="M:LamestWebserver.WebServices.RemoteException.#ctor(System.String,System.Exception)">
            <inheritdoc />
        </member>
        <member name="M:LamestWebserver.WebServices.RemoteException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <inheritdoc />
        </member>
        <member name="T:LamestWebserver.WebServices.ServiceNotAvailableException">
            <summary>
            An exception for when a WebService is not available.
            </summary>
        </member>
        <member name="M:LamestWebserver.WebServices.ServiceNotAvailableException.#ctor">
            <inheritdoc />
        </member>
        <member name="M:LamestWebserver.WebServices.ServiceNotAvailableException.#ctor(System.String)">
            <inheritdoc />
        </member>
        <member name="M:LamestWebserver.WebServices.ServiceNotAvailableException.#ctor(System.String,System.Exception)">
            <inheritdoc />
        </member>
        <member name="M:LamestWebserver.WebServices.ServiceNotAvailableException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <inheritdoc />
        </member>
        <member name="T:LamestWebserver.WebServices.IncompatibleTypeException">
            <summary>
            An exception for when a Type is not compatible with the specifications.
            </summary>
        </member>
        <member name="M:LamestWebserver.WebServices.IncompatibleTypeException.#ctor">
            <inheritdoc />
        </member>
        <member name="M:LamestWebserver.WebServices.IncompatibleTypeException.#ctor(System.String)">
            <inheritdoc />
        </member>
        <member name="M:LamestWebserver.WebServices.IncompatibleTypeException.#ctor(System.String,System.Exception)">
            <inheritdoc />
        </member>
        <member name="M:LamestWebserver.WebServices.IncompatibleTypeException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <inheritdoc />
        </member>
        <member name="T:LamestWebserver.WebServices.WebServiceIncompatibleException">
            <summary>
            An exception for when a remote WebService is behaving different than expected.
            </summary>
        </member>
        <member name="M:LamestWebserver.WebServices.WebServiceIncompatibleException.#ctor">
            <inheritdoc />
        </member>
        <member name="M:LamestWebserver.WebServices.WebServiceIncompatibleException.#ctor(System.String)">
            <inheritdoc />
        </member>
        <member name="M:LamestWebserver.WebServices.WebServiceIncompatibleException.#ctor(System.String,System.Exception)">
            <inheritdoc />
        </member>
        <member name="M:LamestWebserver.WebServices.WebServiceIncompatibleException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <inheritdoc />
        </member>
        <member name="T:LamestWebserver.WebServices.WebServiceHandler">
            <summary>
            A WebServiceHandler communicates with Local &amp; Remote WebServices.
            </summary>
        </member>
        <member name="F:LamestWebserver.WebServices.WebServiceHandler.CurrentServiceHandler">
            <summary>
            The WebServiceHandler Singleton.
            </summary>
        </member>
        <member name="M:LamestWebserver.WebServices.WebServiceHandler.#ctor">
            <summary>
            Creates a WebServiceHandler instance.
            </summary>
        </member>
        <member name="M:LamestWebserver.WebServices.WebServiceHandler.AssignRemoteEndpointToType(System.Type,System.Net.IPEndPoint)">
            <summary>
            Assigns an IPEndPoint to a specific type to be found on Remote Machine as WebServices.
            </summary>
            <param name="type">The type to assign to.</param>
            <param name="remoteEndpoint">The IPEndpoint of the Remote Machine.</param>
        </member>
        <member name="M:LamestWebserver.WebServices.WebServiceHandler.GetLocalService``1">
            <summary>
            Retrieves a local WebService of a specified Type.
            </summary>
            <typeparam name="T">The type to generate a local Object of.</typeparam>
            <returns>Returns an instance of the local WebService implementation.</returns>
        </member>
        <member name="M:LamestWebserver.WebServices.WebServiceHandler.GetLocalService(System.Type)">
            <summary>
            Retrieves a local WebService of a specified Type.
            </summary>
            <param name="type">The type to generate a local Object of.</param>
            <returns>Returns an instance of the local WebService implementation.</returns>
        </member>
        <member name="M:LamestWebserver.WebServices.WebServiceHandler.GetRequesterService``1">
            <summary>
            Retrieves a requesting WebService of a specified Type, that will contact the remote WebService whenever a method is executed or a property is being set or retrieved.
            </summary>
            <typeparam name="T">The type to generate a requesting Object of.</typeparam>
            <returns>Returns an instance of the requesting WebService implementation.</returns>
        </member>
        <member name="M:LamestWebserver.WebServices.WebServiceHandler.GetRequesterService(System.Type)">
            <summary>
            Retrieves a requesting WebService of a specified Type, that will contact the remote WebService whenever a method is executed or a property is being set or retrieved.
            </summary>
            <param name="type">The type to generate a requesting Object of.</param>
            <returns>Returns an instance of the requesting WebService implementation.</returns>
        </member>
        <member name="M:LamestWebserver.WebServices.WebServiceHandler.Request(LamestWebserver.WebServices.WebServiceRequest)">
            <summary>
            Requests a certain WebServiceRequest at the local WebServiceHandler.
            </summary>
            <param name="webServiceRequest">The WebServiceRequest to reply to.</param>
            <returns>Returns the response as WebServiceResponse.</returns>
        </member>
        <member name="T:LamestWebserver.WebServices.WebServiceRequest">
            <summary>
            A request to a WebService.
            </summary>
        </member>
        <member name="F:LamestWebserver.WebServices.WebServiceRequest.Namespace">
            <summary>
            The namespace of the requested type.
            </summary>
        </member>
        <member name="F:LamestWebserver.WebServices.WebServiceRequest.Type">
            <summary>
            The name of the requested type.
            </summary>
        </member>
        <member name="F:LamestWebserver.WebServices.WebServiceRequest.Method">
            <summary>
            The name of the method that will be requested.
            </summary>
        </member>
        <member name="F:LamestWebserver.WebServices.WebServiceRequest.Parameters">
            <summary>
            The parameters of the method call.
            </summary>
        </member>
        <member name="F:LamestWebserver.WebServices.WebServiceRequest.MethodParameterTypes">
            <summary>
            The names of the parameter types of the method definition.
            </summary>
        </member>
        <member name="F:LamestWebserver.WebServices.WebServiceRequest.ParameterTypes">
            <summary>
            The names of the types that were passed as parameters to the method.
            </summary>
        </member>
        <member name="M:LamestWebserver.WebServices.WebServiceRequest.#ctor">
            <summary>
            Deserialization constructor.
            </summary>
        </member>
        <member name="M:LamestWebserver.WebServices.WebServiceRequest.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Deserialization constructor.
            </summary>
            <param name="info">SerializationInfo.</param>
            <param name="context">StreamingContext.</param>
        </member>
        <member name="M:LamestWebserver.WebServices.WebServiceRequest.Request``1(System.String,System.Type[],System.Object[])">
            <summary>
            Builds a request to a specified method of a specified type using the given parameters.
            </summary>
            <typeparam name="T">The Type of the method to call.</typeparam>
            <param name="method">The name of the method to call.</param>
            <param name="methodParameterTypes">The types of the method definition.</param>
            <param name="parameters">The parameters to pass to the method.</param>
            <returns>Returns a WebServiceRequest containing the given specification.</returns>
        </member>
        <member name="M:LamestWebserver.WebServices.WebServiceRequest.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <inheritdoc />
        </member>
        <member name="M:LamestWebserver.WebServices.WebServiceRequest.GetSchema">
            <inheritdoc />
        </member>
        <member name="M:LamestWebserver.WebServices.WebServiceRequest.ReadXml(System.Xml.XmlReader)">
            <inheritdoc />
        </member>
        <member name="M:LamestWebserver.WebServices.WebServiceRequest.WriteXml(System.Xml.XmlWriter)">
            <inheritdoc />
        </member>
        <member name="T:LamestWebserver.WebServices.WebServiceResponse">
            <summary>
            A response from a WebService retrieving the result of a method call.
            </summary>
        </member>
        <member name="F:LamestWebserver.WebServices.WebServiceResponse.ReturnType">
            <summary>
            The return type of the method call.
            </summary>
        </member>
        <member name="F:LamestWebserver.WebServices.WebServiceResponse.ReturnValueType">
            <summary>
            The type of the returned value (if any).
            </summary>
        </member>
        <member name="F:LamestWebserver.WebServices.WebServiceResponse.ReturnValue">
            <summary>
            The returned value (if any).
            </summary>
        </member>
        <member name="F:LamestWebserver.WebServices.WebServiceResponse.ExceptionThrown">
            <summary>
            The thrown exception (if any).
            </summary>
        </member>
        <member name="F:LamestWebserver.WebServices.WebServiceResponse.StringifiedException">
            <summary>
            The thrown exception as string (if any).
            </summary>
        </member>
        <member name="M:LamestWebserver.WebServices.WebServiceResponse.#ctor">
            <summary>
            Deserialization constructor.
            </summary>
        </member>
        <member name="M:LamestWebserver.WebServices.WebServiceResponse.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Deserialization constructor.
            </summary>
            <param name="info">SerializationInfo.</param>
            <param name="context">StreamingContext.</param>
        </member>
        <member name="M:LamestWebserver.WebServices.WebServiceResponse.Return">
            <summary>
            Builds a new WebServiceResponse for a method that returned `void`.
            </summary>
            <returns>The corresponding WebServiceResponse.</returns>
        </member>
        <member name="M:LamestWebserver.WebServices.WebServiceResponse.Return``1(``0)">
            <summary>
            Builds a new WebServiceResponse for a method that returned a value.
            </summary>
            <returns>The corresponding WebServiceResponse.</returns>
        </member>
        <member name="M:LamestWebserver.WebServices.WebServiceResponse.Exception(System.Exception)">
            <summary>
            Builds a new WebServiceResponse for a method that threw an exception.
            </summary>
            <returns>The corresponding WebServiceResponse.</returns>
        </member>
        <member name="M:LamestWebserver.WebServices.WebServiceResponse.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <inheritdoc />
        </member>
        <member name="M:LamestWebserver.WebServices.WebServiceResponse.GetSchema">
            <inheritdoc />
        </member>
        <member name="M:LamestWebserver.WebServices.WebServiceResponse.ReadXml(System.Xml.XmlReader)">
            <inheritdoc />
        </member>
        <member name="M:LamestWebserver.WebServices.WebServiceResponse.WriteXml(System.Xml.XmlWriter)">
            <inheritdoc />
        </member>
        <member name="T:LamestWebserver.WebServices.EWebServiceReturnType">
            <summary>
            The return type of a WebServiceResponse.
            </summary>
        </member>
        <member name="F:LamestWebserver.WebServices.EWebServiceReturnType.ReturnVoid">
            <summary>
            The method returned `void`.
            </summary>
        </member>
        <member name="F:LamestWebserver.WebServices.EWebServiceReturnType.ReturnValue">
            <summary>
            The method returned a value.
            </summary>
        </member>
        <member name="F:LamestWebserver.WebServices.EWebServiceReturnType.ExceptionThrown">
            <summary>
            The method threw an exception.
            </summary>
        </member>
        <member name="T:LamestWebserver.WebServices.WebServiceServer">
            <summary>
            A WebServiceServer makes a WebServiceHandler available to Remote Machines.
            </summary>
        </member>
        <member name="F:LamestWebserver.WebServices.WebServiceServer.RequestHandler">
            <summary>
            The internal WebRequestHandler of this WebServiceServer.
            </summary>
        </member>
        <member name="F:LamestWebserver.WebServices.WebServiceServer.RequestMaxPacketSize">
            <summary>
            The size that is read from the networkStream for each request.
            </summary>
        </member>
        <member name="M:LamestWebserver.WebServices.WebServiceServer.#ctor(System.Int32)">
            <summary>
            Starts a new WebServiceServer on a specified port.
            </summary>
            <param name="port">The port to start on.</param>
        </member>
        <member name="M:LamestWebserver.WebServices.WebServiceServer.#ctor(LamestWebserver.WebServices.WebServiceHandler,System.Int32)">
            <summary>
            Starts a WebServiceServer at a given port using a specified WebRequestHandler to resolve requests.
            </summary>
            <param name="webRequestHandler">The WebRequestHandler to resolve requests with.</param>
            <param name="port">The Port to listen on.</param>
        </member>
        <member name="M:LamestWebserver.WebServices.WebServiceServer.HandleClient(System.Net.Sockets.TcpClient,System.Net.Sockets.NetworkStream)">
            <inheritdoc />
        </member>
        <member name="T:LamestWebserver.WebServices.WebServiceServerRequest">
            <summary>
            Contains Functionality to send requests to remote WebServiceServers.
            </summary>
        </member>
        <member name="F:LamestWebserver.WebServices.WebServiceServerRequest.MaxResponseSize">
            <summary>
            The maximum size of the response from the remote WebServiceServer.
            </summary>
        </member>
        <member name="M:LamestWebserver.WebServices.WebServiceServerRequest.Request(LamestWebserver.WebServices.WebServiceRequest,System.Net.IPEndPoint)">
            <summary>
            Requests a WebServiceRequest at a remote WebServiceServer.
            </summary>
            <param name="request">The request to send.</param>
            <param name="ipEndPoint">The IPEndpoint of the remote WebServiceServer.</param>
            <returns>Returns a WebServiceResponse from the Remote WebServiceServer.</returns>
        </member>
        <member name="T:LamestWebserver.WebSocketManagementOvertakeFlagException">
            <summary>
            An Exception used to Tell the outer Thread that the Websocket controll has been taken over by another thread.
            </summary>
        </member>
        <member name="T:LamestWebserver.WebSocketCommunicationHandler">
            <summary>
            A raw Communication Handler for WebSocket Connections, representing a response scheme for WebSocket Requests
            </summary>
        </member>
        <member name="P:LamestWebserver.WebSocketCommunicationHandler.URL">
            <inheritdoc />
        </member>
        <member name="M:LamestWebserver.WebSocketCommunicationHandler.#ctor(System.String)">
            <summary>
            Constructs and registers a new CommunicationHandler for Websockets
            </summary>
            <param name="URL"></param>
        </member>
        <member name="E:LamestWebserver.WebSocketCommunicationHandler.OnMessage">
            <summary>
            The event to execute whenever a new Message has been received
            </summary>
        </member>
        <member name="E:LamestWebserver.WebSocketCommunicationHandler.OnResponded">
            <summary>
            The event to execute whenever a new Message has been sent
            </summary>
        </member>
        <member name="E:LamestWebserver.WebSocketCommunicationHandler.OnConnect">
            <summary>
            The event to execute whenever a client connected
            </summary>
        </member>
        <member name="E:LamestWebserver.WebSocketCommunicationHandler.OnDisconnect">
            <summary>
            The event to execute whenever a client disconnected
            </summary>
        </member>
        <member name="M:LamestWebserver.WebSocketCommunicationHandler.Register">
            <summary>
            Registers the current handler at the servers
            </summary>
        </member>
        <member name="M:LamestWebserver.WebSocketCommunicationHandler.Unregister">
            <summary>
            Unregisters the current handler at the servers
            </summary>
        </member>
        <member name="T:LamestWebserver.WebSocketHandlerProxy">
            <summary>
            A WebSocketHandlerProxy represents a single clients connection to a WebSocketCommunicationHandler
            </summary>
        </member>
        <member name="P:LamestWebserver.WebSocketHandlerProxy.IsActive">
            <summary>
            Is the client still active
            </summary>
        </member>
        <member name="F:LamestWebserver.WebSocketHandlerProxy.LastMessageReceived">
            <summary>
            When did we receive the last message from the client
            </summary>
        </member>
        <member name="F:LamestWebserver.WebSocketHandlerProxy.LastMessageSent">
            <summary>
            When did we send the last message to the client
            </summary>
        </member>
        <member name="M:LamestWebserver.WebSocketHandlerProxy.Respond(System.String)">
            <summary>
            Sends a message to the client
            </summary>
            <param name="message">the message to send</param>
        </member>
        <member name="M:LamestWebserver.WebSocketHandlerProxy.RespondPong(System.Byte[])">
            <summary>
            Responds a Pong to the client
            </summary>
            <param name="bytes">the contained bytes</param>
        </member>
        <member name="M:LamestWebserver.WebSocketHandlerProxy.RespondPing(System.Byte[])">
            <summary>
            Responds a Ping to the client
            </summary>
            <param name="bytes">the contained bytes</param>
        </member>
        <member name="M:LamestWebserver.WebSocketHandlerProxy.RespondBinary(System.Byte[])">
            <summary>
            Responds binary data to the client
            </summary>
            <param name="bytes">the bytes to send</param>
        </member>
        <member name="M:LamestWebserver.WebSocketHandlerProxy.ReadAsync">
            <summary>
            Reads asynchronously from the client stream
            </summary>
            <returns>true if the client responded anything</returns>
        </member>
        <member name="M:LamestWebserver.WebSocketHandlerProxy.ConnectionClosed">
            <summary>
            Triggers the disconnected event in the handler
            </summary>
        </member>
    </members>
</doc>
